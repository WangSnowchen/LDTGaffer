OpenShadingLanguage 1.00
# Compiled by oslc 1.9.9
# options: -Ipath
shader node_gradient_texture
param	int	use_mapping	0		%read{2,2} %write{2147483647,-1}
param	matrix	mapping	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0		%read{3,3} %write{2147483647,-1}
param	string	Type	"Linear"		%read{9,45} %write{2147483647,-1}
param	point	Vector	0 0 0		%read{1,1} %write{0,0} %initexpr
oparam	float	Fac	0		%read{49,49} %write{48,48}
oparam	color	Color	0 0 0		%read{2147483647,-1} %write{49,49}
global	point	P	%read{0,0} %write{2147483647,-1}
local	float	___667_x	%read{11,34} %write{5,5}
local	float	___667_y	%read{27,35} %write{6,6}
local	float	___667_z	%read{37,37} %write{7,7}
local	float	___667_result	%read{48,48} %write{8,47}
local	float	___669_r	%read{15,15} %write{14,14}
local	float	___670_r	%read{20,23} %write{19,19}
local	float	___670_t	%read{21,22} %write{20,20}
local	float	___673_r	%read{44,47} %write{41,41}
local	point	p	%read{3,7} %write{1,3}
const	string	$const1	"gradient"		%read{4,4} %write{2147483647,-1}
const	int	$const2	0		%read{5,5} %write{2147483647,-1}
const	int	$const3	1		%read{6,6} %write{2147483647,-1}
const	int	$const4	2		%read{7,7} %write{2147483647,-1}
const	float	$const5	0		%read{8,41} %write{2147483647,-1}
const	string	$const6	"Linear"		%read{9,9} %write{2147483647,-1}
temp	int	$tmp1	%read{10,10} %write{9,9}
const	string	$const7	"Quadratic"		%read{12,12} %write{2147483647,-1}
temp	int	$tmp2	%read{13,13} %write{12,12}
const	string	$const8	"Easing"		%read{16,16} %write{2147483647,-1}
temp	int	$tmp3	%read{17,17} %write{16,16}
temp	float	$tmp4	%read{19,19} %write{18,18}
const	float	$const9	1		%read{19,40} %write{2147483647,-1}
const	float	$const10	3		%read{21,21} %write{2147483647,-1}
temp	float	$tmp5	%read{24,24} %write{21,21}
const	float	$const11	2		%read{22,22} %write{2147483647,-1}
temp	float	$tmp6	%read{23,23} %write{22,22}
temp	float	$tmp7	%read{24,24} %write{23,23}
const	string	$const12	"Diagonal"		%read{25,25} %write{2147483647,-1}
temp	int	$tmp8	%read{26,26} %write{25,25}
temp	float	$tmp9	%read{28,28} %write{27,27}
const	float	$const13	0.5		%read{28,33} %write{2147483647,-1}
const	string	$const14	"Radial"		%read{29,29} %write{2147483647,-1}
temp	int	$tmp10	%read{30,30} %write{29,29}
temp	float	$tmp11	%read{32,32} %write{31,31}
const	float	$const15	6.2831855		%read{32,32} %write{2147483647,-1}
temp	float	$tmp12	%read{33,33} %write{32,32}
temp	float	$tmp13	%read{40,40} %write{39,39}
temp	float	$tmp14	%read{36,36} %write{34,34}
temp	float	$tmp15	%read{36,36} %write{35,35}
temp	float	$tmp16	%read{38,38} %write{36,36}
temp	float	$tmp17	%read{38,38} %write{37,37}
temp	float	$tmp18	%read{39,39} %write{38,38}
temp	float	$tmp19	%read{41,41} %write{40,40}
const	string	$const16	"Quadratic Sphere"		%read{42,42} %write{2147483647,-1}
temp	int	$tmp20	%read{43,43} %write{42,42}
const	string	$const17	"Spherical"		%read{45,45} %write{2147483647,-1}
temp	int	$tmp21	%read{46,46} %write{45,45}
code Vector
# include/node_gradient_texture.osl:68
# 	output float Fac = 0.0,
	assign		Vector P 	%filename{"include/node_gradient_texture.osl"} %line{68} %argrw{"wr"}
code ___main___
# include/node_gradient_texture.osl:72
# 
	assign		p Vector 	%filename{"include/node_gradient_texture.osl"} %line{72} %argrw{"wr"}
# include/node_gradient_texture.osl:74
# 		p = transform(mapping, p);
	if		use_mapping 4 4 	%line{74} %argrw{"r"}
# include/node_gradient_texture.osl:75
# 
	transform	p mapping p 	%line{75} %argrw{"wrr"}
# include/node_gradient_texture.osl:77
# 	Color = color(Fac, Fac, Fac);
	functioncall	$const1 49 	%line{77} %argrw{"r"}
# include/node_gradient_texture.osl:27
# 	y = p[1];
	compref		___667_x p $const2 	%line{27} %argrw{"wrr"}
# include/node_gradient_texture.osl:28
# 	z = p[2];
	compref		___667_y p $const3 	%line{28} %argrw{"wrr"}
# include/node_gradient_texture.osl:29
# 
	compref		___667_z p $const4 	%line{29} %argrw{"wrr"}
# include/node_gradient_texture.osl:31
# 
	assign		___667_result $const5 	%line{31} %argrw{"wr"}
# include/node_gradient_texture.osl:33
# 		result = x;
	eq		$tmp1 Type $const6 	%line{33} %argrw{"wrr"}
	if		$tmp1 12 48 	%argrw{"r"}
# include/node_gradient_texture.osl:34
# 	}
	assign		___667_result ___667_x 	%line{34} %argrw{"wr"}
# include/node_gradient_texture.osl:36
# 		float r = max(x, 0.0);
	eq		$tmp2 Type $const7 	%line{36} %argrw{"wrr"}
	if		$tmp2 16 48 	%argrw{"r"}
# include/node_gradient_texture.osl:37
# 		result = r * r;
	max		___669_r ___667_x $const5 	%line{37} %argrw{"wrr"}
# include/node_gradient_texture.osl:38
# 	}
	mul		___667_result ___669_r ___669_r 	%line{38} %argrw{"wrr"}
# include/node_gradient_texture.osl:40
# 		float r = min(max(x, 0.0), 1.0);
	eq		$tmp3 Type $const8 	%line{40} %argrw{"wrr"}
	if		$tmp3 25 48 	%argrw{"r"}
# include/node_gradient_texture.osl:41
# 		float t = r * r;
	max		$tmp4 ___667_x $const5 	%line{41} %argrw{"wrr"}
	min		___670_r $tmp4 $const9 	%argrw{"wrr"}
# include/node_gradient_texture.osl:42
# 		
	mul		___670_t ___670_r ___670_r 	%line{42} %argrw{"wrr"}
# include/node_gradient_texture.osl:44
# 	}
	mul		$tmp5 $const10 ___670_t 	%line{44} %argrw{"wrr"}
	mul		$tmp6 $const11 ___670_t 	%argrw{"wrr"}
	mul		$tmp7 $tmp6 ___670_r 	%argrw{"wrr"}
	sub		___667_result $tmp5 $tmp7 	%argrw{"wrr"}
# include/node_gradient_texture.osl:46
# 		result = (x + y) * 0.5;
	eq		$tmp8 Type $const12 	%line{46} %argrw{"wrr"}
	if		$tmp8 29 48 	%argrw{"r"}
# include/node_gradient_texture.osl:47
# 	}
	add		$tmp9 ___667_x ___667_y 	%line{47} %argrw{"wrr"}
	mul		___667_result $tmp9 $const13 	%argrw{"wrr"}
# include/node_gradient_texture.osl:49
# 		result = atan2(y, x) / M_2PI + 0.5;
	eq		$tmp10 Type $const14 	%line{49} %argrw{"wrr"}
	if		$tmp10 34 48 	%argrw{"r"}
# include/node_gradient_texture.osl:50
# 	}
	atan2		$tmp11 ___667_y ___667_x 	%line{50} %argrw{"wrr"}
	div		$tmp12 $tmp11 $const15 	%argrw{"wrr"}
	add		___667_result $tmp12 $const13 	%argrw{"wrr"}
# include/node_gradient_texture.osl:53
# 
	mul		$tmp14 ___667_x ___667_x 	%line{53} %argrw{"wrr"}
	mul		$tmp15 ___667_y ___667_y 	%argrw{"wrr"}
	add		$tmp16 $tmp14 $tmp15 	%argrw{"wrr"}
	mul		$tmp17 ___667_z ___667_z 	%argrw{"wrr"}
	add		$tmp18 $tmp16 $tmp17 	%argrw{"wrr"}
	sqrt		$tmp13 $tmp18 	%argrw{"wr"}
	sub		$tmp19 $const9 $tmp13 	%argrw{"wrr"}
	max		___673_r $tmp19 $const5 	%argrw{"wrr"}
# include/node_gradient_texture.osl:55
# 			result = r * r;
	eq		$tmp20 Type $const16 	%line{55} %argrw{"wrr"}
	if		$tmp20 45 48 	%argrw{"r"}
# include/node_gradient_texture.osl:56
# 		else if (type == "Spherical")
	mul		___667_result ___673_r ___673_r 	%line{56} %argrw{"wrr"}
# include/node_gradient_texture.osl:57
# 			result = r;
	eq		$tmp21 Type $const17 	%line{57} %argrw{"wrr"}
	if		$tmp21 48 48 	%argrw{"r"}
# include/node_gradient_texture.osl:58
# 	}
	assign		___667_result ___673_r 	%line{58} %argrw{"wr"}
# include/node_gradient_texture.osl:61
# }
	assign		Fac ___667_result 	%line{61} %argrw{"wr"}
# include/node_gradient_texture.osl:78
# }
	color		Color Fac Fac Fac 	%line{78} %argrw{"wrrr"}
	end
