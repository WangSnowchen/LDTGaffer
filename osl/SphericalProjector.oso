OpenShadingLanguage 1.00
# Compiled by oslc 1.9.9
# options: -Ipath
shader SphericalProjector	%meta{string,label,"Spherical Projection"} %meta{string,help,"<h3>Spherical Projection</h3> Simple object based spherical projector. Click the pick button and select an object (for example a point helper). The texture will be projected spherically in the space of that object. "} %meta{string,category,"Projection"} %meta{string,version,"1.0"} 
param	string	INode	"<Pick Object>"		%meta{string,widget,"max:actionButton"} %meta{string,label,"Object to Project"} %meta{string,actionID,"selectObject('Pick some Object')"} %meta{int,connectable,0}  %read{2147483647,-1} %write{2147483647,-1}
param	vector	XAxis	1 0 0		%meta{int,connectable,0} %meta{string,widget,"null"}  %read{5,13} %write{2147483647,-1} %derivs
param	vector	YAxis	0 1 0		%meta{int,connectable,0} %meta{string,widget,"null"}  %read{7,14} %write{2147483647,-1} %derivs
param	vector	ZAxis	0 0 1		%meta{int,connectable,0} %meta{string,widget,"null"}  %read{9,15} %write{2147483647,-1} %derivs
param	point	Position	0 0 0		%meta{int,connectable,0} %meta{string,widget,"null"}  %read{2,2} %write{2147483647,-1} %derivs
param	int	Backface	0		%meta{string,widget,"checkBox"} %meta{string,label,"Project on Back"} %meta{string,packName,"Options"} %meta{int,connectable,0}  %read{33,33} %write{2147483647,-1}
param	string	Filename	"uv-grid.png"		%meta{string,widget,"filename"} %meta{int,autopop,0}  %read{44,78} %write{2147483647,-1}
param	int	AutoGamma	1		%meta{string,widget,"checkBox"}  %read{49,49} %write{2147483647,-1}
param	float	ManualGamma	1		%meta{string,label,"Manual Gamma"}  %read{84,86} %write{2147483647,-1}
oparam	point	UV	0 0 0		%read{41,42} %write{22,28} %derivs
oparam	color	Col	0 0 0		%meta{string,label,"Col (RGB)"}  %read{83,86} %write{44,86}
oparam	float	Alpha	0		%read{2147483647,-1} %write{40,48}
global	point	P	%read{1,1} %write{2147483647,-1} %derivs
global	normal	N	%read{4,4} %write{2147483647,-1}
local	point	pnt	%read{12,12} %write{2,2} %derivs
local	normal	nrm	%read{29,29} %write{4,4}
local	float	xScale	%read{6,6} %write{5,6}
local	float	yScale	%read{8,8} %write{7,8}
local	float	zScale	%read{10,10} %write{9,10}
local	int	front	%read{36,36} %write{11,32}
local	vector	D	%read{13,15} %write{12,12} %derivs
local	vector	Direction	%read{17,29} %write{16,16} %derivs
local	int	___322_channels	%read{46,46} %write{45,45}
temp	point	$tmp1	%read{2,2} %write{1,1} %derivs
const	string	$const1	"world"		%read{1,4} %write{2147483647,-1}
const	string	$const2	"transform"		%read{0,3} %write{2147483647,-1}
const	string	$const3	"common"		%read{1,4} %write{2147483647,-1}
const	int	$const4	1		%read{11,42} %write{2147483647,-1}
temp	float	$tmp2	%read{16,16} %write{13,13} %derivs
temp	float	$tmp3	%read{16,16} %write{14,14} %derivs
temp	float	$tmp4	%read{16,16} %write{15,15} %derivs
temp	float	$tmp5	%read{21,21} %write{19,19} %derivs
const	int	$const5	0		%read{17,80} %write{2147483647,-1}
temp	float	$tmp6	%read{19,19} %write{17,17} %derivs
temp	float	$tmp7	%read{19,19} %write{18,18} %derivs
const	float	$const6	3.1415927		%read{20,25} %write{2147483647,-1}
const	float	$const7	2		%read{20,20} %write{2147483647,-1}
temp	float	$tmp8	%read{21,21} %write{20,20} %derivs
temp	float	$tmp9	%read{22,22} %write{21,21} %derivs
const	float	$const8	0.5		%read{26,26} %write{2147483647,-1}
temp	float	$tmp10	%read{25,25} %write{24,24} %derivs
const	int	$const9	2		%read{23,28} %write{2147483647,-1}
temp	float	$tmp11	%read{24,24} %write{23,23} %derivs
temp	float	$tmp12	%read{26,26} %write{25,25} %derivs
temp	float	$tmp13	%read{27,27} %write{26,26} %derivs
const	float	$const10	0		%read{28,28} %write{2147483647,-1}
temp	float	$tmp14	%read{30,30} %write{29,29}
temp	int	$tmp15	%read{31,31} %write{30,30}
temp	int	$tmp16	%read{34,34} %write{33,33}
temp	int	$tmp17	%read{35,39} %write{34,38}
temp	int	$tmp18	%read{37,37} %write{36,36}
temp	int	$tmp19	%read{38,38} %write{37,37}
const	float	$const11	1		%read{40,84} %write{2147483647,-1}
temp	float	$tmp20	%read{44,44} %write{41,41} %derivs
temp	float	$tmp21	%read{43,43} %write{42,42} %derivs
temp	float	$tmp22	%read{44,44} %write{43,43} %derivs
const	string	$const12	"alpha"		%read{44,44} %write{2147483647,-1}
const	string	$const13	"wrap"		%read{44,44} %write{2147483647,-1}
const	string	$const14	"periodic"		%read{44,44} %write{2147483647,-1}
temp	int	$tmp23	%read{2147483647,-1} %write{45,45}
const	string	$const15	"channels"		%read{45,45} %write{2147483647,-1}
const	int	$const16	4		%read{46,46} %write{2147483647,-1}
temp	int	$tmp24	%read{47,47} %write{46,46}
temp	int	$tmp25	%read{51,51} %write{50,50}
const	string	$const17	".exr"		%read{50,50} %write{2147483647,-1}
temp	int	$tmp26	%read{52,52} %write{51,51}
temp	int	$tmp27	%read{53,58} %write{52,57}
temp	int	$tmp28	%read{55,55} %write{54,54}
const	string	$const18	".EXR"		%read{54,54} %write{2147483647,-1}
temp	int	$tmp29	%read{56,56} %write{55,55}
temp	int	$tmp30	%read{57,57} %write{56,56}
temp	int	$tmp31	%read{59,64} %write{58,63}
temp	int	$tmp32	%read{61,61} %write{60,60}
const	string	$const19	".hdr"		%read{60,60} %write{2147483647,-1}
temp	int	$tmp33	%read{62,62} %write{61,61}
temp	int	$tmp34	%read{63,63} %write{62,62}
temp	int	$tmp35	%read{65,70} %write{64,69}
temp	int	$tmp36	%read{67,67} %write{66,66}
const	string	$const20	".HDR"		%read{66,66} %write{2147483647,-1}
temp	int	$tmp37	%read{68,68} %write{67,67}
temp	int	$tmp38	%read{69,69} %write{68,68}
temp	int	$tmp39	%read{71,76} %write{70,75}
temp	int	$tmp40	%read{73,73} %write{72,72}
const	string	$const21	".tx"		%read{72,72} %write{2147483647,-1}
temp	int	$tmp41	%read{74,74} %write{73,73}
temp	int	$tmp42	%read{75,75} %write{74,74}
temp	int	$tmp43	%read{77,82} %write{76,81}
temp	int	$tmp44	%read{79,79} %write{78,78}
const	string	$const22	".TX"		%read{78,78} %write{2147483647,-1}
temp	int	$tmp45	%read{80,80} %write{79,79}
temp	int	$tmp46	%read{81,81} %write{80,80}
const	float	$const23	2.2		%read{83,83} %write{2147483647,-1}
temp	int	$tmp47	%read{85,85} %write{84,84}
code ___main___
# source/3dsMax-OSL-Shaders/SphericalProjector.osl:53
# 	normal nrm = transform("world", N);
	functioncall	$const2 2 	%filename{"source/3dsMax-OSL-Shaders/SphericalProjector.osl"} %line{53} %argrw{"r"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:267
# point  transform (string to, point p)  { return transform("common",to,p); }
	transform	$tmp1 $const3 $const1 P 	%filename{"/opt/gaffer-0.58.0.1-linux/shaders/stdosl.h"} %line{267} %argrw{"wrrr"}
# source/3dsMax-OSL-Shaders/SphericalProjector.osl:53
# 	normal nrm = transform("world", N);
	sub		pnt $tmp1 Position 	%filename{"source/3dsMax-OSL-Shaders/SphericalProjector.osl"} %line{53} %argrw{"wrr"}
# source/3dsMax-OSL-Shaders/SphericalProjector.osl:54
# 	
	functioncall	$const2 5 	%line{54} %argrw{"r"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:265
# normal transform (string to, normal p) { return transform("common",to,p); }
	transformn	nrm $const3 $const1 N 	%filename{"/opt/gaffer-0.58.0.1-linux/shaders/stdosl.h"} %line{265} %argrw{"wrrr"}
# source/3dsMax-OSL-Shaders/SphericalProjector.osl:56
# 	float yScale = length(YAxis); yScale *= yScale;
	length		xScale XAxis 	%filename{"source/3dsMax-OSL-Shaders/SphericalProjector.osl"} %line{56} %argrw{"wr"}
	mul		xScale xScale xScale 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/SphericalProjector.osl:57
# 	float zScale = length(ZAxis); zScale *= zScale;
	length		yScale YAxis 	%line{57} %argrw{"wr"}
	mul		yScale yScale yScale 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/SphericalProjector.osl:58
# 
	length		zScale ZAxis 	%line{58} %argrw{"wr"}
	mul		zScale zScale zScale 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/SphericalProjector.osl:60
# 	
	assign		front $const4 	%line{60} %argrw{"wr"}
# source/3dsMax-OSL-Shaders/SphericalProjector.osl:62
# 	vector Direction = vector(dot(D,XAxis), dot(D,YAxis), dot(D,ZAxis));
	normalize	D pnt 	%line{62} %argrw{"wr"}
# source/3dsMax-OSL-Shaders/SphericalProjector.osl:63
# 	
	dot		$tmp2 D XAxis 	%line{63} %argrw{"wrr"}
	dot		$tmp3 D YAxis 	%argrw{"wrr"}
	dot		$tmp4 D ZAxis 	%argrw{"wrr"}
	vector		Direction $tmp2 $tmp3 $tmp4 	%argrw{"wrrr"}
# source/3dsMax-OSL-Shaders/SphericalProjector.osl:66
# 	UV[1] = 0.5 + (asin(Direction[2]) / M_PI);
	compref		$tmp6 Direction $const5 	%line{66} %argrw{"wrr"}
	compref		$tmp7 Direction $const4 	%argrw{"wrr"}
	atan2		$tmp5 $tmp6 $tmp7 	%argrw{"wrr"}
	mul		$tmp8 $const6 $const7 	%argrw{"wrr"}
	div		$tmp9 $tmp5 $tmp8 	%argrw{"wrr"}
	compassign	UV $const5 $tmp9 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/SphericalProjector.osl:67
# 	UV[2] = 0.0;
	compref		$tmp11 Direction $const9 	%line{67} %argrw{"wrr"}
	asin		$tmp10 $tmp11 	%argrw{"wr"}
	div		$tmp12 $tmp10 $const6 	%argrw{"wrr"}
	add		$tmp13 $const8 $tmp12 	%argrw{"wrr"}
	compassign	UV $const4 $tmp13 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/SphericalProjector.osl:68
# 	
	compassign	UV $const9 $const10 	%line{68} %argrw{"wrr"}
# source/3dsMax-OSL-Shaders/SphericalProjector.osl:70
# 		front = 0;				
	dot		$tmp14 Direction nrm 	%line{70} %argrw{"wrr"}
	gt		$tmp15 $tmp14 $const5 	%argrw{"wrr"}
	if		$tmp15 33 33 	%argrw{"r"}
# source/3dsMax-OSL-Shaders/SphericalProjector.osl:71
# 	
	assign		front $const5 	%line{71} %argrw{"wr"}
# source/3dsMax-OSL-Shaders/SphericalProjector.osl:74
# 	{	
	eq		$tmp16 Backface $const4 	%line{74} %argrw{"wrr"}
	neq		$tmp17 $tmp16 $const5 	%argrw{"wrr"}
	if		$tmp17 36 39 	%argrw{"r"}
	eq		$tmp18 front $const4 	%argrw{"wrr"}
	neq		$tmp19 $tmp18 $const5 	%argrw{"wrr"}
	assign		$tmp17 $tmp19 	%argrw{"wr"}
	if		$tmp17 87 87 	%argrw{"r"}
# source/3dsMax-OSL-Shaders/SphericalProjector.osl:76
# 		Col = texture(Filename, UV[0], 1.0-UV[1], "alpha", Alpha, "wrap", "periodic");
	assign		Alpha $const11 	%line{76} %argrw{"wr"}
# source/3dsMax-OSL-Shaders/SphericalProjector.osl:77
# 		
	compref		$tmp20 UV $const5 	%line{77} %argrw{"wrr"}
	compref		$tmp21 UV $const4 	%argrw{"wrr"}
	sub		$tmp22 $const11 $tmp21 	%argrw{"wrr"}
	texture		Col Filename $tmp20 $tmp22 $const12 Alpha $const13 $const14 	%argrw{"wrrrrwrr"} %argderivs{2,3}
# source/3dsMax-OSL-Shaders/SphericalProjector.osl:80
# 		if (channels < 4) // No alpha? Set it to opaque
	gettextureinfo	$tmp23 Filename $const15 ___322_channels 	%line{80} %argrw{"wrrw"}
# source/3dsMax-OSL-Shaders/SphericalProjector.osl:81
# 		{
	lt		$tmp24 ___322_channels $const16 	%line{81} %argrw{"wrr"}
	if		$tmp24 49 49 	%argrw{"r"}
# source/3dsMax-OSL-Shaders/SphericalProjector.osl:83
# 		}		
	assign		Alpha $const11 	%line{83} %argrw{"wr"}
# source/3dsMax-OSL-Shaders/SphericalProjector.osl:87
# 		{
	if		AutoGamma 84 87 	%line{87} %argrw{"r"}
# source/3dsMax-OSL-Shaders/SphericalProjector.osl:89
# 				!endswith(Filename, ".EXR") &&
	endswith	$tmp25 Filename $const17 	%line{89} %argrw{"wrr"}
	eq		$tmp26 $tmp25 $const5 	%argrw{"wrr"}
	neq		$tmp27 $tmp26 $const5 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/SphericalProjector.osl:90
# 				!endswith(Filename, ".hdr") &&
	if		$tmp27 58 58 	%line{90} %argrw{"r"}
	endswith	$tmp28 Filename $const18 	%argrw{"wrr"}
	eq		$tmp29 $tmp28 $const5 	%argrw{"wrr"}
	neq		$tmp30 $tmp29 $const5 	%argrw{"wrr"}
	assign		$tmp27 $tmp30 	%argrw{"wr"}
	neq		$tmp31 $tmp27 $const5 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/SphericalProjector.osl:91
# 				!endswith(Filename, ".HDR") &&
	if		$tmp31 64 64 	%line{91} %argrw{"r"}
	endswith	$tmp32 Filename $const19 	%argrw{"wrr"}
	eq		$tmp33 $tmp32 $const5 	%argrw{"wrr"}
	neq		$tmp34 $tmp33 $const5 	%argrw{"wrr"}
	assign		$tmp31 $tmp34 	%argrw{"wr"}
	neq		$tmp35 $tmp31 $const5 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/SphericalProjector.osl:92
# 				!endswith(Filename, ".tx")  &&
	if		$tmp35 70 70 	%line{92} %argrw{"r"}
	endswith	$tmp36 Filename $const20 	%argrw{"wrr"}
	eq		$tmp37 $tmp36 $const5 	%argrw{"wrr"}
	neq		$tmp38 $tmp37 $const5 	%argrw{"wrr"}
	assign		$tmp35 $tmp38 	%argrw{"wr"}
	neq		$tmp39 $tmp35 $const5 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/SphericalProjector.osl:93
# 				!endswith(Filename, ".TX"))
	if		$tmp39 76 76 	%line{93} %argrw{"r"}
	endswith	$tmp40 Filename $const21 	%argrw{"wrr"}
	eq		$tmp41 $tmp40 $const5 	%argrw{"wrr"}
	neq		$tmp42 $tmp41 $const5 	%argrw{"wrr"}
	assign		$tmp39 $tmp42 	%argrw{"wr"}
	neq		$tmp43 $tmp39 $const5 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/SphericalProjector.osl:94
# 			{
	if		$tmp43 82 82 	%line{94} %argrw{"r"}
	endswith	$tmp44 Filename $const22 	%argrw{"wrr"}
	eq		$tmp45 $tmp44 $const5 	%argrw{"wrr"}
	neq		$tmp46 $tmp45 $const5 	%argrw{"wrr"}
	assign		$tmp43 $tmp46 	%argrw{"wr"}
# source/3dsMax-OSL-Shaders/SphericalProjector.osl:89
# 				!endswith(Filename, ".EXR") &&
	if		$tmp43 84 84 	%line{89} %argrw{"r"}
# source/3dsMax-OSL-Shaders/SphericalProjector.osl:97
# 			}
	pow		Col Col $const23 	%line{97} %argrw{"wrr"}
# source/3dsMax-OSL-Shaders/SphericalProjector.osl:102
# 				Col = pow(Col, ManualGamma);
	neq		$tmp47 ManualGamma $const11 	%line{102} %argrw{"wrr"}
	if		$tmp47 87 87 	%argrw{"r"}
# source/3dsMax-OSL-Shaders/SphericalProjector.osl:103
# 		}
	pow		Col Col ManualGamma 	%line{103} %argrw{"wrr"}
	end
