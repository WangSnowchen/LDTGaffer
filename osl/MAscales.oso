OpenShadingLanguage 1.00
# Compiled by oslc 1.9.9
# options: -Ipath
shader MAscales
param	vector	Vector	0 0 0		%read{0,19} %write{2147483647,-1}
param	color	Diffuse_Color1	0.2 0.80000001 0.2		%read{58,130} %write{2147483647,-1}
param	color	Diffuse_Color2	0.80000001 0.2 0.2		%read{120,126} %write{2147483647,-1}
param	float	Shape	0		%read{28,132} %write{2147483647,-1}
oparam	color	Color	0 0 0		%read{2147483647,-1} %write{58,130}
oparam	int	Index	1		%read{2147483647,-1} %write{59,131}
oparam	float	Distance	0		%read{2147483647,-1} %write{60,159}
oparam	vector	Vindex	0 0 0		%read{2147483647,-1} %write{61,160}
local	float	sx	%read{12,12} %write{5,5}
local	float	sy	%read{12,12} %write{11,11}
local	vector	p	%read{31,138} %write{12,12}
local	vector	p0	%read{30,61} %write{13,13}
local	vector	p1	%read{134,160} %write{14,14}
local	vector	p2	%read{64,123} %write{15,15}
local	vector	p3	%read{92,129} %write{16,16}
local	vector	cell	%read{22,160} %write{21,21}
local	int	oddx	%read{2147483647,-1} %write{24,24}
local	int	oddy	%read{2147483647,-1} %write{27,27}
local	float	___322_x	%read{36,145} %write{32,136}
local	float	___322_y	%read{37,145} %write{35,139}
local	float	___322_r2	%read{54,159} %write{38,158}
local	float	___323_theta	%read{42,147} %write{41,145}
local	float	___323_cost	%read{51,155} %write{42,146}
local	float	___323_sint	%read{45,149} %write{42,146}
local	float	___323_cost2	%read{46,150} %write{44,148}
local	float	___323_Y	%read{52,156} %write{50,154}
local	float	d1	%read{56,60} %write{55,55}
local	float	___325_d2	%read{118,122} %write{89,89}
local	float	___325_d3	%read{124,128} %write{117,117}
const	int	$const1	0		%read{0,135} %write{2147483647,-1}
temp	float	$tmp1	%read{2,5} %write{0,0}
const	int	$const2	1		%read{6,138} %write{2147483647,-1}
const	float	$const3	1		%read{2,153} %write{2147483647,-1}
const	string	$const4	"mod"		%read{1,7} %write{2147483647,-1}
temp	float	$tmp2	%read{4,4} %write{3,3}
temp	float	$tmp3	%read{3,3} %write{2,2}
temp	float	$tmp4	%read{5,5} %write{4,4}
temp	float	$tmp5	%read{8,11} %write{6,6}
temp	float	$tmp6	%read{10,10} %write{9,9}
temp	float	$tmp7	%read{9,9} %write{8,8}
temp	float	$tmp8	%read{11,11} %write{10,10}
const	float	$const5	0		%read{12,143} %write{2147483647,-1}
const	vector	$const6	0.5 0 0		%read{13,13} %write{2147483647,-1}
const	vector	$const7	0.5 1 0		%read{14,14} %write{2147483647,-1}
const	vector	$const8	0 0.5 0		%read{15,15} %write{2147483647,-1}
const	vector	$const9	1 0.5 0		%read{16,16} %write{2147483647,-1}
temp	float	$tmp9	%read{21,21} %write{18,18}
temp	float	$tmp10	%read{18,18} %write{17,17}
temp	float	$tmp11	%read{21,21} %write{20,20}
temp	float	$tmp12	%read{20,20} %write{19,19}
temp	int	$tmp13	%read{24,24} %write{23,23}
temp	float	$tmp14	%read{23,23} %write{22,22}
const	int	$const10	2		%read{24,27} %write{2147483647,-1}
temp	int	$tmp15	%read{27,27} %write{26,26}
temp	float	$tmp16	%read{26,26} %write{25,25}
temp	float	$tmp17	%read{39,48} %write{28,28}
const	float	$const12	10		%read{28,132} %write{2147483647,-1}
const	string	$const13	"dist"		%read{29,133} %write{2147483647,-1}
temp	float	$tmp18	%read{32,32} %write{30,30}
temp	float	$tmp19	%read{32,32} %write{31,31}
temp	float	$tmp20	%read{35,35} %write{33,33}
temp	float	$tmp21	%read{35,35} %write{34,34}
temp	float	$tmp22	%read{38,38} %write{36,36}
temp	float	$tmp23	%read{38,38} %write{37,37}
temp	int	$tmp24	%read{40,40} %write{39,39}
temp	float	$tmp25	%read{44,44} %write{43,43}
const	float	$const14	2		%read{43,147} %write{2147483647,-1}
temp	float	$tmp26	%read{50,50} %write{45,45}
temp	float	$tmp27	%read{47,47} %write{46,46}
temp	float	$tmp28	%read{48,48} %write{47,47}
temp	float	$tmp29	%read{49,49} %write{48,48}
temp	float	$tmp30	%read{50,50} %write{49,49}
temp	float	$tmp31	%read{53,53} %write{51,51}
temp	float	$tmp32	%read{53,53} %write{52,52}
temp	float	$tmp33	%read{54,54} %write{53,53}
const	float	$const15	0.5		%read{56,124} %write{2147483647,-1}
temp	int	$tmp34	%read{57,57} %write{56,56}
temp	float	$tmp35	%read{73,82} %write{62,62}
temp	float	$tmp36	%read{66,66} %write{64,64}
temp	float	$tmp37	%read{66,66} %write{65,65}
temp	float	$tmp38	%read{69,69} %write{67,67}
temp	float	$tmp39	%read{69,69} %write{68,68}
temp	float	$tmp40	%read{72,72} %write{70,70}
temp	float	$tmp41	%read{72,72} %write{71,71}
temp	int	$tmp42	%read{74,74} %write{73,73}
temp	float	$tmp43	%read{78,78} %write{77,77}
temp	float	$tmp44	%read{84,84} %write{79,79}
temp	float	$tmp45	%read{81,81} %write{80,80}
temp	float	$tmp46	%read{82,82} %write{81,81}
temp	float	$tmp47	%read{83,83} %write{82,82}
temp	float	$tmp48	%read{84,84} %write{83,83}
temp	float	$tmp49	%read{87,87} %write{85,85}
temp	float	$tmp50	%read{87,87} %write{86,86}
temp	float	$tmp51	%read{88,88} %write{87,87}
temp	float	$tmp52	%read{101,110} %write{90,90}
temp	float	$tmp53	%read{94,94} %write{92,92}
temp	float	$tmp54	%read{94,94} %write{93,93}
temp	float	$tmp55	%read{97,97} %write{95,95}
temp	float	$tmp56	%read{97,97} %write{96,96}
temp	float	$tmp57	%read{100,100} %write{98,98}
temp	float	$tmp58	%read{100,100} %write{99,99}
temp	int	$tmp59	%read{102,102} %write{101,101}
temp	float	$tmp60	%read{106,106} %write{105,105}
temp	float	$tmp61	%read{112,112} %write{107,107}
temp	float	$tmp62	%read{109,109} %write{108,108}
temp	float	$tmp63	%read{110,110} %write{109,109}
temp	float	$tmp64	%read{111,111} %write{110,110}
temp	float	$tmp65	%read{112,112} %write{111,111}
temp	float	$tmp66	%read{115,115} %write{113,113}
temp	float	$tmp67	%read{115,115} %write{114,114}
temp	float	$tmp68	%read{116,116} %write{115,115}
temp	int	$tmp69	%read{119,119} %write{118,118}
temp	int	$tmp70	%read{125,125} %write{124,124}
temp	float	$tmp71	%read{143,152} %write{132,132}
temp	float	$tmp72	%read{136,136} %write{134,134}
temp	float	$tmp73	%read{136,136} %write{135,135}
temp	float	$tmp74	%read{139,139} %write{137,137}
temp	float	$tmp75	%read{139,139} %write{138,138}
temp	float	$tmp76	%read{142,142} %write{140,140}
temp	float	$tmp77	%read{142,142} %write{141,141}
temp	int	$tmp78	%read{144,144} %write{143,143}
temp	float	$tmp79	%read{148,148} %write{147,147}
temp	float	$tmp80	%read{154,154} %write{149,149}
temp	float	$tmp81	%read{151,151} %write{150,150}
temp	float	$tmp82	%read{152,152} %write{151,151}
temp	float	$tmp83	%read{153,153} %write{152,152}
temp	float	$tmp84	%read{154,154} %write{153,153}
temp	float	$tmp85	%read{157,157} %write{155,155}
temp	float	$tmp86	%read{157,157} %write{156,156}
temp	float	$tmp87	%read{158,158} %write{157,157}
code ___main___
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:24
#     float sy = mod(Vector[1],1);
	compref		$tmp1 Vector $const1 	%filename{"source/sambler-osl-shaders/patterns/MAscales/MAscales.osl"} %line{24} %argrw{"wrr"}
	functioncall	$const4 6 	%argrw{"r"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:136
# float  mod (float  a, float  b) { return a - b*floor(a/b); }
	div		$tmp3 $tmp1 $const3 	%filename{"/opt/gaffer-0.58.0.1-linux/shaders/stdosl.h"} %line{136} %argrw{"wrr"}
	floor		$tmp2 $tmp3 	%argrw{"wr"}
	mul		$tmp4 $const3 $tmp2 	%argrw{"wrr"}
	sub		sx $tmp1 $tmp4 	%argrw{"wrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:25
#     
	compref		$tmp5 Vector $const2 	%filename{"source/sambler-osl-shaders/patterns/MAscales/MAscales.osl"} %line{25} %argrw{"wrr"}
	functioncall	$const4 12 	%argrw{"r"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:136
# float  mod (float  a, float  b) { return a - b*floor(a/b); }
	div		$tmp7 $tmp5 $const3 	%filename{"/opt/gaffer-0.58.0.1-linux/shaders/stdosl.h"} %line{136} %argrw{"wrr"}
	floor		$tmp6 $tmp7 	%argrw{"wr"}
	mul		$tmp8 $const3 $tmp6 	%argrw{"wrr"}
	sub		sy $tmp5 $tmp8 	%argrw{"wrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:27
#     vector p0 = vector(0.5,0,0);
	vector		p sx sy $const5 	%filename{"source/sambler-osl-shaders/patterns/MAscales/MAscales.osl"} %line{27} %argrw{"wrrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:28
#     vector p1 = vector(0.5,1,0);
	assign		p0 $const6 	%line{28} %argrw{"wr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:29
#     vector p2 = vector(0,0.5,0);
	assign		p1 $const7 	%line{29} %argrw{"wr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:30
#     vector p3 = vector(1,0.5,0);
	assign		p2 $const8 	%line{30} %argrw{"wr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:31
#     
	assign		p3 $const9 	%line{31} %argrw{"wr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:33
#     int oddx = int(cell[0])%2;
	compref		$tmp10 Vector $const1 	%line{33} %argrw{"wrr"}
	floor		$tmp9 $tmp10 	%argrw{"wr"}
	compref		$tmp12 Vector $const2 	%argrw{"wrr"}
	floor		$tmp11 $tmp12 	%argrw{"wr"}
	vector		cell $tmp9 $tmp11 $const5 	%argrw{"wrrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:34
#     int oddy = int(cell[1])%2;
	compref		$tmp14 cell $const1 	%line{34} %argrw{"wrr"}
	assign		$tmp13 $tmp14 	%argrw{"wr"}
	mod		oddx $tmp13 $const10 	%argrw{"wrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:35
#     
	compref		$tmp16 cell $const2 	%line{35} %argrw{"wrr"}
	assign		$tmp15 $tmp16 	%argrw{"wr"}
	mod		oddy $tmp15 $const10 	%argrw{"wrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:52
#     if ( d1<=0.5 ){
	mul		$tmp17 Shape $const12 	%line{52} %argrw{"wrr"}
	functioncall	$const13 56 	%argrw{"r"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:38
#      float y = b[1]-a[1];
	compref		$tmp18 p0 $const1 	%line{38} %argrw{"wrr"}
	compref		$tmp19 p $const1 	%argrw{"wrr"}
	sub		___322_x $tmp18 $tmp19 	%argrw{"wrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:39
#      float r2 = x*x+y*y;
	compref		$tmp20 p0 $const2 	%line{39} %argrw{"wrr"}
	compref		$tmp21 p $const2 	%argrw{"wrr"}
	sub		___322_y $tmp20 $tmp21 	%argrw{"wrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:40
#      if ( n != 0.0 ) {
	mul		$tmp22 ___322_x ___322_x 	%line{40} %argrw{"wrr"}
	mul		$tmp23 ___322_y ___322_y 	%argrw{"wrr"}
	add		___322_r2 $tmp22 $tmp23 	%argrw{"wrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:41
#             float theta = atan2(y,x);
	neq		$tmp24 $tmp17 $const5 	%line{41} %argrw{"wrr"}
	if		$tmp24 55 55 	%argrw{"r"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:42
#          float cost, sint;
	atan2		___323_theta ___322_y ___322_x 	%line{42} %argrw{"wrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:44
#          float cost2= cos(theta*2);
	sincos		___323_theta ___323_sint ___323_cost 	%line{44} %argrw{"rww"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:45
#          float Y = pow(abs(sint),1+n*(1-cost2*cost2));
	mul		$tmp25 ___323_theta $const14 	%line{45} %argrw{"wrr"}
	cos		___323_cost2 $tmp25 	%argrw{"wr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:46
#          r2 /= cost*cost+Y*Y;
	abs		$tmp26 ___323_sint 	%line{46} %argrw{"wr"}
	mul		$tmp27 ___323_cost2 ___323_cost2 	%argrw{"wrr"}
	sub		$tmp28 $const3 $tmp27 	%argrw{"wrr"}
	mul		$tmp29 $tmp17 $tmp28 	%argrw{"wrr"}
	add		$tmp30 $const3 $tmp29 	%argrw{"wrr"}
	pow		___323_Y $tmp26 $tmp30 	%argrw{"wrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:47
#         }
	mul		$tmp31 ___323_cost ___323_cost 	%line{47} %argrw{"wrr"}
	mul		$tmp32 ___323_Y ___323_Y 	%argrw{"wrr"}
	add		$tmp33 $tmp31 $tmp32 	%argrw{"wrr"}
	div		___322_r2 ___322_r2 $tmp33 	%argrw{"wrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:49
#     }
	sqrt		d1 ___322_r2 	%line{49} %argrw{"wr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:53
#         Color = Diffuse_Color1;
	le		$tmp34 d1 $const15 	%line{53} %argrw{"wrr"}
	if		$tmp34 62 161 	%argrw{"r"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:54
#         Index = 0 ;
	assign		Color Diffuse_Color1 	%line{54} %argrw{"wr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:55
#         Distance = d1;
	assign		Index $const1 	%line{55} %argrw{"wr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:56
#         Vindex = cell + p0;
	assign		Distance d1 	%line{56} %argrw{"wr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:57
#     } else {
	add		Vindex cell p0 	%line{57} %argrw{"wrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:59
#         float d3 = dist(p,p3,Shape*10);
	mul		$tmp35 Shape $const12 	%line{59} %argrw{"wrr"}
	functioncall	$const13 90 	%argrw{"r"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:38
#      float y = b[1]-a[1];
	compref		$tmp36 p2 $const1 	%line{38} %argrw{"wrr"}
	compref		$tmp37 p $const1 	%argrw{"wrr"}
	sub		___322_x $tmp36 $tmp37 	%argrw{"wrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:39
#      float r2 = x*x+y*y;
	compref		$tmp38 p2 $const2 	%line{39} %argrw{"wrr"}
	compref		$tmp39 p $const2 	%argrw{"wrr"}
	sub		___322_y $tmp38 $tmp39 	%argrw{"wrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:40
#      if ( n != 0.0 ) {
	mul		$tmp40 ___322_x ___322_x 	%line{40} %argrw{"wrr"}
	mul		$tmp41 ___322_y ___322_y 	%argrw{"wrr"}
	add		___322_r2 $tmp40 $tmp41 	%argrw{"wrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:41
#             float theta = atan2(y,x);
	neq		$tmp42 $tmp35 $const5 	%line{41} %argrw{"wrr"}
	if		$tmp42 89 89 	%argrw{"r"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:42
#          float cost, sint;
	atan2		___323_theta ___322_y ___322_x 	%line{42} %argrw{"wrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:44
#          float cost2= cos(theta*2);
	sincos		___323_theta ___323_sint ___323_cost 	%line{44} %argrw{"rww"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:45
#          float Y = pow(abs(sint),1+n*(1-cost2*cost2));
	mul		$tmp43 ___323_theta $const14 	%line{45} %argrw{"wrr"}
	cos		___323_cost2 $tmp43 	%argrw{"wr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:46
#          r2 /= cost*cost+Y*Y;
	abs		$tmp44 ___323_sint 	%line{46} %argrw{"wr"}
	mul		$tmp45 ___323_cost2 ___323_cost2 	%argrw{"wrr"}
	sub		$tmp46 $const3 $tmp45 	%argrw{"wrr"}
	mul		$tmp47 $tmp35 $tmp46 	%argrw{"wrr"}
	add		$tmp48 $const3 $tmp47 	%argrw{"wrr"}
	pow		___323_Y $tmp44 $tmp48 	%argrw{"wrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:47
#         }
	mul		$tmp49 ___323_cost ___323_cost 	%line{47} %argrw{"wrr"}
	mul		$tmp50 ___323_Y ___323_Y 	%argrw{"wrr"}
	add		$tmp51 $tmp49 $tmp50 	%argrw{"wrr"}
	div		___322_r2 ___322_r2 $tmp51 	%argrw{"wrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:49
#     }
	sqrt		___325_d2 ___322_r2 	%line{49} %argrw{"wr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:60
#         if ( d2 <= 0.5 ) {
	mul		$tmp52 Shape $const12 	%line{60} %argrw{"wrr"}
	functioncall	$const13 118 	%argrw{"r"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:38
#      float y = b[1]-a[1];
	compref		$tmp53 p3 $const1 	%line{38} %argrw{"wrr"}
	compref		$tmp54 p $const1 	%argrw{"wrr"}
	sub		___322_x $tmp53 $tmp54 	%argrw{"wrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:39
#      float r2 = x*x+y*y;
	compref		$tmp55 p3 $const2 	%line{39} %argrw{"wrr"}
	compref		$tmp56 p $const2 	%argrw{"wrr"}
	sub		___322_y $tmp55 $tmp56 	%argrw{"wrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:40
#      if ( n != 0.0 ) {
	mul		$tmp57 ___322_x ___322_x 	%line{40} %argrw{"wrr"}
	mul		$tmp58 ___322_y ___322_y 	%argrw{"wrr"}
	add		___322_r2 $tmp57 $tmp58 	%argrw{"wrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:41
#             float theta = atan2(y,x);
	neq		$tmp59 $tmp52 $const5 	%line{41} %argrw{"wrr"}
	if		$tmp59 117 117 	%argrw{"r"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:42
#          float cost, sint;
	atan2		___323_theta ___322_y ___322_x 	%line{42} %argrw{"wrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:44
#          float cost2= cos(theta*2);
	sincos		___323_theta ___323_sint ___323_cost 	%line{44} %argrw{"rww"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:45
#          float Y = pow(abs(sint),1+n*(1-cost2*cost2));
	mul		$tmp60 ___323_theta $const14 	%line{45} %argrw{"wrr"}
	cos		___323_cost2 $tmp60 	%argrw{"wr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:46
#          r2 /= cost*cost+Y*Y;
	abs		$tmp61 ___323_sint 	%line{46} %argrw{"wr"}
	mul		$tmp62 ___323_cost2 ___323_cost2 	%argrw{"wrr"}
	sub		$tmp63 $const3 $tmp62 	%argrw{"wrr"}
	mul		$tmp64 $tmp52 $tmp63 	%argrw{"wrr"}
	add		$tmp65 $const3 $tmp64 	%argrw{"wrr"}
	pow		___323_Y $tmp61 $tmp65 	%argrw{"wrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:47
#         }
	mul		$tmp66 ___323_cost ___323_cost 	%line{47} %argrw{"wrr"}
	mul		$tmp67 ___323_Y ___323_Y 	%argrw{"wrr"}
	add		$tmp68 $tmp66 $tmp67 	%argrw{"wrr"}
	div		___322_r2 ___322_r2 $tmp68 	%argrw{"wrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:49
#     }
	sqrt		___325_d3 ___322_r2 	%line{49} %argrw{"wr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:61
#             Color = Diffuse_Color2;
	le		$tmp69 ___325_d2 $const15 	%line{61} %argrw{"wrr"}
	if		$tmp69 124 161 	%argrw{"r"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:62
#             Index = 1;
	assign		Color Diffuse_Color2 	%line{62} %argrw{"wr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:63
#             Distance = d2;
	assign		Index $const2 	%line{63} %argrw{"wr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:64
#             Vindex = cell + p2;
	assign		Distance ___325_d2 	%line{64} %argrw{"wr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:65
#         } else if ( d3 <= 0.5 ) {
	add		Vindex cell p2 	%line{65} %argrw{"wrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:66
#             Color = Diffuse_Color2;
	le		$tmp70 ___325_d3 $const15 	%line{66} %argrw{"wrr"}
	if		$tmp70 130 161 	%argrw{"r"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:67
#             Index = 1;
	assign		Color Diffuse_Color2 	%line{67} %argrw{"wr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:68
#             Distance = d3;
	assign		Index $const2 	%line{68} %argrw{"wr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:69
#             Vindex = cell + p3;
	assign		Distance ___325_d3 	%line{69} %argrw{"wr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:70
#         } else {
	add		Vindex cell p3 	%line{70} %argrw{"wrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:72
#             Index = 0;
	assign		Color Diffuse_Color1 	%line{72} %argrw{"wr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:73
#             Distance = dist(p,p1,Shape*10);
	assign		Index $const1 	%line{73} %argrw{"wr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:74
#             Vindex = cell + p1;
	mul		$tmp71 Shape $const12 	%line{74} %argrw{"wrr"}
	functioncall	$const13 160 	%argrw{"r"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:38
#      float y = b[1]-a[1];
	compref		$tmp72 p1 $const1 	%line{38} %argrw{"wrr"}
	compref		$tmp73 p $const1 	%argrw{"wrr"}
	sub		___322_x $tmp72 $tmp73 	%argrw{"wrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:39
#      float r2 = x*x+y*y;
	compref		$tmp74 p1 $const2 	%line{39} %argrw{"wrr"}
	compref		$tmp75 p $const2 	%argrw{"wrr"}
	sub		___322_y $tmp74 $tmp75 	%argrw{"wrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:40
#      if ( n != 0.0 ) {
	mul		$tmp76 ___322_x ___322_x 	%line{40} %argrw{"wrr"}
	mul		$tmp77 ___322_y ___322_y 	%argrw{"wrr"}
	add		___322_r2 $tmp76 $tmp77 	%argrw{"wrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:41
#             float theta = atan2(y,x);
	neq		$tmp78 $tmp71 $const5 	%line{41} %argrw{"wrr"}
	if		$tmp78 159 159 	%argrw{"r"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:42
#          float cost, sint;
	atan2		___323_theta ___322_y ___322_x 	%line{42} %argrw{"wrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:44
#          float cost2= cos(theta*2);
	sincos		___323_theta ___323_sint ___323_cost 	%line{44} %argrw{"rww"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:45
#          float Y = pow(abs(sint),1+n*(1-cost2*cost2));
	mul		$tmp79 ___323_theta $const14 	%line{45} %argrw{"wrr"}
	cos		___323_cost2 $tmp79 	%argrw{"wr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:46
#          r2 /= cost*cost+Y*Y;
	abs		$tmp80 ___323_sint 	%line{46} %argrw{"wr"}
	mul		$tmp81 ___323_cost2 ___323_cost2 	%argrw{"wrr"}
	sub		$tmp82 $const3 $tmp81 	%argrw{"wrr"}
	mul		$tmp83 $tmp71 $tmp82 	%argrw{"wrr"}
	add		$tmp84 $const3 $tmp83 	%argrw{"wrr"}
	pow		___323_Y $tmp80 $tmp84 	%argrw{"wrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:47
#         }
	mul		$tmp85 ___323_cost ___323_cost 	%line{47} %argrw{"wrr"}
	mul		$tmp86 ___323_Y ___323_Y 	%argrw{"wrr"}
	add		$tmp87 $tmp85 $tmp86 	%argrw{"wrr"}
	div		___322_r2 ___322_r2 $tmp87 	%argrw{"wrr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:49
#     }
	sqrt		Distance ___322_r2 	%line{49} %argrw{"wr"}
# source/sambler-osl-shaders/patterns/MAscales/MAscales.osl:75
#        }
	add		Vindex cell p1 	%line{75} %argrw{"wrr"}
	end
