OpenShadingLanguage 1.00
# Compiled by oslc 1.9.9
# options: -Ipath
shader MAEllipseMask
param	vector	Vector	0 0 0		%read{53,53} %write{0,0} %initexpr
param	vector	Center	0.5 0.5 0.5		%read{4,56} %write{2147483647,-1}
param	float	Radius	0.5		%read{67,70} %write{2147483647,-1}
param	float	Ellipse	1		%read{58,58} %write{2147483647,-1}
param	float	Rotation	0		%read{3,3} %write{2147483647,-1}
param	float	Blur	0		%read{73,73} %write{2147483647,-1}
oparam	float	Fac	0		%read{2147483647,-1} %write{74,74}
global	point	P	%read{0,0} %write{2147483647,-1}
local	vector	___254_axis	%read{10,12} %write{7,7}
local	float	___254_cosang	%read{9,50} %write{8,8}
local	float	___254_sinang	%read{20,45} %write{8,8}
local	float	___254_cosang1	%read{19,44} %write{9,9}
local	float	___254_x	%read{13,45} %write{10,10}
local	float	___254_y	%read{18,43} %write{11,11}
local	float	___254_z	%read{20,48} %write{12,12}
local	matrix	___254_M	%read{54,54} %write{52,52}
local	point	p	%read{56,56} %write{55,55}
local	vector	d	%read{57,64} %write{56,59}
local	float	r2	%read{68,71} %write{66,66}
temp	float	$tmp1	%read{8,8} %write{3,3}
const	string	$const1	"radians"		%read{1,1} %write{2147483647,-1}
const	float	$const2	3.1415927		%read{2,2} %write{2147483647,-1}
const	float	$const3	180		%read{2,2} %write{2147483647,-1}
temp	float	$tmp2	%read{3,3} %write{2,2}
const	vector	$const4	0 0 1		%read{4,4} %write{2147483647,-1}
temp	vector	$tmp4	%read{6,6} %write{4,4}
const	string	$const5	"rotate"		%read{5,5} %write{2147483647,-1}
temp	vector	$tmp5	%read{7,7} %write{6,6}
const	float	$const6	1		%read{9,74} %write{2147483647,-1}
const	int	$const7	0		%read{10,61} %write{2147483647,-1}
const	int	$const8	1		%read{11,64} %write{2147483647,-1}
const	int	$const9	2		%read{12,12} %write{2147483647,-1}
temp	float	$tmp6	%read{17,17} %write{13,13}
temp	float	$tmp7	%read{15,15} %write{14,14}
temp	float	$tmp8	%read{16,16} %write{15,15}
temp	float	$tmp9	%read{17,17} %write{16,16}
temp	float	$tmp10	%read{52,52} %write{17,17}
temp	float	$tmp11	%read{19,19} %write{18,18}
temp	float	$tmp12	%read{21,21} %write{19,19}
temp	float	$tmp13	%read{21,21} %write{20,20}
temp	float	$tmp14	%read{52,52} %write{21,21}
temp	float	$tmp15	%read{23,23} %write{22,22}
temp	float	$tmp16	%read{25,25} %write{23,23}
temp	float	$tmp17	%read{25,25} %write{24,24}
temp	float	$tmp18	%read{52,52} %write{25,25}
const	float	$const10	0		%read{52,52} %write{2147483647,-1}
temp	float	$tmp19	%read{27,27} %write{26,26}
temp	float	$tmp20	%read{29,29} %write{27,27}
temp	float	$tmp21	%read{29,29} %write{28,28}
temp	float	$tmp22	%read{52,52} %write{29,29}
temp	float	$tmp23	%read{34,34} %write{30,30}
temp	float	$tmp24	%read{32,32} %write{31,31}
temp	float	$tmp25	%read{33,33} %write{32,32}
temp	float	$tmp26	%read{34,34} %write{33,33}
temp	float	$tmp27	%read{52,52} %write{34,34}
temp	float	$tmp28	%read{36,36} %write{35,35}
temp	float	$tmp29	%read{38,38} %write{36,36}
temp	float	$tmp30	%read{38,38} %write{37,37}
temp	float	$tmp31	%read{52,52} %write{38,38}
temp	float	$tmp32	%read{40,40} %write{39,39}
temp	float	$tmp33	%read{42,42} %write{40,40}
temp	float	$tmp34	%read{42,42} %write{41,41}
temp	float	$tmp35	%read{52,52} %write{42,42}
temp	float	$tmp36	%read{44,44} %write{43,43}
temp	float	$tmp37	%read{46,46} %write{44,44}
temp	float	$tmp38	%read{46,46} %write{45,45}
temp	float	$tmp39	%read{52,52} %write{46,46}
temp	float	$tmp40	%read{51,51} %write{47,47}
temp	float	$tmp41	%read{49,49} %write{48,48}
temp	float	$tmp42	%read{50,50} %write{49,49}
temp	float	$tmp43	%read{51,51} %write{50,50}
temp	float	$tmp44	%read{52,52} %write{51,51}
temp	vector	$tmp45	%read{55,55} %write{54,54}
temp	vector	$tmp46	%read{54,54} %write{53,53}
temp	float	$tmp47	%read{58,58} %write{57,57}
temp	float	$tmp48	%read{59,59} %write{58,58}
temp	float	$tmp49	%read{62,62} %write{60,60}
temp	float	$tmp50	%read{62,62} %write{61,61}
temp	float	$tmp51	%read{66,66} %write{62,62}
temp	float	$tmp52	%read{65,65} %write{63,63}
temp	float	$tmp53	%read{65,65} %write{64,64}
temp	float	$tmp54	%read{66,66} %write{65,65}
temp	float	$tmp55	%read{68,68} %write{67,67}
temp	int	$tmp56	%read{69,69} %write{68,68}
temp	float	$tmp57	%read{73,73} %write{72,72}
temp	float	$tmp58	%read{71,71} %write{70,70}
temp	float	$tmp59	%read{72,72} %write{71,71}
temp	float	$tmp60	%read{74,74} %write{73,73}
code Vector
# source/sambler-osl-shaders/lib/MAEllipseMask.osl:15
#         vector Center = 0.5,
	assign		Vector P 	%filename{"source/sambler-osl-shaders/lib/MAEllipseMask.osl"} %line{15} %argrw{"wr"}
code ___main___
# source/sambler-osl-shaders/lib/MAEllipseMask.osl:23
#     vector d = p - Center;
	functioncall	$const1 4 	%filename{"source/sambler-osl-shaders/lib/MAEllipseMask.osl"} %line{23} %argrw{"r"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:88
# float  radians (float x)  { return x*(M_PI/180.0); }
	div		$tmp2 $const2 $const3 	%filename{"/opt/gaffer-0.58.0.1-linux/shaders/stdosl.h"} %line{88} %argrw{"wrr"}
	mul		$tmp1 Rotation $tmp2 	%argrw{"wrr"}
# source/sambler-osl-shaders/lib/MAEllipseMask.osl:23
#     vector d = p - Center;
	add		$tmp4 Center $const4 	%filename{"source/sambler-osl-shaders/lib/MAEllipseMask.osl"} %line{23} %argrw{"wrr"}
	functioncall	$const5 56 	%argrw{"r"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:274
#     vector axis = normalize (b - a);
	sub		$tmp5 $tmp4 Center 	%filename{"/opt/gaffer-0.58.0.1-linux/shaders/stdosl.h"} %line{274} %argrw{"wrr"}
	normalize	___254_axis $tmp5 	%argrw{"wr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:276
#     sincos (angle, sinang, cosang);
	sincos		$tmp1 ___254_sinang ___254_cosang 	%line{276} %argrw{"rww"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:277
#     float cosang1 = 1.0 - cosang;
	sub		___254_cosang1 $const6 ___254_cosang 	%line{277} %argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:278
#     float x = axis[0], y = axis[1], z = axis[2];
	compref		___254_x ___254_axis $const7 	%line{278} %argrw{"wrr"}
	compref		___254_y ___254_axis $const8 	%argrw{"wrr"}
	compref		___254_z ___254_axis $const9 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:279
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	mul		$tmp6 ___254_x ___254_x 	%line{279} %argrw{"wrr"}
	mul		$tmp7 ___254_x ___254_x 	%argrw{"wrr"}
	sub		$tmp8 $const6 $tmp7 	%argrw{"wrr"}
	mul		$tmp9 $tmp8 ___254_cosang 	%argrw{"wrr"}
	add		$tmp10 $tmp6 $tmp9 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:280
#                        x * y * cosang1 + z * sinang,
	mul		$tmp11 ___254_x ___254_y 	%line{280} %argrw{"wrr"}
	mul		$tmp12 $tmp11 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp13 ___254_z ___254_sinang 	%argrw{"wrr"}
	add		$tmp14 $tmp12 $tmp13 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:281
#                        x * z * cosang1 - y * sinang,
	mul		$tmp15 ___254_x ___254_z 	%line{281} %argrw{"wrr"}
	mul		$tmp16 $tmp15 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp17 ___254_y ___254_sinang 	%argrw{"wrr"}
	sub		$tmp18 $tmp16 $tmp17 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:283
#                        x * y * cosang1 - z * sinang,
	mul		$tmp19 ___254_x ___254_y 	%line{283} %argrw{"wrr"}
	mul		$tmp20 $tmp19 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp21 ___254_z ___254_sinang 	%argrw{"wrr"}
	sub		$tmp22 $tmp20 $tmp21 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:284
#                        y * y + (1.0 - y * y) * cosang,
	mul		$tmp23 ___254_y ___254_y 	%line{284} %argrw{"wrr"}
	mul		$tmp24 ___254_y ___254_y 	%argrw{"wrr"}
	sub		$tmp25 $const6 $tmp24 	%argrw{"wrr"}
	mul		$tmp26 $tmp25 ___254_cosang 	%argrw{"wrr"}
	add		$tmp27 $tmp23 $tmp26 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:285
#                        y * z * cosang1 + x * sinang,
	mul		$tmp28 ___254_y ___254_z 	%line{285} %argrw{"wrr"}
	mul		$tmp29 $tmp28 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp30 ___254_x ___254_sinang 	%argrw{"wrr"}
	add		$tmp31 $tmp29 $tmp30 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:287
#                        x * z * cosang1 + y * sinang,
	mul		$tmp32 ___254_x ___254_z 	%line{287} %argrw{"wrr"}
	mul		$tmp33 $tmp32 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp34 ___254_y ___254_sinang 	%argrw{"wrr"}
	add		$tmp35 $tmp33 $tmp34 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:288
#                        y * z * cosang1 - x * sinang,
	mul		$tmp36 ___254_y ___254_z 	%line{288} %argrw{"wrr"}
	mul		$tmp37 $tmp36 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp38 ___254_x ___254_sinang 	%argrw{"wrr"}
	sub		$tmp39 $tmp37 $tmp38 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:289
#                        z * z + (1.0 - z * z) * cosang,
	mul		$tmp40 ___254_z ___254_z 	%line{289} %argrw{"wrr"}
	mul		$tmp41 ___254_z ___254_z 	%argrw{"wrr"}
	sub		$tmp42 $const6 $tmp41 	%argrw{"wrr"}
	mul		$tmp43 $tmp42 ___254_cosang 	%argrw{"wrr"}
	add		$tmp44 $tmp40 $tmp43 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:291
#                        0.0, 0.0, 0.0, 1.0);
	matrix		___254_M $tmp10 $tmp14 $tmp18 $const10 $tmp22 $tmp27 $tmp31 $const10 $tmp35 $tmp39 $tmp44 $const10 $const10 $const10 $const10 $const6 	%line{291} %argrw{"wrrrrrrrrrrrrrrrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:292
#     return transform (M, p-a) + a;
	sub		$tmp46 Vector Center 	%line{292} %argrw{"wrr"}
	transformv	$tmp45 ___254_M $tmp46 	%argrw{"wrr"}
	add		p $tmp45 Center 	%argrw{"wrr"}
# source/sambler-osl-shaders/lib/MAEllipseMask.osl:24
#     d[0] *= Ellipse;
	sub		d p Center 	%filename{"source/sambler-osl-shaders/lib/MAEllipseMask.osl"} %line{24} %argrw{"wrr"}
# source/sambler-osl-shaders/lib/MAEllipseMask.osl:25
#     float r2 = d[0]*d[0]+d[1]*d[1];
	compref		$tmp47 d $const7 	%line{25} %argrw{"wrr"}
	mul		$tmp48 $tmp47 Ellipse 	%argrw{"wrr"}
	compassign	d $const7 $tmp48 	%argrw{"wrr"}
# source/sambler-osl-shaders/lib/MAEllipseMask.osl:26
#     if (r2 <= Radius*Radius) {
	compref		$tmp49 d $const7 	%line{26} %argrw{"wrr"}
	compref		$tmp50 d $const7 	%argrw{"wrr"}
	mul		$tmp51 $tmp49 $tmp50 	%argrw{"wrr"}
	compref		$tmp52 d $const8 	%argrw{"wrr"}
	compref		$tmp53 d $const8 	%argrw{"wrr"}
	mul		$tmp54 $tmp52 $tmp53 	%argrw{"wrr"}
	add		r2 $tmp51 $tmp54 	%argrw{"wrr"}
# source/sambler-osl-shaders/lib/MAEllipseMask.osl:27
#         Fac = 1-Blur*sqrt(r2/(Radius*Radius));
	mul		$tmp55 Radius Radius 	%line{27} %argrw{"wrr"}
	le		$tmp56 r2 $tmp55 	%argrw{"wrr"}
	if		$tmp56 75 75 	%argrw{"r"}
# source/sambler-osl-shaders/lib/MAEllipseMask.osl:28
#     }
	mul		$tmp58 Radius Radius 	%line{28} %argrw{"wrr"}
	div		$tmp59 r2 $tmp58 	%argrw{"wrr"}
	sqrt		$tmp57 $tmp59 	%argrw{"wr"}
	mul		$tmp60 Blur $tmp57 	%argrw{"wrr"}
	sub		Fac $const6 $tmp60 	%argrw{"wrr"}
	end
