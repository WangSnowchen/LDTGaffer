OpenShadingLanguage 1.00
# Compiled by oslc 1.9.9
# options: -Ipath
shader posterise
param	int	Range	8		%read{2,47} %write{2147483647,-1}
param	color	Color	1 1 1		%read{0,36} %write{2147483647,-1}
oparam	color	Output	0 0 0		%read{2147483647,-1} %write{17,53}
temp	float	$tmp1	%read{17,17} %write{9,15}
const	int	$const1	0		%read{0,49} %write{2147483647,-1}
temp	float	$tmp2	%read{5,15} %write{0,0}
const	string	$const2	"posterise"		%read{1,37} %write{2147483647,-1}
const	int	$const3	1		%read{2,47} %write{2147483647,-1}
temp	int	$tmp3	%read{3,3} %write{2,2}
temp	float	$tmp4	%read{9,9} %write{6,6}
temp	float	$tmp5	%read{6,6} %write{5,5}
temp	float	$tmp6	%read{5,5} %write{4,4}
temp	int	$tmp7	%read{8,8} %write{7,7}
temp	float	$tmp8	%read{9,9} %write{8,8}
temp	int	$tmp9	%read{12,12} %write{11,11}
temp	float	$tmp10	%read{35,35} %write{27,33}
temp	float	$tmp11	%read{23,33} %write{18,18}
temp	int	$tmp12	%read{21,21} %write{20,20}
temp	float	$tmp13	%read{27,27} %write{24,24}
temp	float	$tmp14	%read{24,24} %write{23,23}
temp	float	$tmp15	%read{23,23} %write{22,22}
temp	int	$tmp16	%read{26,26} %write{25,25}
temp	float	$tmp17	%read{27,27} %write{26,26}
temp	int	$tmp18	%read{30,30} %write{29,29}
temp	float	$tmp19	%read{53,53} %write{45,51}
const	int	$const4	2		%read{36,53} %write{2147483647,-1}
temp	float	$tmp20	%read{41,51} %write{36,36}
temp	int	$tmp21	%read{39,39} %write{38,38}
temp	float	$tmp22	%read{45,45} %write{42,42}
temp	float	$tmp23	%read{42,42} %write{41,41}
temp	float	$tmp24	%read{41,41} %write{40,40}
temp	int	$tmp25	%read{44,44} %write{43,43}
temp	float	$tmp26	%read{45,45} %write{44,44}
temp	int	$tmp27	%read{48,48} %write{47,47}
code ___main___
# source/sambler-osl-shaders/ramps/ChPosterise/ChPosterise.osl:33
#     Output[1] = posterise(Color[1]);
	compref		$tmp2 Color $const1 	%filename{"source/sambler-osl-shaders/ramps/ChPosterise/ChPosterise.osl"} %line{33} %argrw{"wrr"}
	functioncall	$const2 17 	%argrw{"r"}
# source/sambler-osl-shaders/ramps/ChPosterise/ChPosterise.osl:21
#         return floor(Value * Range) / (Range-1);
	gt		$tmp3 Range $const3 	%line{21} %argrw{"wrr"}
	if		$tmp3 11 17 	%argrw{"r"}
# source/sambler-osl-shaders/ramps/ChPosterise/ChPosterise.osl:22
#     }
	assign		$tmp6 Range 	%line{22} %argrw{"wr"}
	mul		$tmp5 $tmp2 $tmp6 	%argrw{"wrr"}
	floor		$tmp4 $tmp5 	%argrw{"wr"}
	sub		$tmp7 Range $const3 	%argrw{"wrr"}
	assign		$tmp8 $tmp7 	%argrw{"wr"}
	div		$tmp1 $tmp4 $tmp8 	%argrw{"wrr"}
	return
# source/sambler-osl-shaders/ramps/ChPosterise/ChPosterise.osl:24
#          return 0;
	eq		$tmp9 Range $const3 	%line{24} %argrw{"wrr"}
	if		$tmp9 15 17 	%argrw{"r"}
# source/sambler-osl-shaders/ramps/ChPosterise/ChPosterise.osl:25
#     }
	assign		$tmp1 $const1 	%line{25} %argrw{"wr"}
	return
# source/sambler-osl-shaders/ramps/ChPosterise/ChPosterise.osl:28
#         }
	assign		$tmp1 $tmp2 	%line{28} %argrw{"wr"}
	return
# source/sambler-osl-shaders/ramps/ChPosterise/ChPosterise.osl:33
#     Output[1] = posterise(Color[1]);
	compassign	Output $const1 $tmp1 	%line{33} %argrw{"wrr"}
# source/sambler-osl-shaders/ramps/ChPosterise/ChPosterise.osl:34
#     Output[2] = posterise(Color[2]);
	compref		$tmp11 Color $const3 	%line{34} %argrw{"wrr"}
	functioncall	$const2 35 	%argrw{"r"}
# source/sambler-osl-shaders/ramps/ChPosterise/ChPosterise.osl:21
#         return floor(Value * Range) / (Range-1);
	gt		$tmp12 Range $const3 	%line{21} %argrw{"wrr"}
	if		$tmp12 29 35 	%argrw{"r"}
# source/sambler-osl-shaders/ramps/ChPosterise/ChPosterise.osl:22
#     }
	assign		$tmp15 Range 	%line{22} %argrw{"wr"}
	mul		$tmp14 $tmp11 $tmp15 	%argrw{"wrr"}
	floor		$tmp13 $tmp14 	%argrw{"wr"}
	sub		$tmp16 Range $const3 	%argrw{"wrr"}
	assign		$tmp17 $tmp16 	%argrw{"wr"}
	div		$tmp10 $tmp13 $tmp17 	%argrw{"wrr"}
	return
# source/sambler-osl-shaders/ramps/ChPosterise/ChPosterise.osl:24
#          return 0;
	eq		$tmp18 Range $const3 	%line{24} %argrw{"wrr"}
	if		$tmp18 33 35 	%argrw{"r"}
# source/sambler-osl-shaders/ramps/ChPosterise/ChPosterise.osl:25
#     }
	assign		$tmp10 $const1 	%line{25} %argrw{"wr"}
	return
# source/sambler-osl-shaders/ramps/ChPosterise/ChPosterise.osl:28
#         }
	assign		$tmp10 $tmp11 	%line{28} %argrw{"wr"}
	return
# source/sambler-osl-shaders/ramps/ChPosterise/ChPosterise.osl:34
#     Output[2] = posterise(Color[2]);
	compassign	Output $const3 $tmp10 	%line{34} %argrw{"wrr"}
# source/sambler-osl-shaders/ramps/ChPosterise/ChPosterise.osl:35
# 
	compref		$tmp20 Color $const4 	%line{35} %argrw{"wrr"}
	functioncall	$const2 53 	%argrw{"r"}
# source/sambler-osl-shaders/ramps/ChPosterise/ChPosterise.osl:21
#         return floor(Value * Range) / (Range-1);
	gt		$tmp21 Range $const3 	%line{21} %argrw{"wrr"}
	if		$tmp21 47 53 	%argrw{"r"}
# source/sambler-osl-shaders/ramps/ChPosterise/ChPosterise.osl:22
#     }
	assign		$tmp24 Range 	%line{22} %argrw{"wr"}
	mul		$tmp23 $tmp20 $tmp24 	%argrw{"wrr"}
	floor		$tmp22 $tmp23 	%argrw{"wr"}
	sub		$tmp25 Range $const3 	%argrw{"wrr"}
	assign		$tmp26 $tmp25 	%argrw{"wr"}
	div		$tmp19 $tmp22 $tmp26 	%argrw{"wrr"}
	return
# source/sambler-osl-shaders/ramps/ChPosterise/ChPosterise.osl:24
#          return 0;
	eq		$tmp27 Range $const3 	%line{24} %argrw{"wrr"}
	if		$tmp27 51 53 	%argrw{"r"}
# source/sambler-osl-shaders/ramps/ChPosterise/ChPosterise.osl:25
#     }
	assign		$tmp19 $const1 	%line{25} %argrw{"wr"}
	return
# source/sambler-osl-shaders/ramps/ChPosterise/ChPosterise.osl:28
#         }
	assign		$tmp19 $tmp20 	%line{28} %argrw{"wr"}
	return
# source/sambler-osl-shaders/ramps/ChPosterise/ChPosterise.osl:35
# 
	compassign	Output $const4 $tmp19 	%line{35} %argrw{"wrr"}
	end
