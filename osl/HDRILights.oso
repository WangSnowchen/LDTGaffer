OpenShadingLanguage 1.00
# Compiled by oslc 1.9.9
# options: -Ipath
shader HDRILights	%meta{string,help,"<h3>HDRI Lights</h3>Allows using a set of HDR photos<br>of light sources as an environment map."} %meta{string,version,"1.0.0"} %meta{string,category,"Environment"} %meta{string,label,"HDRI Lights"} 
param	int	Layers	1		%meta{int,min,1} %meta{int,max,99} %meta{int,connectable,0} %meta{string,widget,"null"}  %read{2147483647,-1} %write{2147483647,-1}
param	string	Add	"Add Light"		%meta{string,widget,"max:actionButton"} %meta{int,connectable,0} %meta{string,packName," "} %meta{string,actionID,"UpdateGenericLayering(1)"}  %read{2147483647,-1} %write{2147483647,-1}
param	string	Delete	"Delete Light"		%meta{string,widget,"max:actionButton"} %meta{int,connectable,0} %meta{string,packName," "} %meta{string,actionID,"UpdateGenericLayering(-1)"}  %read{2147483647,-1} %write{2147483647,-1}
param	int	LightOn1	1		%meta{string,label,"LIGHT 1 ENABLE"} %meta{string,widget,"checkBox"} %meta{int,connecttable,0} %meta{string,help,"Turn the light on or off."}  %read{28,28} %write{2147483647,-1}
param	string	LightName1	"HDRILights\\reflectiveUmbrella.hdr"		%meta{string,widget,"filename"} %meta{string,label,"LIGHT FILE 1"} %meta{string,help,"The file of the image of the virtual light."}  %read{30,192} %write{2147483647,-1} %derivs
param	float	LightExp1	5		%meta{string,label,"Exposure 1"} %meta{string,packName,"Exposure / Tint 1"} %meta{string,help,"The exposure, in stops, of the light image."}  %read{186,186} %write{2147483647,-1}
param	color	LightTint1	1 1 1		%meta{string,label,"Tint 1"} %meta{string,packName,"Exposure / Tint 1"} %meta{string,help,"Allows tinting the light by a color."}  %read{187,187} %write{2147483647,-1}
param	float	LightSize1	20		%meta{string,label,"Subtend 1"} %meta{string,packName,"Size / Aspect 1"} %meta{string,help,"Adjust the apparent size of the light."}  %read{160,164} %write{2147483647,-1} %derivs
param	float	LightAspect1	1		%meta{string,label,"Aspect 1"} %meta{string,packName,"Size / Aspect 1"} %meta{string,help,"Adjust the aspect ratio. Default is the aspect of the image file."}  %read{42,42} %write{2147483647,-1} %derivs
param	float	LightRot1	0		%meta{string,label,"Rotate 1"} %meta{string,packName,"Angle / Temp (K) 1"} %meta{float,step,5} %meta{string,help,"Rotate the light image."}  %read{49,104} %write{2147483647,-1} %derivs
param	float	LightTemp1	6500		%meta{string,label,"Temp (K)1"} %meta{string,packName,"Angle / Temp (K) 1"} %meta{float,step,10} %meta{string,help,"Adjust the color temperature. 6500k is neutral (not adjusted)"}  %read{194,194} %write{2147483647,-1}
param	point	LightPos1	100 100 100		%meta{string,label,"Pos 1"} %meta{string,help,"The position of the light. Actually used as a direction. The light image is painted on to the environment in this direction."}  %read{43,43} %write{2147483647,-1} %derivs
param	string	LightHlp1	"Create point helper"		%meta{string,label,"Pos. Helper 1"} %meta{string,widget,"max:actionButton"} %meta{int,connectable,0} %meta{string,actionID,"pointHelper(1)"} %meta{string,help,"Click to create (or select, if already created) a point helper to help position the virtual light. The direction to the helper is used to position the light"} %meta{string,help,"Click to create a point helper that drives the Position. When already created, clicking again will select the point helper. This can be used together with the max 'Place Highlight' function to 'paint with light'!"}  %read{2147483647,-1} %write{2147483647,-1}
param	color	AdditionalLight	0 0 0		%meta{string,label,"Additional Light"} %meta{string,help,"Allows adding more light contribution from some other shader, for example the HDRI Environment."}  %read{19,19} %write{2147483647,-1}
param	int	VisibleToCamera	0		%meta{string,widget,"checkBox"} %meta{int,connectable,0} %meta{string,label,"Visible to Camera"} %meta{string,help,"When enabled, the lights will be visible to the camera. When disabled, the lights will only be seen in reflections and illuminate the scene."}  %read{20,20} %write{2147483647,-1}
param	int	Test	0		%meta{string,widget,"checkBox"} %meta{int,connectable,0} %meta{string,label,"Apply as 2D map for testing"} %meta{string,help,"Check this box to see the HDRI in material editor preview. It will no longer work as an actual environment light, but the result can be seen in 2D for inspection."}  %read{2,2} %write{2147483647,-1}
oparam	color	Out	0 0 0		%read{199,199} %write{19,199}
global	vector	I	%read{1,1} %write{2147483647,-1} %derivs
global	float	u	%read{3,9} %write{2147483647,-1} %derivs
global	float	v	%read{5,15} %write{2147483647,-1} %derivs
local	vector	___254_axis	%read{56,113} %write{53,108} %derivs
local	float	___254_cosang	%read{55,151} %write{54,109} %derivs
local	float	___254_sinang	%read{66,146} %write{54,109} %derivs
local	float	___254_cosang1	%read{65,145} %write{55,110} %derivs
local	float	___254_x	%read{59,146} %write{56,111} %derivs
local	float	___254_y	%read{64,144} %write{57,112} %derivs
local	float	___254_z	%read{66,149} %write{58,113} %derivs
local	matrix	___254_M	%read{100,155} %write{98,153} %derivs
local	vector	direction	%read{157,170} %write{1,18} %derivs
local	vector	vec	%read{44,170} %write{43,43} %derivs
local	vector	up	%read{154,163} %write{46,156} %derivs
local	vector	right	%read{46,157} %write{45,101} %derivs
local	float	xc	%read{174,188} %write{162,162} %derivs
local	float	yc	%read{180,190} %write{169,169} %derivs
local	int[2]	resolution	%read{35,38} %write{34,34} %derivs
local	float	aspect	%read{164,164} %write{42,42} %derivs
const	string	$const1	"world"		%read{1,1} %write{2147483647,-1}
const	string	$const2	"transform"		%read{0,0} %write{2147483647,-1}
const	string	$const3	"common"		%read{1,1} %write{2147483647,-1}
temp	float	$tmp1	%read{7,7} %write{4,4} %derivs
const	float	$const4	6.2831855		%read{3,9} %write{2147483647,-1}
temp	float	$tmp2	%read{4,4} %write{3,3} %derivs
temp	float	$tmp3	%read{7,7} %write{6,6} %derivs
const	float	$const5	3.1415927		%read{5,166} %write{2147483647,-1}
temp	float	$tmp4	%read{6,6} %write{5,5} %derivs
temp	float	$tmp5	%read{8,8} %write{7,7} %derivs
const	int	$const6	0		%read{8,182} %write{2147483647,-1}
temp	float	$tmp6	%read{13,13} %write{10,10} %derivs
temp	float	$tmp7	%read{10,10} %write{9,9} %derivs
temp	float	$tmp8	%read{13,13} %write{12,12} %derivs
temp	float	$tmp9	%read{12,12} %write{11,11} %derivs
temp	float	$tmp10	%read{14,14} %write{13,13} %derivs
const	int	$const7	1		%read{14,112} %write{2147483647,-1}
temp	float	$tmp11	%read{17,17} %write{16,16} %derivs
temp	float	$tmp12	%read{16,16} %write{15,15} %derivs
temp	float	$tmp13	%read{18,18} %write{17,17} %derivs
const	int	$const8	2		%read{18,113} %write{2147483647,-1}
temp	int	$tmp14	%read{21,21} %write{20,20}
temp	int	$tmp15	%read{22,26} %write{21,25}
temp	int	$tmp16	%read{24,24} %write{23,23}
const	string	$const9	"camera"		%read{23,23} %write{2147483647,-1}
temp	int	$tmp17	%read{25,25} %write{24,24}
temp	int	$tmp18	%read{29,33} %write{28,32}
temp	int	$tmp19	%read{31,31} %write{30,30}
temp	int	$tmp20	%read{32,32} %write{31,31}
temp	int	$tmp21	%read{2147483647,-1} %write{34,34}
const	string	$const10	"resolution"		%read{34,34} %write{2147483647,-1}
temp	float	$tmp22	%read{41,41} %write{37,37} %derivs
temp	int	$tmp23	%read{36,36} %write{35,35} %derivs
temp	float	$tmp24	%read{37,37} %write{36,36} %derivs
temp	float	$tmp25	%read{41,41} %write{40,40} %derivs
temp	int	$tmp26	%read{39,39} %write{38,38} %derivs
temp	float	$tmp27	%read{40,40} %write{39,39} %derivs
temp	float	$tmp28	%read{42,42} %write{41,41} %derivs
temp	vector	$tmp29	%read{45,45} %write{44,44} %derivs
const	vector	$const11	0 0 1		%read{44,44} %write{2147483647,-1}
temp	float	$tmp31	%read{54,54} %write{49,49} %derivs
const	string	$const12	"radians"		%read{47,165} %write{2147483647,-1}
const	float	$const13	180		%read{48,166} %write{2147483647,-1}
temp	float	$tmp32	%read{49,49} %write{48,48} %derivs
const	float	$const14	0		%read{50,185} %write{2147483647,-1}
temp	point	$tmp33	%read{52,101} %write{50,50} %derivs
const	string	$const15	"rotate"		%read{51,106} %write{2147483647,-1}
temp	vector	$tmp34	%read{53,53} %write{52,52} %derivs
const	float	$const16	1		%read{55,190} %write{2147483647,-1}
temp	float	$tmp35	%read{63,63} %write{59,59} %derivs
temp	float	$tmp36	%read{61,61} %write{60,60} %derivs
temp	float	$tmp37	%read{62,62} %write{61,61} %derivs
temp	float	$tmp38	%read{63,63} %write{62,62} %derivs
temp	float	$tmp39	%read{98,98} %write{63,63} %derivs
temp	float	$tmp40	%read{65,65} %write{64,64} %derivs
temp	float	$tmp41	%read{67,67} %write{65,65} %derivs
temp	float	$tmp42	%read{67,67} %write{66,66} %derivs
temp	float	$tmp43	%read{98,98} %write{67,67} %derivs
temp	float	$tmp44	%read{69,69} %write{68,68} %derivs
temp	float	$tmp45	%read{71,71} %write{69,69} %derivs
temp	float	$tmp46	%read{71,71} %write{70,70} %derivs
temp	float	$tmp47	%read{98,98} %write{71,71} %derivs
temp	float	$tmp48	%read{73,73} %write{72,72} %derivs
temp	float	$tmp49	%read{75,75} %write{73,73} %derivs
temp	float	$tmp50	%read{75,75} %write{74,74} %derivs
temp	float	$tmp51	%read{98,98} %write{75,75} %derivs
temp	float	$tmp52	%read{80,80} %write{76,76} %derivs
temp	float	$tmp53	%read{78,78} %write{77,77} %derivs
temp	float	$tmp54	%read{79,79} %write{78,78} %derivs
temp	float	$tmp55	%read{80,80} %write{79,79} %derivs
temp	float	$tmp56	%read{98,98} %write{80,80} %derivs
temp	float	$tmp57	%read{82,82} %write{81,81} %derivs
temp	float	$tmp58	%read{84,84} %write{82,82} %derivs
temp	float	$tmp59	%read{84,84} %write{83,83} %derivs
temp	float	$tmp60	%read{98,98} %write{84,84} %derivs
temp	float	$tmp61	%read{86,86} %write{85,85} %derivs
temp	float	$tmp62	%read{88,88} %write{86,86} %derivs
temp	float	$tmp63	%read{88,88} %write{87,87} %derivs
temp	float	$tmp64	%read{98,98} %write{88,88} %derivs
temp	float	$tmp65	%read{90,90} %write{89,89} %derivs
temp	float	$tmp66	%read{92,92} %write{90,90} %derivs
temp	float	$tmp67	%read{92,92} %write{91,91} %derivs
temp	float	$tmp68	%read{98,98} %write{92,92} %derivs
temp	float	$tmp69	%read{97,97} %write{93,93} %derivs
temp	float	$tmp70	%read{95,95} %write{94,94} %derivs
temp	float	$tmp71	%read{96,96} %write{95,95} %derivs
temp	float	$tmp72	%read{97,97} %write{96,96} %derivs
temp	float	$tmp73	%read{98,98} %write{97,97} %derivs
temp	vector	$tmp74	%read{101,101} %write{100,100} %derivs
temp	vector	$tmp75	%read{100,100} %write{99,99} %derivs
temp	float	$tmp76	%read{109,109} %write{104,104} %derivs
temp	float	$tmp77	%read{104,104} %write{103,103} %derivs
temp	point	$tmp78	%read{107,156} %write{105,105} %derivs
temp	vector	$tmp79	%read{108,108} %write{107,107} %derivs
temp	float	$tmp80	%read{118,118} %write{114,114} %derivs
temp	float	$tmp81	%read{116,116} %write{115,115} %derivs
temp	float	$tmp82	%read{117,117} %write{116,116} %derivs
temp	float	$tmp83	%read{118,118} %write{117,117} %derivs
temp	float	$tmp84	%read{153,153} %write{118,118} %derivs
temp	float	$tmp85	%read{120,120} %write{119,119} %derivs
temp	float	$tmp86	%read{122,122} %write{120,120} %derivs
temp	float	$tmp87	%read{122,122} %write{121,121} %derivs
temp	float	$tmp88	%read{153,153} %write{122,122} %derivs
temp	float	$tmp89	%read{124,124} %write{123,123} %derivs
temp	float	$tmp90	%read{126,126} %write{124,124} %derivs
temp	float	$tmp91	%read{126,126} %write{125,125} %derivs
temp	float	$tmp92	%read{153,153} %write{126,126} %derivs
temp	float	$tmp93	%read{128,128} %write{127,127} %derivs
temp	float	$tmp94	%read{130,130} %write{128,128} %derivs
temp	float	$tmp95	%read{130,130} %write{129,129} %derivs
temp	float	$tmp96	%read{153,153} %write{130,130} %derivs
temp	float	$tmp97	%read{135,135} %write{131,131} %derivs
temp	float	$tmp98	%read{133,133} %write{132,132} %derivs
temp	float	$tmp99	%read{134,134} %write{133,133} %derivs
temp	float	$tmp100	%read{135,135} %write{134,134} %derivs
temp	float	$tmp101	%read{153,153} %write{135,135} %derivs
temp	float	$tmp102	%read{137,137} %write{136,136} %derivs
temp	float	$tmp103	%read{139,139} %write{137,137} %derivs
temp	float	$tmp104	%read{139,139} %write{138,138} %derivs
temp	float	$tmp105	%read{153,153} %write{139,139} %derivs
temp	float	$tmp106	%read{141,141} %write{140,140} %derivs
temp	float	$tmp107	%read{143,143} %write{141,141} %derivs
temp	float	$tmp108	%read{143,143} %write{142,142} %derivs
temp	float	$tmp109	%read{153,153} %write{143,143} %derivs
temp	float	$tmp110	%read{145,145} %write{144,144} %derivs
temp	float	$tmp111	%read{147,147} %write{145,145} %derivs
temp	float	$tmp112	%read{147,147} %write{146,146} %derivs
temp	float	$tmp113	%read{153,153} %write{147,147} %derivs
temp	float	$tmp114	%read{152,152} %write{148,148} %derivs
temp	float	$tmp115	%read{150,150} %write{149,149} %derivs
temp	float	$tmp116	%read{151,151} %write{150,150} %derivs
temp	float	$tmp117	%read{152,152} %write{151,151} %derivs
temp	float	$tmp118	%read{153,153} %write{152,152} %derivs
temp	vector	$tmp119	%read{156,156} %write{155,155} %derivs
temp	vector	$tmp120	%read{155,155} %write{154,154} %derivs
temp	float	$tmp121	%read{162,162} %write{157,157} %derivs
temp	float	$tmp122	%read{162,162} %write{161,161} %derivs
temp	float	$tmp123	%read{161,161} %write{160,160} %derivs
temp	float	$tmp124	%read{160,160} %write{159,159} %derivs
temp	float	$tmp125	%read{169,169} %write{163,163} %derivs
temp	float	$tmp126	%read{169,169} %write{168,168} %derivs
temp	float	$tmp127	%read{168,168} %write{167,167} %derivs
temp	float	$tmp128	%read{167,167} %write{164,164} %derivs
temp	float	$tmp129	%read{167,167} %write{166,166} %derivs
temp	float	$tmp130	%read{171,171} %write{170,170}
temp	int	$tmp131	%read{172,172} %write{171,171}
temp	int	$tmp132	%read{173,178} %write{172,177}
temp	float	$tmp133	%read{175,175} %write{174,174}
temp	int	$tmp134	%read{176,176} %write{175,175}
temp	int	$tmp135	%read{177,177} %write{176,176}
temp	int	$tmp136	%read{179,184} %write{178,183}
temp	float	$tmp137	%read{181,181} %write{180,180}
temp	int	$tmp138	%read{182,182} %write{181,181}
temp	int	$tmp139	%read{183,183} %write{182,182}
temp	color	$tmp140	%read{199,199} %write{198,198}
temp	color	$tmp141	%read{198,198} %write{185,185}
temp	float	$tmp142	%read{187,187} %write{186,186}
const	float	$const17	2		%read{186,191} %write{2147483647,-1}
temp	color	$tmp143	%read{193,193} %write{187,187}
temp	float	$tmp144	%read{193,193} %write{192,192}
temp	float	$tmp145	%read{189,189} %write{188,188} %derivs
temp	float	$tmp146	%read{192,192} %write{189,189} %derivs
temp	float	$tmp147	%read{191,191} %write{190,190} %derivs
temp	float	$tmp148	%read{192,192} %write{191,191} %derivs
temp	color	$tmp149	%read{197,197} %write{193,193}
temp	vector	$tmp150	%read{197,197} %write{196,196}
temp	vector	$tmp151	%read{196,196} %write{195,195}
temp	color	$tmp152	%read{195,195} %write{194,194}
temp	color	$tmp153	%read{198,198} %write{197,197}
code ___main___
# source/3dsMax-OSL-Shaders/HDRILights.osl:81
# 	vector vec, up, right;
	functioncall	$const2 2 	%filename{"source/3dsMax-OSL-Shaders/HDRILights.osl"} %line{81} %argrw{"r"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:266
# vector transform (string to, vector p) { return transform("common",to,p); }
	transformv	direction $const3 $const1 I 	%filename{"/opt/gaffer-0.58.0.1-linux/shaders/stdosl.h"} %line{266} %argrw{"wrrr"}
# source/3dsMax-OSL-Shaders/HDRILights.osl:88
# 	{
	if		Test 19 19 	%filename{"source/3dsMax-OSL-Shaders/HDRILights.osl"} %line{88} %argrw{"r"}
# source/3dsMax-OSL-Shaders/HDRILights.osl:90
# 		direction[1] =  cos(u * M_2PI) * sin(v * M_PI);
	mul		$tmp2 u $const4 	%line{90} %argrw{"wrr"}
	sin		$tmp1 $tmp2 	%argrw{"wr"}
	mul		$tmp4 v $const5 	%argrw{"wrr"}
	sin		$tmp3 $tmp4 	%argrw{"wr"}
	mul		$tmp5 $tmp1 $tmp3 	%argrw{"wrr"}
	compassign	direction $const6 $tmp5 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/HDRILights.osl:91
# 		direction[2] = -cos(v * M_PI);
	mul		$tmp7 u $const4 	%line{91} %argrw{"wrr"}
	cos		$tmp6 $tmp7 	%argrw{"wr"}
	mul		$tmp9 v $const5 	%argrw{"wrr"}
	sin		$tmp8 $tmp9 	%argrw{"wr"}
	mul		$tmp10 $tmp6 $tmp8 	%argrw{"wrr"}
	compassign	direction $const7 $tmp10 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/HDRILights.osl:92
# 	}
	mul		$tmp12 v $const5 	%line{92} %argrw{"wrr"}
	cos		$tmp11 $tmp12 	%argrw{"wr"}
	neg		$tmp13 $tmp11 	%argrw{"wr"}
	compassign	direction $const8 $tmp13 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/HDRILights.osl:95
# 	
	assign		Out AdditionalLight 	%line{95} %argrw{"wr"}
# source/3dsMax-OSL-Shaders/HDRILights.osl:98
# 		return;
	eq		$tmp14 VisibleToCamera $const6 	%line{98} %argrw{"wrr"}
	neq		$tmp15 $tmp14 $const6 	%argrw{"wrr"}
	if		$tmp15 26 26 	%argrw{"r"}
	raytype		$tmp16 $const9 	%argrw{"wr"}
	neq		$tmp17 $tmp16 $const6 	%argrw{"wrr"}
	assign		$tmp15 $tmp17 	%argrw{"wr"}
	if		$tmp15 28 28 	%argrw{"r"}
# source/3dsMax-OSL-Shaders/HDRILights.osl:99
# 
	exit	%line{99}
# source/3dsMax-OSL-Shaders/HDRILights.osl:119
# 	//====LAYER-END====
	neq		$tmp18 LightOn1 $const6 	%line{119} %argrw{"wrr"}
	if		$tmp18 33 33 	%argrw{"r"}
	strlen		$tmp19 LightName1 	%argrw{"wr"}
	neq		$tmp20 $tmp19 $const6 	%argrw{"wrr"}
	assign		$tmp18 $tmp20 	%argrw{"wr"}
	if		$tmp18 200 200 	%argrw{"r"}
	gettextureinfo	$tmp21 LightName1 $const10 resolution 	%argrw{"wrrw"}
	aref		$tmp23 resolution $const7 	%argrw{"wrr"}
	assign		$tmp24 $tmp23 	%argrw{"wr"}
	assign		$tmp22 $tmp24 	%argrw{"wr"}
	aref		$tmp26 resolution $const6 	%argrw{"wrr"}
	assign		$tmp27 $tmp26 	%argrw{"wr"}
	assign		$tmp25 $tmp27 	%argrw{"wr"}
	div		$tmp28 $tmp22 $tmp25 	%argrw{"wrr"}
	mul		aspect $tmp28 LightAspect1 	%argrw{"wrr"}
	normalize	vec LightPos1 	%argrw{"wr"}
	cross		$tmp29 vec $const11 	%argrw{"wrr"}
	normalize	right $tmp29 	%argrw{"wr"}
	cross		up vec right 	%argrw{"wrr"}
	functioncall	$const12 50 	%argrw{"r"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:88
# float  radians (float x)  { return x*(M_PI/180.0); }
	div		$tmp32 $const5 $const13 	%filename{"/opt/gaffer-0.58.0.1-linux/shaders/stdosl.h"} %line{88} %argrw{"wrr"}
	mul		$tmp31 LightRot1 $tmp32 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/HDRILights.osl:119
# 	//====LAYER-END====
	assign		$tmp33 $const14 	%filename{"source/3dsMax-OSL-Shaders/HDRILights.osl"} %line{119} %argrw{"wr"}
	functioncall	$const15 102 	%argrw{"r"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:274
#     vector axis = normalize (b - a);
	sub		$tmp34 vec $tmp33 	%filename{"/opt/gaffer-0.58.0.1-linux/shaders/stdosl.h"} %line{274} %argrw{"wrr"}
	normalize	___254_axis $tmp34 	%argrw{"wr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:276
#     sincos (angle, sinang, cosang);
	sincos		$tmp31 ___254_sinang ___254_cosang 	%line{276} %argrw{"rww"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:277
#     float cosang1 = 1.0 - cosang;
	sub		___254_cosang1 $const16 ___254_cosang 	%line{277} %argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:278
#     float x = axis[0], y = axis[1], z = axis[2];
	compref		___254_x ___254_axis $const6 	%line{278} %argrw{"wrr"}
	compref		___254_y ___254_axis $const7 	%argrw{"wrr"}
	compref		___254_z ___254_axis $const8 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:279
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	mul		$tmp35 ___254_x ___254_x 	%line{279} %argrw{"wrr"}
	mul		$tmp36 ___254_x ___254_x 	%argrw{"wrr"}
	sub		$tmp37 $const16 $tmp36 	%argrw{"wrr"}
	mul		$tmp38 $tmp37 ___254_cosang 	%argrw{"wrr"}
	add		$tmp39 $tmp35 $tmp38 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:280
#                        x * y * cosang1 + z * sinang,
	mul		$tmp40 ___254_x ___254_y 	%line{280} %argrw{"wrr"}
	mul		$tmp41 $tmp40 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp42 ___254_z ___254_sinang 	%argrw{"wrr"}
	add		$tmp43 $tmp41 $tmp42 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:281
#                        x * z * cosang1 - y * sinang,
	mul		$tmp44 ___254_x ___254_z 	%line{281} %argrw{"wrr"}
	mul		$tmp45 $tmp44 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp46 ___254_y ___254_sinang 	%argrw{"wrr"}
	sub		$tmp47 $tmp45 $tmp46 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:283
#                        x * y * cosang1 - z * sinang,
	mul		$tmp48 ___254_x ___254_y 	%line{283} %argrw{"wrr"}
	mul		$tmp49 $tmp48 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp50 ___254_z ___254_sinang 	%argrw{"wrr"}
	sub		$tmp51 $tmp49 $tmp50 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:284
#                        y * y + (1.0 - y * y) * cosang,
	mul		$tmp52 ___254_y ___254_y 	%line{284} %argrw{"wrr"}
	mul		$tmp53 ___254_y ___254_y 	%argrw{"wrr"}
	sub		$tmp54 $const16 $tmp53 	%argrw{"wrr"}
	mul		$tmp55 $tmp54 ___254_cosang 	%argrw{"wrr"}
	add		$tmp56 $tmp52 $tmp55 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:285
#                        y * z * cosang1 + x * sinang,
	mul		$tmp57 ___254_y ___254_z 	%line{285} %argrw{"wrr"}
	mul		$tmp58 $tmp57 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp59 ___254_x ___254_sinang 	%argrw{"wrr"}
	add		$tmp60 $tmp58 $tmp59 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:287
#                        x * z * cosang1 + y * sinang,
	mul		$tmp61 ___254_x ___254_z 	%line{287} %argrw{"wrr"}
	mul		$tmp62 $tmp61 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp63 ___254_y ___254_sinang 	%argrw{"wrr"}
	add		$tmp64 $tmp62 $tmp63 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:288
#                        y * z * cosang1 - x * sinang,
	mul		$tmp65 ___254_y ___254_z 	%line{288} %argrw{"wrr"}
	mul		$tmp66 $tmp65 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp67 ___254_x ___254_sinang 	%argrw{"wrr"}
	sub		$tmp68 $tmp66 $tmp67 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:289
#                        z * z + (1.0 - z * z) * cosang,
	mul		$tmp69 ___254_z ___254_z 	%line{289} %argrw{"wrr"}
	mul		$tmp70 ___254_z ___254_z 	%argrw{"wrr"}
	sub		$tmp71 $const16 $tmp70 	%argrw{"wrr"}
	mul		$tmp72 $tmp71 ___254_cosang 	%argrw{"wrr"}
	add		$tmp73 $tmp69 $tmp72 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:291
#                        0.0, 0.0, 0.0, 1.0);
	matrix		___254_M $tmp39 $tmp43 $tmp47 $const14 $tmp51 $tmp56 $tmp60 $const14 $tmp64 $tmp68 $tmp73 $const14 $const14 $const14 $const14 $const16 	%line{291} %argrw{"wrrrrrrrrrrrrrrrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:292
#     return transform (M, p-a) + a;
	sub		$tmp75 right $tmp33 	%line{292} %argrw{"wrr"}
	transformv	$tmp74 ___254_M $tmp75 	%argrw{"wrr"}
	add		right $tmp74 $tmp33 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/HDRILights.osl:119
# 	//====LAYER-END====
	functioncall	$const12 105 	%filename{"source/3dsMax-OSL-Shaders/HDRILights.osl"} %line{119} %argrw{"r"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:88
# float  radians (float x)  { return x*(M_PI/180.0); }
	div		$tmp77 $const5 $const13 	%filename{"/opt/gaffer-0.58.0.1-linux/shaders/stdosl.h"} %line{88} %argrw{"wrr"}
	mul		$tmp76 LightRot1 $tmp77 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/HDRILights.osl:119
# 	//====LAYER-END====
	assign		$tmp78 $const14 	%filename{"source/3dsMax-OSL-Shaders/HDRILights.osl"} %line{119} %argrw{"wr"}
	functioncall	$const15 157 	%argrw{"r"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:274
#     vector axis = normalize (b - a);
	sub		$tmp79 vec $tmp78 	%filename{"/opt/gaffer-0.58.0.1-linux/shaders/stdosl.h"} %line{274} %argrw{"wrr"}
	normalize	___254_axis $tmp79 	%argrw{"wr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:276
#     sincos (angle, sinang, cosang);
	sincos		$tmp76 ___254_sinang ___254_cosang 	%line{276} %argrw{"rww"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:277
#     float cosang1 = 1.0 - cosang;
	sub		___254_cosang1 $const16 ___254_cosang 	%line{277} %argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:278
#     float x = axis[0], y = axis[1], z = axis[2];
	compref		___254_x ___254_axis $const6 	%line{278} %argrw{"wrr"}
	compref		___254_y ___254_axis $const7 	%argrw{"wrr"}
	compref		___254_z ___254_axis $const8 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:279
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	mul		$tmp80 ___254_x ___254_x 	%line{279} %argrw{"wrr"}
	mul		$tmp81 ___254_x ___254_x 	%argrw{"wrr"}
	sub		$tmp82 $const16 $tmp81 	%argrw{"wrr"}
	mul		$tmp83 $tmp82 ___254_cosang 	%argrw{"wrr"}
	add		$tmp84 $tmp80 $tmp83 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:280
#                        x * y * cosang1 + z * sinang,
	mul		$tmp85 ___254_x ___254_y 	%line{280} %argrw{"wrr"}
	mul		$tmp86 $tmp85 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp87 ___254_z ___254_sinang 	%argrw{"wrr"}
	add		$tmp88 $tmp86 $tmp87 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:281
#                        x * z * cosang1 - y * sinang,
	mul		$tmp89 ___254_x ___254_z 	%line{281} %argrw{"wrr"}
	mul		$tmp90 $tmp89 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp91 ___254_y ___254_sinang 	%argrw{"wrr"}
	sub		$tmp92 $tmp90 $tmp91 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:283
#                        x * y * cosang1 - z * sinang,
	mul		$tmp93 ___254_x ___254_y 	%line{283} %argrw{"wrr"}
	mul		$tmp94 $tmp93 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp95 ___254_z ___254_sinang 	%argrw{"wrr"}
	sub		$tmp96 $tmp94 $tmp95 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:284
#                        y * y + (1.0 - y * y) * cosang,
	mul		$tmp97 ___254_y ___254_y 	%line{284} %argrw{"wrr"}
	mul		$tmp98 ___254_y ___254_y 	%argrw{"wrr"}
	sub		$tmp99 $const16 $tmp98 	%argrw{"wrr"}
	mul		$tmp100 $tmp99 ___254_cosang 	%argrw{"wrr"}
	add		$tmp101 $tmp97 $tmp100 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:285
#                        y * z * cosang1 + x * sinang,
	mul		$tmp102 ___254_y ___254_z 	%line{285} %argrw{"wrr"}
	mul		$tmp103 $tmp102 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp104 ___254_x ___254_sinang 	%argrw{"wrr"}
	add		$tmp105 $tmp103 $tmp104 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:287
#                        x * z * cosang1 + y * sinang,
	mul		$tmp106 ___254_x ___254_z 	%line{287} %argrw{"wrr"}
	mul		$tmp107 $tmp106 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp108 ___254_y ___254_sinang 	%argrw{"wrr"}
	add		$tmp109 $tmp107 $tmp108 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:288
#                        y * z * cosang1 - x * sinang,
	mul		$tmp110 ___254_y ___254_z 	%line{288} %argrw{"wrr"}
	mul		$tmp111 $tmp110 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp112 ___254_x ___254_sinang 	%argrw{"wrr"}
	sub		$tmp113 $tmp111 $tmp112 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:289
#                        z * z + (1.0 - z * z) * cosang,
	mul		$tmp114 ___254_z ___254_z 	%line{289} %argrw{"wrr"}
	mul		$tmp115 ___254_z ___254_z 	%argrw{"wrr"}
	sub		$tmp116 $const16 $tmp115 	%argrw{"wrr"}
	mul		$tmp117 $tmp116 ___254_cosang 	%argrw{"wrr"}
	add		$tmp118 $tmp114 $tmp117 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:291
#                        0.0, 0.0, 0.0, 1.0);
	matrix		___254_M $tmp84 $tmp88 $tmp92 $const14 $tmp96 $tmp101 $tmp105 $const14 $tmp109 $tmp113 $tmp118 $const14 $const14 $const14 $const14 $const16 	%line{291} %argrw{"wrrrrrrrrrrrrrrrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:292
#     return transform (M, p-a) + a;
	sub		$tmp120 up $tmp78 	%line{292} %argrw{"wrr"}
	transformv	$tmp119 ___254_M $tmp120 	%argrw{"wrr"}
	add		up $tmp119 $tmp78 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/HDRILights.osl:119
# 	//====LAYER-END====
	dot		$tmp121 direction right 	%filename{"source/3dsMax-OSL-Shaders/HDRILights.osl"} %line{119} %argrw{"wrr"}
	functioncall	$const12 161 	%argrw{"r"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:88
# float  radians (float x)  { return x*(M_PI/180.0); }
	div		$tmp124 $const5 $const13 	%filename{"/opt/gaffer-0.58.0.1-linux/shaders/stdosl.h"} %line{88} %argrw{"wrr"}
	mul		$tmp123 LightSize1 $tmp124 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/HDRILights.osl:119
# 	//====LAYER-END====
	sin		$tmp122 $tmp123 	%filename{"source/3dsMax-OSL-Shaders/HDRILights.osl"} %line{119} %argrw{"wr"}
	div		xc $tmp121 $tmp122 	%argrw{"wrr"}
	dot		$tmp125 direction up 	%argrw{"wrr"}
	mul		$tmp128 LightSize1 aspect 	%argrw{"wrr"}
	functioncall	$const12 168 	%argrw{"r"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:88
# float  radians (float x)  { return x*(M_PI/180.0); }
	div		$tmp129 $const5 $const13 	%filename{"/opt/gaffer-0.58.0.1-linux/shaders/stdosl.h"} %line{88} %argrw{"wrr"}
	mul		$tmp127 $tmp128 $tmp129 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/HDRILights.osl:119
# 	//====LAYER-END====
	sin		$tmp126 $tmp127 	%filename{"source/3dsMax-OSL-Shaders/HDRILights.osl"} %line{119} %argrw{"wr"}
	div		yc $tmp125 $tmp126 	%argrw{"wrr"}
	dot		$tmp130 direction vec 	%argrw{"wrr"}
	gt		$tmp131 $tmp130 $const14 	%argrw{"wrr"}
	neq		$tmp132 $tmp131 $const6 	%argrw{"wrr"}
	if		$tmp132 178 178 	%argrw{"r"}
	abs		$tmp133 xc 	%argrw{"wr"}
	lt		$tmp134 $tmp133 $const16 	%argrw{"wrr"}
	neq		$tmp135 $tmp134 $const6 	%argrw{"wrr"}
	assign		$tmp132 $tmp135 	%argrw{"wr"}
	neq		$tmp136 $tmp132 $const6 	%argrw{"wrr"}
	if		$tmp136 184 184 	%argrw{"r"}
	abs		$tmp137 yc 	%argrw{"wr"}
	lt		$tmp138 $tmp137 $const16 	%argrw{"wrr"}
	neq		$tmp139 $tmp138 $const6 	%argrw{"wrr"}
	assign		$tmp136 $tmp139 	%argrw{"wr"}
	if		$tmp136 200 200 	%argrw{"r"}
	assign		$tmp141 $const14 	%argrw{"wr"}
	pow		$tmp142 $const17 LightExp1 	%argrw{"wrr"}
	mul		$tmp143 $tmp142 LightTint1 	%argrw{"wrr"}
	add		$tmp145 xc $const16 	%argrw{"wrr"}
	div		$tmp146 $tmp145 $const17 	%argrw{"wrr"}
	add		$tmp147 yc $const16 	%argrw{"wrr"}
	div		$tmp148 $tmp147 $const17 	%argrw{"wrr"}
	texture		$tmp144 LightName1 $tmp146 $tmp148 	%argrw{"wrrr"} %argderivs{2,3}
	mul		$tmp149 $tmp143 $tmp144 	%argrw{"wrr"}
	blackbody	$tmp152 LightTemp1 	%argrw{"wr"}
	assign		$tmp151 $tmp152 	%argrw{"wr"}
	normalize	$tmp150 $tmp151 	%argrw{"wr"}
	mul		$tmp153 $tmp149 $tmp150 	%argrw{"wrr"}
	max		$tmp140 $tmp141 $tmp153 	%argrw{"wrr"}
	add		Out Out $tmp140 	%argrw{"wrr"}
	end
