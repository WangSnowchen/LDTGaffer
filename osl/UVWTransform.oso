OpenShadingLanguage 1.00
# Compiled by oslc 1.9.9
# options: -Ipath
shader UVWTransform	%meta{string,help,"UVW Transformation shader. Can scale,<br>tile and rotate UVW coordinates."} %meta{string,label,"UVW Transform"} %meta{string,category,"UVW Coordinates"} %meta{string,version,"2.0"} 
param	point	Input	0 0 0		%meta{string,label,"Input (UVW)"} %meta{string,help,"Connect your UVW generator here, for example <b>UVW Channel</b> or <b>UVW Object Space</b>.<br/>If not connected, the default UV channel (Map Channel 1) is used"}  %read{4,4} %write{0,0} %initexpr
param	float	Scale	1		%meta{string,help,"The overall Scale. Larger number = bigger."}  %read{62,62} %write{2147483647,-1}
param	vector	Tiling	1 1 1		%meta{string,help,"A per-axis dividing scale, to subdivide the values. Larger number = smaller."}  %read{60,60} %write{2147483647,-1}
param	vector	Offset	0 0 0		%meta{string,help,"Moves the UVW coordinates around"}  %read{4,4} %write{2147483647,-1}
param	int	Wrap	0		%meta{string,widget,"checkBox"} %meta{int,connectable,0} %meta{string,help,"Wrap the resulting coordinates in a 0-1 range"}  %read{63,63} %write{2147483647,-1}
param	int	RealWorld	0		%meta{string,widget,"checkBox"} %meta{int,connectable,0} %meta{string,help,"Enable Real-World Scaling"}  %read{2,2} %write{2147483647,-1}
param	float	RealWidth	0.2		%meta{int,worldunits,1} %meta{string,help,"Real Width of one unit of texture space"}  %read{3,3} %write{2147483647,-1}
param	float	RealHeight	0.2		%meta{int,worldunits,1} %meta{string,help,"Real Height of one unit of texture space"}  %read{3,3} %write{2147483647,-1}
param	float	Rotate	0		%meta{string,help,"A rotation angle in <i>degrees</i>."}  %read{7,7} %write{2147483647,-1}
param	point	RotCenter	0.5 0.5 0		%meta{string,label,"Rotation Center"} %meta{string,help,"The center of rotation in UVW space"}  %read{8,59} %write{2147483647,-1}
param	vector	RotAxis	0 0 1		%meta{string,label,"Rotation Axis"} %meta{string,help,"An axis around which the rotation occurs."}  %read{8,8} %write{2147483647,-1}
oparam	point	UVW	0 0 0		%read{64,65} %write{62,65}
global	float	u	%read{0,0} %write{2147483647,-1}
global	float	v	%read{0,0} %write{2147483647,-1}
local	vector	___254_axis	%read{14,16} %write{11,11}
local	float	___254_cosang	%read{13,54} %write{12,12}
local	float	___254_sinang	%read{24,49} %write{12,12}
local	float	___254_cosang1	%read{23,48} %write{13,13}
local	float	___254_x	%read{17,49} %write{14,14}
local	float	___254_y	%read{22,47} %write{15,15}
local	float	___254_z	%read{24,52} %write{16,16}
local	matrix	___254_M	%read{58,58} %write{56,56}
local	vector	worldScale	%read{61,61} %write{1,3}
const	int	$const1	0		%read{14,14} %write{2147483647,-1}
const	float	$const2	0		%read{0,56} %write{2147483647,-1}
const	float	$const3	1		%read{1,56} %write{2147483647,-1}
temp	point	$tmp1	%read{60,60} %write{59,59}
temp	point	$tmp2	%read{57,57} %write{4,4}
temp	float	$tmp3	%read{12,12} %write{7,7}
const	string	$const4	"radians"		%read{5,5} %write{2147483647,-1}
const	float	$const5	3.1415927		%read{6,6} %write{2147483647,-1}
const	float	$const6	180		%read{6,6} %write{2147483647,-1}
temp	float	$tmp4	%read{7,7} %write{6,6}
temp	point	$tmp5	%read{10,10} %write{8,8}
const	string	$const7	"rotate"		%read{9,9} %write{2147483647,-1}
temp	vector	$tmp6	%read{11,11} %write{10,10}
const	int	$const8	1		%read{15,15} %write{2147483647,-1}
const	int	$const9	2		%read{16,16} %write{2147483647,-1}
temp	float	$tmp7	%read{21,21} %write{17,17}
temp	float	$tmp8	%read{19,19} %write{18,18}
temp	float	$tmp9	%read{20,20} %write{19,19}
temp	float	$tmp10	%read{21,21} %write{20,20}
temp	float	$tmp11	%read{56,56} %write{21,21}
temp	float	$tmp12	%read{23,23} %write{22,22}
temp	float	$tmp13	%read{25,25} %write{23,23}
temp	float	$tmp14	%read{25,25} %write{24,24}
temp	float	$tmp15	%read{56,56} %write{25,25}
temp	float	$tmp16	%read{27,27} %write{26,26}
temp	float	$tmp17	%read{29,29} %write{27,27}
temp	float	$tmp18	%read{29,29} %write{28,28}
temp	float	$tmp19	%read{56,56} %write{29,29}
temp	float	$tmp20	%read{31,31} %write{30,30}
temp	float	$tmp21	%read{33,33} %write{31,31}
temp	float	$tmp22	%read{33,33} %write{32,32}
temp	float	$tmp23	%read{56,56} %write{33,33}
temp	float	$tmp24	%read{38,38} %write{34,34}
temp	float	$tmp25	%read{36,36} %write{35,35}
temp	float	$tmp26	%read{37,37} %write{36,36}
temp	float	$tmp27	%read{38,38} %write{37,37}
temp	float	$tmp28	%read{56,56} %write{38,38}
temp	float	$tmp29	%read{40,40} %write{39,39}
temp	float	$tmp30	%read{42,42} %write{40,40}
temp	float	$tmp31	%read{42,42} %write{41,41}
temp	float	$tmp32	%read{56,56} %write{42,42}
temp	float	$tmp33	%read{44,44} %write{43,43}
temp	float	$tmp34	%read{46,46} %write{44,44}
temp	float	$tmp35	%read{46,46} %write{45,45}
temp	float	$tmp36	%read{56,56} %write{46,46}
temp	float	$tmp37	%read{48,48} %write{47,47}
temp	float	$tmp38	%read{50,50} %write{48,48}
temp	float	$tmp39	%read{50,50} %write{49,49}
temp	float	$tmp40	%read{56,56} %write{50,50}
temp	float	$tmp41	%read{55,55} %write{51,51}
temp	float	$tmp42	%read{53,53} %write{52,52}
temp	float	$tmp43	%read{54,54} %write{53,53}
temp	float	$tmp44	%read{55,55} %write{54,54}
temp	float	$tmp45	%read{56,56} %write{55,55}
temp	vector	$tmp46	%read{59,59} %write{58,58}
temp	vector	$tmp47	%read{58,58} %write{57,57}
temp	point	$tmp48	%read{61,61} %write{60,60}
temp	point	$tmp49	%read{62,62} %write{61,61}
temp	point	$tmp50	%read{65,65} %write{64,64}
code Input
# source/3dsMax-OSL-Shaders/UVWTransform.osl:16
# 		[[ string label = "Input (UVW)", 
	point		Input u v $const2 	%filename{"source/3dsMax-OSL-Shaders/UVWTransform.osl"} %line{16} %argrw{"wrrr"}
code ___main___
# source/3dsMax-OSL-Shaders/UVWTransform.osl:55
# 	
	assign		worldScale $const3 	%filename{"source/3dsMax-OSL-Shaders/UVWTransform.osl"} %line{55} %argrw{"wr"}
# source/3dsMax-OSL-Shaders/UVWTransform.osl:57
# 		worldScale = vector(RealWidth, RealHeight, 1.0);
	if		RealWorld 4 4 	%line{57} %argrw{"r"}
# source/3dsMax-OSL-Shaders/UVWTransform.osl:58
# 	
	vector		worldScale RealWidth RealHeight $const3 	%line{58} %argrw{"wrrr"}
# source/3dsMax-OSL-Shaders/UVWTransform.osl:60
# 	
	sub		$tmp2 Input Offset 	%line{60} %argrw{"wrr"}
	functioncall	$const4 8 	%argrw{"r"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:88
# float  radians (float x)  { return x*(M_PI/180.0); }
	div		$tmp4 $const5 $const6 	%filename{"/opt/gaffer-0.58.0.1-linux/shaders/stdosl.h"} %line{88} %argrw{"wrr"}
	mul		$tmp3 Rotate $tmp4 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UVWTransform.osl:60
# 	
	add		$tmp5 RotCenter RotAxis 	%filename{"source/3dsMax-OSL-Shaders/UVWTransform.osl"} %line{60} %argrw{"wrr"}
	functioncall	$const7 60 	%argrw{"r"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:274
#     vector axis = normalize (b - a);
	sub		$tmp6 $tmp5 RotCenter 	%filename{"/opt/gaffer-0.58.0.1-linux/shaders/stdosl.h"} %line{274} %argrw{"wrr"}
	normalize	___254_axis $tmp6 	%argrw{"wr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:276
#     sincos (angle, sinang, cosang);
	sincos		$tmp3 ___254_sinang ___254_cosang 	%line{276} %argrw{"rww"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:277
#     float cosang1 = 1.0 - cosang;
	sub		___254_cosang1 $const3 ___254_cosang 	%line{277} %argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:278
#     float x = axis[0], y = axis[1], z = axis[2];
	compref		___254_x ___254_axis $const1 	%line{278} %argrw{"wrr"}
	compref		___254_y ___254_axis $const8 	%argrw{"wrr"}
	compref		___254_z ___254_axis $const9 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:279
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	mul		$tmp7 ___254_x ___254_x 	%line{279} %argrw{"wrr"}
	mul		$tmp8 ___254_x ___254_x 	%argrw{"wrr"}
	sub		$tmp9 $const3 $tmp8 	%argrw{"wrr"}
	mul		$tmp10 $tmp9 ___254_cosang 	%argrw{"wrr"}
	add		$tmp11 $tmp7 $tmp10 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:280
#                        x * y * cosang1 + z * sinang,
	mul		$tmp12 ___254_x ___254_y 	%line{280} %argrw{"wrr"}
	mul		$tmp13 $tmp12 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp14 ___254_z ___254_sinang 	%argrw{"wrr"}
	add		$tmp15 $tmp13 $tmp14 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:281
#                        x * z * cosang1 - y * sinang,
	mul		$tmp16 ___254_x ___254_z 	%line{281} %argrw{"wrr"}
	mul		$tmp17 $tmp16 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp18 ___254_y ___254_sinang 	%argrw{"wrr"}
	sub		$tmp19 $tmp17 $tmp18 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:283
#                        x * y * cosang1 - z * sinang,
	mul		$tmp20 ___254_x ___254_y 	%line{283} %argrw{"wrr"}
	mul		$tmp21 $tmp20 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp22 ___254_z ___254_sinang 	%argrw{"wrr"}
	sub		$tmp23 $tmp21 $tmp22 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:284
#                        y * y + (1.0 - y * y) * cosang,
	mul		$tmp24 ___254_y ___254_y 	%line{284} %argrw{"wrr"}
	mul		$tmp25 ___254_y ___254_y 	%argrw{"wrr"}
	sub		$tmp26 $const3 $tmp25 	%argrw{"wrr"}
	mul		$tmp27 $tmp26 ___254_cosang 	%argrw{"wrr"}
	add		$tmp28 $tmp24 $tmp27 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:285
#                        y * z * cosang1 + x * sinang,
	mul		$tmp29 ___254_y ___254_z 	%line{285} %argrw{"wrr"}
	mul		$tmp30 $tmp29 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp31 ___254_x ___254_sinang 	%argrw{"wrr"}
	add		$tmp32 $tmp30 $tmp31 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:287
#                        x * z * cosang1 + y * sinang,
	mul		$tmp33 ___254_x ___254_z 	%line{287} %argrw{"wrr"}
	mul		$tmp34 $tmp33 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp35 ___254_y ___254_sinang 	%argrw{"wrr"}
	add		$tmp36 $tmp34 $tmp35 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:288
#                        y * z * cosang1 - x * sinang,
	mul		$tmp37 ___254_y ___254_z 	%line{288} %argrw{"wrr"}
	mul		$tmp38 $tmp37 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp39 ___254_x ___254_sinang 	%argrw{"wrr"}
	sub		$tmp40 $tmp38 $tmp39 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:289
#                        z * z + (1.0 - z * z) * cosang,
	mul		$tmp41 ___254_z ___254_z 	%line{289} %argrw{"wrr"}
	mul		$tmp42 ___254_z ___254_z 	%argrw{"wrr"}
	sub		$tmp43 $const3 $tmp42 	%argrw{"wrr"}
	mul		$tmp44 $tmp43 ___254_cosang 	%argrw{"wrr"}
	add		$tmp45 $tmp41 $tmp44 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:291
#                        0.0, 0.0, 0.0, 1.0);
	matrix		___254_M $tmp11 $tmp15 $tmp19 $const2 $tmp23 $tmp28 $tmp32 $const2 $tmp36 $tmp40 $tmp45 $const2 $const2 $const2 $const2 $const3 	%line{291} %argrw{"wrrrrrrrrrrrrrrrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:292
#     return transform (M, p-a) + a;
	sub		$tmp47 $tmp2 RotCenter 	%line{292} %argrw{"wrr"}
	transformv	$tmp46 ___254_M $tmp47 	%argrw{"wrr"}
	add		$tmp1 $tmp46 RotCenter 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UVWTransform.osl:60
# 	
	mul		$tmp48 $tmp1 Tiling 	%filename{"source/3dsMax-OSL-Shaders/UVWTransform.osl"} %line{60} %argrw{"wrr"}
	div		$tmp49 $tmp48 worldScale 	%argrw{"wrr"}
	div		UVW $tmp49 Scale 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UVWTransform.osl:62
# 		UVW -= floor(UVW);
	if		Wrap 66 66 	%line{62} %argrw{"r"}
# source/3dsMax-OSL-Shaders/UVWTransform.osl:63
# }
	floor		$tmp50 UVW 	%line{63} %argrw{"wr"}
	sub		UVW UVW $tmp50 	%argrw{"wrr"}
	end
