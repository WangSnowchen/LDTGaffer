OpenShadingLanguage 1.00
# Compiled by oslc 1.9.9
# options: -Ipath
shader JWFakeVolume
param	float	Scatter_Angle	0.1		%read{6,16} %write{2147483647,-1} %derivs
param	float	Fade_Power	1		%read{40,40} %write{2147483647,-1}
param	float	Opaque_Distance	1		%read{36,36} %write{2147483647,-1}
param	float	Transparent_Distance	0.1		%read{35,35} %write{2147483647,-1}
param	vector	Normalbump	0 0 0		%read{1,1} %write{2147483647,-1} %derivs
oparam	float	Alpha	0		%read{2147483647,-1} %write{40,42}
global	point	P	%read{8,29} %write{2147483647,-1} %derivs
global	vector	I	%read{4,5} %write{2147483647,-1} %derivs
global	normal	Ng	%read{21,25} %write{2147483647,-1}
local	vector	basevector	%read{17,17} %write{0,16} %derivs
local	vector	VectorTrace	%read{4,18} %write{1,17} %derivs
local	vector	DirTrace	%read{26,29} %write{18,18} %derivs
local	float	Dist	%read{35,35} %write{19,34}
local	int	Hit	%read{32,32} %write{20,31}
local	normal	Directional_Normal	%read{26,26} %write{21,25}
local	int	___323_DoTrace	%read{30,30} %write{29,29}
local	int	___324_HitTrace	%read{2147483647,-1} %write{31,31}
local	int	___325_HitTrace	%read{2147483647,-1} %write{34,34}
const	vector	$const1	0 0 0		%read{0,0} %write{2147483647,-1}
temp	int	$tmp1	%read{3,3} %write{2,2}
const	float	$const2	0		%read{6,42} %write{2147483647,-1}
temp	int	$tmp2	%read{7,7} %write{6,6}
const	float	$const3	1		%read{15,38} %write{2147483647,-1}
const	float	$const4	2		%read{14,14} %write{2147483647,-1}
temp	vector	$tmp3	%read{14,14} %write{13,13} %derivs
const	string	$const5	"cell"		%read{13,13} %write{2147483647,-1}
const	float	$const6	0.001		%read{10,10} %write{2147483647,-1}
temp	float	$tmp4	%read{10,10} %write{9,9} %derivs
const	string	$const7	"perlin"		%read{9,9} %write{2147483647,-1}
const	float	$const8	10000		%read{8,12} %write{2147483647,-1}
temp	point	$tmp5	%read{9,9} %write{8,8} %derivs
temp	float	$tmp6	%read{11,11} %write{10,10} %derivs
temp	vector	$tmp7	%read{12,12} %write{11,11} %derivs
temp	vector	$tmp8	%read{13,13} %write{12,12} %derivs
temp	vector	$tmp9	%read{15,15} %write{14,14} %derivs
temp	vector	$tmp10	%read{16,16} %write{15,15} %derivs
const	int	$const9	0		%read{20,32} %write{2147483647,-1}
temp	int	$tmp11	%read{23,23} %write{22,22}
temp	int	$tmp12	%read{24,24} %write{23,23}
temp	float	$tmp13	%read{27,27} %write{26,26}
temp	int	$tmp14	%read{28,28} %write{27,27}
const	string	$const10	"trace"		%read{31,34} %write{2147483647,-1}
const	string	$const11	"hit"		%read{31,31} %write{2147483647,-1}
temp	int	$tmp15	%read{33,33} %write{32,32}
const	string	$const12	"hitdist"		%read{34,34} %write{2147483647,-1}
temp	float	$tmp16	%read{40,40} %write{39,39}
temp	float	$tmp17	%read{36,36} %write{35,35}
temp	float	$tmp18	%read{38,38} %write{36,36}
const	string	$const13	"clamp"		%read{37,37} %write{2147483647,-1}
temp	float	$tmp19	%read{39,39} %write{38,38}
code ___main___
# source/sambler-osl-shaders/ramps/JWFakeVolume/JWFakeVolume.osl:25
#     vector VectorTrace = Normalbump;
	assign		basevector $const1 	%filename{"source/sambler-osl-shaders/ramps/JWFakeVolume/JWFakeVolume.osl"} %line{25} %argrw{"wr"}
# source/sambler-osl-shaders/ramps/JWFakeVolume/JWFakeVolume.osl:26
#     if(backfacing())VectorTrace+=I;
	assign		VectorTrace Normalbump 	%line{26} %argrw{"wr"}
# source/sambler-osl-shaders/ramps/JWFakeVolume/JWFakeVolume.osl:27
#     else VectorTrace-=I;
	backfacing	$tmp1 	%line{27} %argrw{"w"}
	if		$tmp1 5 6 	%argrw{"r"}
	add		VectorTrace VectorTrace I 	%argrw{"wrr"}
# source/sambler-osl-shaders/ramps/JWFakeVolume/JWFakeVolume.osl:28
# 
	sub		VectorTrace VectorTrace I 	%line{28} %argrw{"wrr"}
# source/sambler-osl-shaders/ramps/JWFakeVolume/JWFakeVolume.osl:30
#         basevector = Scatter_Angle * ( 1.0- 2.0 * noise("cell",(VectorTrace 
	neq		$tmp2 Scatter_Angle $const2 	%line{30} %argrw{"wrr"}
	if		$tmp2 18 18 	%argrw{"r"}
# source/sambler-osl-shaders/ramps/JWFakeVolume/JWFakeVolume.osl:32
#         VectorTrace +=  basevector ;
	mul		$tmp5 P $const8 	%line{32} %argrw{"wrr"}
	noise		$tmp4 $const7 $tmp5 	%argrw{"wrr"}
	mul		$tmp6 $const6 $tmp4 	%argrw{"wrr"}
	add		$tmp7 VectorTrace $tmp6 	%argrw{"wrr"}
	mul		$tmp8 $tmp7 $const8 	%argrw{"wrr"}
	noise		$tmp3 $const5 $tmp8 	%argrw{"wrr"}
	mul		$tmp9 $const4 $tmp3 	%argrw{"wrr"}
	sub		$tmp10 $const3 $tmp9 	%argrw{"wrr"}
	mul		basevector Scatter_Angle $tmp10 	%argrw{"wrr"}
# source/sambler-osl-shaders/ramps/JWFakeVolume/JWFakeVolume.osl:33
#     }
	add		VectorTrace VectorTrace basevector 	%line{33} %argrw{"wrr"}
# source/sambler-osl-shaders/ramps/JWFakeVolume/JWFakeVolume.osl:35
# 
	normalize	DirTrace VectorTrace 	%line{35} %argrw{"wr"}
# source/sambler-osl-shaders/ramps/JWFakeVolume/JWFakeVolume.osl:38
#     int Hit=0;
	assign		Dist $const2 	%line{38} %argrw{"wr"}
# source/sambler-osl-shaders/ramps/JWFakeVolume/JWFakeVolume.osl:39
# 
	assign		Hit $const9 	%line{39} %argrw{"wr"}
# source/sambler-osl-shaders/ramps/JWFakeVolume/JWFakeVolume.osl:41
#     if(!backfacing())Directional_Normal=-Ng;
	assign		Directional_Normal Ng 	%line{41} %argrw{"wr"}
# source/sambler-osl-shaders/ramps/JWFakeVolume/JWFakeVolume.osl:42
# 
	backfacing	$tmp11 	%line{42} %argrw{"w"}
	eq		$tmp12 $tmp11 $const9 	%argrw{"wrr"}
	if		$tmp12 26 26 	%argrw{"r"}
	neg		Directional_Normal Ng 	%argrw{"wr"}
# source/sambler-osl-shaders/ramps/JWFakeVolume/JWFakeVolume.osl:44
#         int DoTrace = trace (P, DirTrace) ;
	dot		$tmp13 Directional_Normal DirTrace 	%line{44} %argrw{"wrr"}
	gt		$tmp14 $tmp13 $const2 	%argrw{"wrr"}
	if		$tmp14 43 43 	%argrw{"r"}
# source/sambler-osl-shaders/ramps/JWFakeVolume/JWFakeVolume.osl:45
#         if ( DoTrace) {
	trace		___323_DoTrace P DirTrace 	%line{45} %argrw{"wrr"} %argderivs{1,2}
# source/sambler-osl-shaders/ramps/JWFakeVolume/JWFakeVolume.osl:46
#             //Did the ray hit?
	if		___323_DoTrace 42 43 	%line{46} %argrw{"r"}
# source/sambler-osl-shaders/ramps/JWFakeVolume/JWFakeVolume.osl:48
#             if(Hit!=0){
	getmessage	___324_HitTrace $const10 $const11 Hit 	%line{48} %argrw{"wrrw"}
# source/sambler-osl-shaders/ramps/JWFakeVolume/JWFakeVolume.osl:49
#                 int HitTrace = getmessage ("trace", "hitdist" ,  Dist ) ;
	neq		$tmp15 Hit $const9 	%line{49} %argrw{"wrr"}
	if		$tmp15 41 42 	%argrw{"r"}
# source/sambler-osl-shaders/ramps/JWFakeVolume/JWFakeVolume.osl:50
#                 Alpha = pow(clamp ( ((Dist-Transparent_Distance)
	getmessage	___325_HitTrace $const10 $const12 Dist 	%line{50} %argrw{"wrrw"}
# source/sambler-osl-shaders/ramps/JWFakeVolume/JWFakeVolume.osl:51
#                             / Opaque_Distance) , 0.0 , 1.0 ),Fade_Power);
	sub		$tmp17 Dist Transparent_Distance 	%line{51} %argrw{"wrr"}
# source/sambler-osl-shaders/ramps/JWFakeVolume/JWFakeVolume.osl:52
#             }
	div		$tmp18 $tmp17 Opaque_Distance 	%line{52} %argrw{"wrr"}
	functioncall	$const13 40 	%argrw{"r"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:145
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp19 $tmp18 $const3 	%filename{"/opt/gaffer-0.58.0.1-linux/shaders/stdosl.h"} %line{145} %argrw{"wrr"}
	max		$tmp16 $tmp19 $const2 	%argrw{"wrr"}
# source/sambler-osl-shaders/ramps/JWFakeVolume/JWFakeVolume.osl:52
#             }
	pow		Alpha $tmp16 Fade_Power 	%filename{"source/sambler-osl-shaders/ramps/JWFakeVolume/JWFakeVolume.osl"} %line{52} %argrw{"wrr"}
# source/sambler-osl-shaders/ramps/JWFakeVolume/JWFakeVolume.osl:54
#        }
	assign		Alpha $const2 	%line{54} %argrw{"wr"}
# source/sambler-osl-shaders/ramps/JWFakeVolume/JWFakeVolume.osl:56
#     }
	assign		Alpha $const2 	%line{56} %argrw{"wr"}
	end
