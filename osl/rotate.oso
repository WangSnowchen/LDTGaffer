OpenShadingLanguage 1.00
# Compiled by oslc 1.9.9
# options: -Ipath
shader rotate
param	vector	VectorIn	0 0 0		%read{52,52} %write{2147483647,-1}
param	vector	From	0 0 0		%read{5,54} %write{2147483647,-1}
param	vector	To	0 0 0		%read{5,5} %write{0,0} %initexpr
param	float	Angle	0		%read{3,3} %write{2147483647,-1}
oparam	vector	VectorOut	0 0 0		%read{2147483647,-1} %write{54,54}
local	vector	___254_axis	%read{9,11} %write{6,6}
local	float	___254_cosang	%read{8,49} %write{7,7}
local	float	___254_sinang	%read{19,44} %write{7,7}
local	float	___254_cosang1	%read{18,43} %write{8,8}
local	float	___254_x	%read{12,44} %write{9,9}
local	float	___254_y	%read{17,42} %write{10,10}
local	float	___254_z	%read{19,47} %write{11,11}
local	matrix	___254_M	%read{53,53} %write{51,51}
const	point	$const1	0 0 1		%read{0,0} %write{2147483647,-1}
temp	float	$tmp1	%read{7,7} %write{3,3}
const	string	$const2	"radians"		%read{1,1} %write{2147483647,-1}
const	float	$const3	3.1415927		%read{2,2} %write{2147483647,-1}
const	float	$const4	180		%read{2,2} %write{2147483647,-1}
temp	float	$tmp2	%read{3,3} %write{2,2}
const	string	$const5	"rotate"		%read{4,4} %write{2147483647,-1}
temp	vector	$tmp3	%read{6,6} %write{5,5}
const	float	$const6	1		%read{8,51} %write{2147483647,-1}
const	int	$const7	0		%read{9,9} %write{2147483647,-1}
const	int	$const8	1		%read{10,10} %write{2147483647,-1}
const	int	$const9	2		%read{11,11} %write{2147483647,-1}
temp	float	$tmp4	%read{16,16} %write{12,12}
temp	float	$tmp5	%read{14,14} %write{13,13}
temp	float	$tmp6	%read{15,15} %write{14,14}
temp	float	$tmp7	%read{16,16} %write{15,15}
temp	float	$tmp8	%read{51,51} %write{16,16}
temp	float	$tmp9	%read{18,18} %write{17,17}
temp	float	$tmp10	%read{20,20} %write{18,18}
temp	float	$tmp11	%read{20,20} %write{19,19}
temp	float	$tmp12	%read{51,51} %write{20,20}
temp	float	$tmp13	%read{22,22} %write{21,21}
temp	float	$tmp14	%read{24,24} %write{22,22}
temp	float	$tmp15	%read{24,24} %write{23,23}
temp	float	$tmp16	%read{51,51} %write{24,24}
const	float	$const10	0		%read{51,51} %write{2147483647,-1}
temp	float	$tmp17	%read{26,26} %write{25,25}
temp	float	$tmp18	%read{28,28} %write{26,26}
temp	float	$tmp19	%read{28,28} %write{27,27}
temp	float	$tmp20	%read{51,51} %write{28,28}
temp	float	$tmp21	%read{33,33} %write{29,29}
temp	float	$tmp22	%read{31,31} %write{30,30}
temp	float	$tmp23	%read{32,32} %write{31,31}
temp	float	$tmp24	%read{33,33} %write{32,32}
temp	float	$tmp25	%read{51,51} %write{33,33}
temp	float	$tmp26	%read{35,35} %write{34,34}
temp	float	$tmp27	%read{37,37} %write{35,35}
temp	float	$tmp28	%read{37,37} %write{36,36}
temp	float	$tmp29	%read{51,51} %write{37,37}
temp	float	$tmp30	%read{39,39} %write{38,38}
temp	float	$tmp31	%read{41,41} %write{39,39}
temp	float	$tmp32	%read{41,41} %write{40,40}
temp	float	$tmp33	%read{51,51} %write{41,41}
temp	float	$tmp34	%read{43,43} %write{42,42}
temp	float	$tmp35	%read{45,45} %write{43,43}
temp	float	$tmp36	%read{45,45} %write{44,44}
temp	float	$tmp37	%read{51,51} %write{45,45}
temp	float	$tmp38	%read{50,50} %write{46,46}
temp	float	$tmp39	%read{48,48} %write{47,47}
temp	float	$tmp40	%read{49,49} %write{48,48}
temp	float	$tmp41	%read{50,50} %write{49,49}
temp	float	$tmp42	%read{51,51} %write{50,50}
temp	vector	$tmp43	%read{54,54} %write{53,53}
temp	vector	$tmp44	%read{53,53} %write{52,52}
code To
# source/sambler-osl-shaders/MJABook/05MABVectorRotate/MABVectorRotate.osl:17
#     float Angle = 0, // in degrees
	assign		To $const1 	%filename{"source/sambler-osl-shaders/MJABook/05MABVectorRotate/MABVectorRotate.osl"} %line{17} %argrw{"wr"}
code ___main___
# source/sambler-osl-shaders/MJABook/05MABVectorRotate/MABVectorRotate.osl:22
# }
	functioncall	$const2 4 	%filename{"source/sambler-osl-shaders/MJABook/05MABVectorRotate/MABVectorRotate.osl"} %line{22} %argrw{"r"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:88
# float  radians (float x)  { return x*(M_PI/180.0); }
	div		$tmp2 $const3 $const4 	%filename{"/opt/gaffer-0.58.0.1-linux/shaders/stdosl.h"} %line{88} %argrw{"wrr"}
	mul		$tmp1 Angle $tmp2 	%argrw{"wrr"}
# source/sambler-osl-shaders/MJABook/05MABVectorRotate/MABVectorRotate.osl:22
# }
	functioncall	$const5 55 	%filename{"source/sambler-osl-shaders/MJABook/05MABVectorRotate/MABVectorRotate.osl"} %line{22} %argrw{"r"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:274
#     vector axis = normalize (b - a);
	sub		$tmp3 To From 	%filename{"/opt/gaffer-0.58.0.1-linux/shaders/stdosl.h"} %line{274} %argrw{"wrr"}
	normalize	___254_axis $tmp3 	%argrw{"wr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:276
#     sincos (angle, sinang, cosang);
	sincos		$tmp1 ___254_sinang ___254_cosang 	%line{276} %argrw{"rww"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:277
#     float cosang1 = 1.0 - cosang;
	sub		___254_cosang1 $const6 ___254_cosang 	%line{277} %argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:278
#     float x = axis[0], y = axis[1], z = axis[2];
	compref		___254_x ___254_axis $const7 	%line{278} %argrw{"wrr"}
	compref		___254_y ___254_axis $const8 	%argrw{"wrr"}
	compref		___254_z ___254_axis $const9 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:279
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	mul		$tmp4 ___254_x ___254_x 	%line{279} %argrw{"wrr"}
	mul		$tmp5 ___254_x ___254_x 	%argrw{"wrr"}
	sub		$tmp6 $const6 $tmp5 	%argrw{"wrr"}
	mul		$tmp7 $tmp6 ___254_cosang 	%argrw{"wrr"}
	add		$tmp8 $tmp4 $tmp7 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:280
#                        x * y * cosang1 + z * sinang,
	mul		$tmp9 ___254_x ___254_y 	%line{280} %argrw{"wrr"}
	mul		$tmp10 $tmp9 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp11 ___254_z ___254_sinang 	%argrw{"wrr"}
	add		$tmp12 $tmp10 $tmp11 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:281
#                        x * z * cosang1 - y * sinang,
	mul		$tmp13 ___254_x ___254_z 	%line{281} %argrw{"wrr"}
	mul		$tmp14 $tmp13 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp15 ___254_y ___254_sinang 	%argrw{"wrr"}
	sub		$tmp16 $tmp14 $tmp15 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:283
#                        x * y * cosang1 - z * sinang,
	mul		$tmp17 ___254_x ___254_y 	%line{283} %argrw{"wrr"}
	mul		$tmp18 $tmp17 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp19 ___254_z ___254_sinang 	%argrw{"wrr"}
	sub		$tmp20 $tmp18 $tmp19 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:284
#                        y * y + (1.0 - y * y) * cosang,
	mul		$tmp21 ___254_y ___254_y 	%line{284} %argrw{"wrr"}
	mul		$tmp22 ___254_y ___254_y 	%argrw{"wrr"}
	sub		$tmp23 $const6 $tmp22 	%argrw{"wrr"}
	mul		$tmp24 $tmp23 ___254_cosang 	%argrw{"wrr"}
	add		$tmp25 $tmp21 $tmp24 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:285
#                        y * z * cosang1 + x * sinang,
	mul		$tmp26 ___254_y ___254_z 	%line{285} %argrw{"wrr"}
	mul		$tmp27 $tmp26 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp28 ___254_x ___254_sinang 	%argrw{"wrr"}
	add		$tmp29 $tmp27 $tmp28 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:287
#                        x * z * cosang1 + y * sinang,
	mul		$tmp30 ___254_x ___254_z 	%line{287} %argrw{"wrr"}
	mul		$tmp31 $tmp30 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp32 ___254_y ___254_sinang 	%argrw{"wrr"}
	add		$tmp33 $tmp31 $tmp32 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:288
#                        y * z * cosang1 - x * sinang,
	mul		$tmp34 ___254_y ___254_z 	%line{288} %argrw{"wrr"}
	mul		$tmp35 $tmp34 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp36 ___254_x ___254_sinang 	%argrw{"wrr"}
	sub		$tmp37 $tmp35 $tmp36 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:289
#                        z * z + (1.0 - z * z) * cosang,
	mul		$tmp38 ___254_z ___254_z 	%line{289} %argrw{"wrr"}
	mul		$tmp39 ___254_z ___254_z 	%argrw{"wrr"}
	sub		$tmp40 $const6 $tmp39 	%argrw{"wrr"}
	mul		$tmp41 $tmp40 ___254_cosang 	%argrw{"wrr"}
	add		$tmp42 $tmp38 $tmp41 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:291
#                        0.0, 0.0, 0.0, 1.0);
	matrix		___254_M $tmp8 $tmp12 $tmp16 $const10 $tmp20 $tmp25 $tmp29 $const10 $tmp33 $tmp37 $tmp42 $const10 $const10 $const10 $const10 $const6 	%line{291} %argrw{"wrrrrrrrrrrrrrrrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:292
#     return transform (M, p-a) + a;
	sub		$tmp44 VectorIn From 	%line{292} %argrw{"wrr"}
	transformv	$tmp43 ___254_M $tmp44 	%argrw{"wrr"}
	add		VectorOut $tmp43 From 	%argrw{"wrr"}
	end
