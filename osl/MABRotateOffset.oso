OpenShadingLanguage 1.00
# Compiled by oslc 1.9.9
# options: -Ipath
shader MABRotateOffset
param	point	VectorIn	0 0 0		%read{56,56} %write{0,0} %initexpr
param	point	Centre	0 0 0		%read{7,58} %write{2147483647,-1}
param	float	Angle	0		%read{6,6} %write{2147483647,-1}
oparam	point	VectorOut	0 0 0		%read{2147483647,-1} %write{1,58} %initexpr
global	point	P	%read{0,1} %write{2147483647,-1}
local	vector	___254_axis	%read{13,15} %write{10,10}
local	float	___254_cosang	%read{12,53} %write{11,11}
local	float	___254_sinang	%read{23,48} %write{11,11}
local	float	___254_cosang1	%read{22,47} %write{12,12}
local	float	___254_x	%read{16,48} %write{13,13}
local	float	___254_y	%read{21,46} %write{14,14}
local	float	___254_z	%read{23,51} %write{15,15}
local	matrix	___254_M	%read{57,57} %write{55,55}
local	vector	___322_z	%read{7,7} %write{3,3}
const	string	$const1	"rotate_point_angle"		%read{2,2} %write{2147483647,-1}
const	vector	$const2	0 0 1		%read{3,3} %write{2147483647,-1}
temp	float	$tmp1	%read{11,11} %write{6,6}
const	string	$const3	"radians"		%read{4,4} %write{2147483647,-1}
const	float	$const4	3.1415927		%read{5,5} %write{2147483647,-1}
const	float	$const5	180		%read{5,5} %write{2147483647,-1}
temp	float	$tmp2	%read{6,6} %write{5,5}
temp	point	$tmp3	%read{9,9} %write{7,7}
const	string	$const6	"rotate"		%read{8,8} %write{2147483647,-1}
temp	vector	$tmp4	%read{10,10} %write{9,9}
const	float	$const7	1		%read{12,55} %write{2147483647,-1}
const	int	$const8	0		%read{13,13} %write{2147483647,-1}
const	int	$const9	1		%read{14,14} %write{2147483647,-1}
const	int	$const10	2		%read{15,15} %write{2147483647,-1}
temp	float	$tmp5	%read{20,20} %write{16,16}
temp	float	$tmp6	%read{18,18} %write{17,17}
temp	float	$tmp7	%read{19,19} %write{18,18}
temp	float	$tmp8	%read{20,20} %write{19,19}
temp	float	$tmp9	%read{55,55} %write{20,20}
temp	float	$tmp10	%read{22,22} %write{21,21}
temp	float	$tmp11	%read{24,24} %write{22,22}
temp	float	$tmp12	%read{24,24} %write{23,23}
temp	float	$tmp13	%read{55,55} %write{24,24}
temp	float	$tmp14	%read{26,26} %write{25,25}
temp	float	$tmp15	%read{28,28} %write{26,26}
temp	float	$tmp16	%read{28,28} %write{27,27}
temp	float	$tmp17	%read{55,55} %write{28,28}
const	float	$const11	0		%read{55,55} %write{2147483647,-1}
temp	float	$tmp18	%read{30,30} %write{29,29}
temp	float	$tmp19	%read{32,32} %write{30,30}
temp	float	$tmp20	%read{32,32} %write{31,31}
temp	float	$tmp21	%read{55,55} %write{32,32}
temp	float	$tmp22	%read{37,37} %write{33,33}
temp	float	$tmp23	%read{35,35} %write{34,34}
temp	float	$tmp24	%read{36,36} %write{35,35}
temp	float	$tmp25	%read{37,37} %write{36,36}
temp	float	$tmp26	%read{55,55} %write{37,37}
temp	float	$tmp27	%read{39,39} %write{38,38}
temp	float	$tmp28	%read{41,41} %write{39,39}
temp	float	$tmp29	%read{41,41} %write{40,40}
temp	float	$tmp30	%read{55,55} %write{41,41}
temp	float	$tmp31	%read{43,43} %write{42,42}
temp	float	$tmp32	%read{45,45} %write{43,43}
temp	float	$tmp33	%read{45,45} %write{44,44}
temp	float	$tmp34	%read{55,55} %write{45,45}
temp	float	$tmp35	%read{47,47} %write{46,46}
temp	float	$tmp36	%read{49,49} %write{47,47}
temp	float	$tmp37	%read{49,49} %write{48,48}
temp	float	$tmp38	%read{55,55} %write{49,49}
temp	float	$tmp39	%read{54,54} %write{50,50}
temp	float	$tmp40	%read{52,52} %write{51,51}
temp	float	$tmp41	%read{53,53} %write{52,52}
temp	float	$tmp42	%read{54,54} %write{53,53}
temp	float	$tmp43	%read{55,55} %write{54,54}
temp	vector	$tmp44	%read{58,58} %write{57,57}
temp	vector	$tmp45	%read{57,57} %write{56,56}
code VectorIn
# source/sambler-osl-shaders/MJABook/12MABSymmetry/MABRotateOffset.osl:26
#     point Centre = point(0, 0, 0), // 0,0 = bottom left
	assign		VectorIn P 	%filename{"source/sambler-osl-shaders/MJABook/12MABSymmetry/MABRotateOffset.osl"} %line{26} %argrw{"wr"}
code VectorOut
# source/sambler-osl-shaders/MJABook/12MABSymmetry/MABRotateOffset.osl:30
# {
	assign		VectorOut P 	%filename{"source/sambler-osl-shaders/MJABook/12MABSymmetry/MABRotateOffset.osl"} %line{30} %argrw{"wr"}
code ___main___
# source/sambler-osl-shaders/MJABook/12MABSymmetry/MABRotateOffset.osl:32
# }
	functioncall	$const1 59 	%filename{"source/sambler-osl-shaders/MJABook/12MABSymmetry/MABRotateOffset.osl"} %line{32} %argrw{"r"}
# source/sambler-osl-shaders/MJABook/12MABSymmetry/MABRotateOffset.osl:21
#     return rotate(p, radians(angle), q, q + z);
	assign		___322_z $const2 	%line{21} %argrw{"wr"}
# source/sambler-osl-shaders/MJABook/12MABSymmetry/MABRotateOffset.osl:22
# }
	functioncall	$const3 7 	%line{22} %argrw{"r"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:88
# float  radians (float x)  { return x*(M_PI/180.0); }
	div		$tmp2 $const4 $const5 	%filename{"/opt/gaffer-0.58.0.1-linux/shaders/stdosl.h"} %line{88} %argrw{"wrr"}
	mul		$tmp1 Angle $tmp2 	%argrw{"wrr"}
# source/sambler-osl-shaders/MJABook/12MABSymmetry/MABRotateOffset.osl:22
# }
	add		$tmp3 Centre ___322_z 	%filename{"source/sambler-osl-shaders/MJABook/12MABSymmetry/MABRotateOffset.osl"} %line{22} %argrw{"wrr"}
	functioncall	$const6 59 	%argrw{"r"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:274
#     vector axis = normalize (b - a);
	sub		$tmp4 $tmp3 Centre 	%filename{"/opt/gaffer-0.58.0.1-linux/shaders/stdosl.h"} %line{274} %argrw{"wrr"}
	normalize	___254_axis $tmp4 	%argrw{"wr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:276
#     sincos (angle, sinang, cosang);
	sincos		$tmp1 ___254_sinang ___254_cosang 	%line{276} %argrw{"rww"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:277
#     float cosang1 = 1.0 - cosang;
	sub		___254_cosang1 $const7 ___254_cosang 	%line{277} %argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:278
#     float x = axis[0], y = axis[1], z = axis[2];
	compref		___254_x ___254_axis $const8 	%line{278} %argrw{"wrr"}
	compref		___254_y ___254_axis $const9 	%argrw{"wrr"}
	compref		___254_z ___254_axis $const10 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:279
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	mul		$tmp5 ___254_x ___254_x 	%line{279} %argrw{"wrr"}
	mul		$tmp6 ___254_x ___254_x 	%argrw{"wrr"}
	sub		$tmp7 $const7 $tmp6 	%argrw{"wrr"}
	mul		$tmp8 $tmp7 ___254_cosang 	%argrw{"wrr"}
	add		$tmp9 $tmp5 $tmp8 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:280
#                        x * y * cosang1 + z * sinang,
	mul		$tmp10 ___254_x ___254_y 	%line{280} %argrw{"wrr"}
	mul		$tmp11 $tmp10 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp12 ___254_z ___254_sinang 	%argrw{"wrr"}
	add		$tmp13 $tmp11 $tmp12 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:281
#                        x * z * cosang1 - y * sinang,
	mul		$tmp14 ___254_x ___254_z 	%line{281} %argrw{"wrr"}
	mul		$tmp15 $tmp14 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp16 ___254_y ___254_sinang 	%argrw{"wrr"}
	sub		$tmp17 $tmp15 $tmp16 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:283
#                        x * y * cosang1 - z * sinang,
	mul		$tmp18 ___254_x ___254_y 	%line{283} %argrw{"wrr"}
	mul		$tmp19 $tmp18 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp20 ___254_z ___254_sinang 	%argrw{"wrr"}
	sub		$tmp21 $tmp19 $tmp20 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:284
#                        y * y + (1.0 - y * y) * cosang,
	mul		$tmp22 ___254_y ___254_y 	%line{284} %argrw{"wrr"}
	mul		$tmp23 ___254_y ___254_y 	%argrw{"wrr"}
	sub		$tmp24 $const7 $tmp23 	%argrw{"wrr"}
	mul		$tmp25 $tmp24 ___254_cosang 	%argrw{"wrr"}
	add		$tmp26 $tmp22 $tmp25 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:285
#                        y * z * cosang1 + x * sinang,
	mul		$tmp27 ___254_y ___254_z 	%line{285} %argrw{"wrr"}
	mul		$tmp28 $tmp27 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp29 ___254_x ___254_sinang 	%argrw{"wrr"}
	add		$tmp30 $tmp28 $tmp29 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:287
#                        x * z * cosang1 + y * sinang,
	mul		$tmp31 ___254_x ___254_z 	%line{287} %argrw{"wrr"}
	mul		$tmp32 $tmp31 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp33 ___254_y ___254_sinang 	%argrw{"wrr"}
	add		$tmp34 $tmp32 $tmp33 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:288
#                        y * z * cosang1 - x * sinang,
	mul		$tmp35 ___254_y ___254_z 	%line{288} %argrw{"wrr"}
	mul		$tmp36 $tmp35 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp37 ___254_x ___254_sinang 	%argrw{"wrr"}
	sub		$tmp38 $tmp36 $tmp37 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:289
#                        z * z + (1.0 - z * z) * cosang,
	mul		$tmp39 ___254_z ___254_z 	%line{289} %argrw{"wrr"}
	mul		$tmp40 ___254_z ___254_z 	%argrw{"wrr"}
	sub		$tmp41 $const7 $tmp40 	%argrw{"wrr"}
	mul		$tmp42 $tmp41 ___254_cosang 	%argrw{"wrr"}
	add		$tmp43 $tmp39 $tmp42 	%argrw{"wrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:291
#                        0.0, 0.0, 0.0, 1.0);
	matrix		___254_M $tmp9 $tmp13 $tmp17 $const11 $tmp21 $tmp26 $tmp30 $const11 $tmp34 $tmp38 $tmp43 $const11 $const11 $const11 $const11 $const7 	%line{291} %argrw{"wrrrrrrrrrrrrrrrr"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:292
#     return transform (M, p-a) + a;
	sub		$tmp45 VectorIn Centre 	%line{292} %argrw{"wrr"}
	transformv	$tmp44 ___254_M $tmp45 	%argrw{"wrr"}
	add		VectorOut $tmp44 Centre 	%argrw{"wrr"}
	end
