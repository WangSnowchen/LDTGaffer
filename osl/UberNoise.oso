OpenShadingLanguage 1.00
# Compiled by oslc 1.9.9
# options: -Ipath
shader UberNoise	%meta{string,help,"<h3>UberNoise</h3>Combines many noise functions in one. Can do classic<br>Perlin, Fractal, Cell as well as fBm noise and multiple<br>flavors of Worley noise."} %meta{string,label,"Uber Noise"} 
param	point	UVW	0 0 0		%meta{string,help,"The UVW coordinate to use. When not connected, defaults to Object space"}  %read{2,2} %write{1,1} %initexpr
param	float	Scale	25		%read{2,2} %write{2147483647,-1}
param	int	Type	0		%meta{string,widget,"mapper"} %meta{string,help,"Pick noise type from the list"} %meta{int,connectable,0} %meta{string,options,"Simplex:-1|Perlin:0|Fractal:1|Cell:2|Worley Classic (Voronoi):3|Worley Manhattan:4|Worley Chebychev:5|Worley Minkowski 0.5:6|Worley Minkowski 4:7"}  %read{26,49} %write{2147483647,-1}
param	float	WorleyPower	1		%meta{float,min,0.0099999998} %meta{float,max,10} %meta{string,help,"The power applied to the Worley distance function. Values higher than 1.0 smooths out peaks and values lower than 1.0 sharpens them"}  %read{128,128} %write{2147483647,-1}
param	float	WorleyJitter	1		%meta{float,min,-2} %meta{float,max,2} %meta{string,help,"How much the individual cell points Worley noise is based on is distorted away from a perfect grid. "}  %read{71,71} %write{2147483647,-1}
param	int	Iterations	3		%meta{string,help,"Hos many layers of noise are mixed together."} %meta{int,min,1} %meta{int,max,20}  %read{17,17} %write{2147483647,-1}
param	float	Lacunarity	1.8		%meta{string,help,"How much the 'frequency' of the noise changes per layer."}  %read{160,160} %write{2147483647,-1}
param	float	Gain	0.76999998		%meta{string,help,"How much the amplitude of the noise changes per layer. Higher numbers means higher noise frequencies have more effect."}  %read{161,161} %write{2147483647,-1}
param	int	Mode	0		%meta{string,widget,"mapper"} %meta{string,help,"The layer combination mode"} %meta{int,connectable,0} %meta{string,options,"Add:0|Relative:1|Multiply:2"}  %read{11,154} %write{2147483647,-1}
param	int	LayerDistort	1		%meta{string,widget,"checkBox"} %meta{string,label,"Layer Distortion"} %meta{int,connectable,0} %meta{string,help,"Enables a per layer distortion of the noise."}  %read{20,20} %write{2147483647,-1}
param	float	LayerDistAmount	4		%meta{string,help,"Amount of layer distortion."} %meta{string,label,"Distortion Amount"}  %read{23,23} %write{2147483647,-1}
param	float	LayerDistScale	0.1		%meta{string,help,"Scale of the layer distortion relative to the Base Wavelength."} %meta{string,label,"Distortion Scale"} %meta{float,min,-1} %meta{float,max,1}  %read{7,7} %write{2147483647,-1}
param	float	LayerDistRatio	1.2		%meta{string,help,"How much the 'frequency' of the distortion changes per layer."} %meta{string,label,"Distortion Scale Ratio"}  %read{25,25} %write{2147483647,-1}
param	int	LayerStepFunction	1		%meta{string,widget,"checkBox"} %meta{string,label,"Layer Step Function"} %meta{int,connectable,0} %meta{string,help,"Enables a per-layer smoothstep curve in the noise, allowing you to increase the 'contrast' of the noise"}  %read{141,141} %write{2147483647,-1}
param	float	LayerLowStep	0.2		%meta{string,help,"Low threshold of the smoothstep function."} %meta{string,label,"Layer Low Step"} %meta{float,min,0} %meta{float,max,1}  %read{142,142} %write{2147483647,-1}
param	float	LayerHiStep	0.80000001		%meta{string,help,"High threshold of the smoothstep function."} %meta{string,label,"Layer High Step"} %meta{float,min,0} %meta{float,max,1}  %read{142,142} %write{2147483647,-1}
param	int	Normalize	1		%meta{string,widget,"checkBox"} %meta{int,connectable,0} %meta{string,help,"If the noise is auto-normalized to Amplitude or not."}  %read{167,167} %write{2147483647,-1}
param	float	Amplitude	1		%meta{string,help,"The amplitude of the noise."}  %read{168,170} %write{2147483647,-1}
param	int	OutputStepFunction	0		%meta{string,widget,"checkBox"} %meta{string,label,"Output Step Function"} %meta{int,connectable,0} %meta{string,help,"Enables a smoothstep curve to the resulting noise, allowing you to increase the 'contrast' of the noise"}  %read{171,171} %write{2147483647,-1}
param	float	OutputLowStep	0.2		%meta{string,help,"Low threshold of the smoothstep function."} %meta{string,label,"Output Low Step"} %meta{float,min,0} %meta{float,max,1}  %read{172,172} %write{2147483647,-1}
param	float	OutputHiStep	0.80000001		%meta{string,help,"High threshold of the smoothstep function."} %meta{string,label,"Output High Step"} %meta{float,min,0} %meta{float,max,1}  %read{172,172} %write{2147483647,-1}
param	color	A	0 0 0		%meta{string,label,"Color A"}  %read{174,174} %write{2147483647,-1}
param	color	B	1 1 1		%meta{string,label,"Color B"}  %read{174,174} %write{2147483647,-1}
param	float	Phase	0		%meta{string,help,"The 'Phase' is just a 4th coordinate of the noise, can be used to allow it to evolve over time, for example."}  %read{6,6} %write{2147483647,-1}
oparam	color	Color	0 0 0		%read{2147483647,-1} %write{174,174}
oparam	float	Float	0		%read{2147483647,-1} %write{173,173}
oparam	color	CellRandomness	0 0 0		%meta{string,label,"Worley Cell Color"}  %read{2147483647,-1} %write{175,175}
oparam	point	CellCenter	0 0 0		%meta{string,label,"Worley Cell Center"}  %read{175,175} %write{17,166}
global	point	P	%read{1,1} %write{2147483647,-1}
local	float	___322_closestdist	%read{17,166} %write{17,166}
local	point	___322_cellpnt	%read{17,166} %write{17,166}
local	vector	___322_offset	%read{2147483647,-1} %write{17,166}
local	int	___323_x	%read{17,166} %write{17,166}
local	int	___325_y	%read{17,166} %write{17,166}
local	int	___327_z	%read{17,166} %write{17,166}
local	point	___328_base	%read{17,166} %write{17,166}
local	float	___328_distort	%read{17,166} %write{17,166}
local	vector	___328_dist	%read{17,166} %write{17,166}
local	float	___328_d	%read{17,166} %write{17,166}
local	float	___331_x	%read{17,166} %write{17,166}
local	float	___331_y	%read{17,166} %write{17,166}
local	float	___331_z	%read{17,166} %write{17,166}
local	float	___333_x	%read{17,166} %write{17,166}
local	float	___333_y	%read{17,166} %write{17,166}
local	float	___333_z	%read{17,166} %write{17,166}
local	point	pnt	%read{17,166} %write{2,2}
local	float	sum	%read{17,168} %write{3,166}
local	float	curFreq	%read{17,166} %write{4,166}
local	float	curAmp	%read{17,166} %write{5,166}
local	float	curPhase	%read{17,166} %write{6,6}
local	float	curDistFreq	%read{17,166} %write{7,166}
local	float	result	%read{17,174} %write{8,172}
local	float	lastResult	%read{17,166} %write{9,166}
local	point	cellpoint	%read{17,166} %write{10,166}
local	int	___336_i	%read{17,166} %write{16,166}
local	float	___337_ns	%read{17,166} %write{17,166}
local	point	___337_noisePoint	%read{17,166} %write{17,166}
local	point	___338_distort	%read{17,166} %write{17,166}
const	string	$const1	"object"		%read{1,1} %write{2147483647,-1}
const	string	$const2	"transform"		%read{0,0} %write{2147483647,-1}
const	string	$const3	"common"		%read{1,1} %write{2147483647,-1}
const	int	$const4	0		%read{3,162} %write{2147483647,-1}
const	float	$const5	1		%read{4,140} %write{2147483647,-1}
const	float	$const6	0		%read{8,74} %write{2147483647,-1}
temp	int	$tmp1	%read{12,12} %write{11,11}
temp	int	$tmp2	%read{15,166} %write{16,166}
const	string	$const7	"perlin"		%read{22,40} %write{2147483647,-1}
temp	point	$tmp3	%read{17,166} %write{17,166}
temp	point	$tmp4	%read{17,166} %write{17,166}
const	int	$const8	-1		%read{26,62} %write{2147483647,-1}
temp	int	$tmp5	%read{17,166} %write{17,166}
const	string	$const9	"usimplex"		%read{30,30} %write{2147483647,-1}
temp	float	$tmp6	%read{17,166} %write{17,166}
temp	float	$tmp7	%read{17,166} %write{17,166}
temp	int	$tmp8	%read{17,166} %write{17,166}
const	string	$const10	"uperlin"		%read{35,35} %write{2147483647,-1}
temp	float	$tmp9	%read{17,166} %write{17,166}
temp	float	$tmp10	%read{17,166} %write{17,166}
const	int	$const11	1		%read{36,166} %write{2147483647,-1}
temp	int	$tmp11	%read{17,166} %write{17,166}
temp	float	$tmp12	%read{17,166} %write{17,166}
temp	float	$tmp13	%read{17,166} %write{17,166}
temp	float	$tmp14	%read{17,166} %write{17,166}
const	int	$const12	2		%read{42,154} %write{2147483647,-1}
temp	int	$tmp15	%read{17,166} %write{17,166}
const	string	$const13	"cell"		%read{46,46} %write{2147483647,-1}
temp	float	$tmp16	%read{17,166} %write{17,166}
temp	float	$tmp17	%read{17,166} %write{17,166}
temp	float	$tmp18	%read{17,166} %write{17,166}
temp	float	$tmp19	%read{17,166} %write{17,166}
const	int	$const14	3		%read{49,98} %write{2147483647,-1}
temp	int	$tmp20	%read{17,166} %write{17,166}
const	string	$const15	"WorleyNoise"		%read{50,50} %write{2147483647,-1}
const	int	$const16	1000		%read{51,51} %write{2147483647,-1}
const	float	$const17	0.5		%read{52,70} %write{2147483647,-1}
temp	point	$tmp21	%read{17,166} %write{17,166}
temp	int	$tmp22	%read{17,166} %write{17,166}
temp	int	$tmp23	%read{17,166} %write{17,166}
temp	int	$tmp24	%read{17,166} %write{17,166}
temp	vector	$tmp25	%read{17,166} %write{17,166}
temp	float	$tmp26	%read{17,166} %write{17,166}
temp	float	$tmp27	%read{17,166} %write{17,166}
temp	float	$tmp28	%read{17,166} %write{17,166}
temp	float	$tmp29	%read{17,166} %write{17,166}
temp	float	$tmp30	%read{17,166} %write{17,166}
temp	point	$tmp31	%read{17,166} %write{17,166}
temp	int	$tmp32	%read{17,166} %write{17,166}
temp	int	$tmp33	%read{17,166} %write{17,166}
temp	float	$tmp34	%read{17,166} %write{17,166}
temp	float	$tmp35	%read{17,166} %write{17,166}
temp	float	$tmp36	%read{17,166} %write{17,166}
temp	float	$tmp37	%read{17,166} %write{17,166}
temp	float	$tmp38	%read{17,166} %write{17,166}
temp	float	$tmp39	%read{17,166} %write{17,166}
temp	float	$tmp40	%read{17,166} %write{17,166}
temp	int	$tmp41	%read{17,166} %write{17,166}
temp	float	$tmp42	%read{17,166} %write{17,166}
temp	float	$tmp43	%read{17,166} %write{17,166}
temp	float	$tmp44	%read{17,166} %write{17,166}
temp	float	$tmp45	%read{17,166} %write{17,166}
temp	int	$tmp46	%read{17,166} %write{17,166}
temp	float	$tmp47	%read{17,166} %write{17,166}
temp	float	$tmp48	%read{17,166} %write{17,166}
temp	float	$tmp49	%read{17,166} %write{17,166}
temp	float	$tmp50	%read{17,166} %write{17,166}
temp	float	$tmp51	%read{17,166} %write{17,166}
temp	float	$tmp52	%read{17,166} %write{17,166}
temp	float	$tmp53	%read{17,166} %write{17,166}
temp	float	$tmp54	%read{17,166} %write{17,166}
temp	float	$tmp55	%read{17,166} %write{17,166}
temp	float	$tmp56	%read{17,166} %write{17,166}
const	int	$const18	4		%read{111,111} %write{2147483647,-1}
temp	int	$tmp57	%read{17,166} %write{17,166}
temp	float	$tmp58	%read{17,166} %write{17,166}
temp	float	$tmp59	%read{17,166} %write{17,166}
temp	float	$tmp60	%read{17,166} %write{17,166}
temp	float	$tmp61	%read{17,166} %write{17,166}
temp	float	$tmp62	%read{17,166} %write{17,166}
temp	float	$tmp63	%read{17,166} %write{17,166}
temp	float	$tmp64	%read{17,166} %write{17,166}
temp	float	$tmp65	%read{17,166} %write{17,166}
temp	float	$tmp66	%read{17,166} %write{17,166}
temp	float	$tmp67	%read{17,166} %write{17,166}
temp	float	$tmp68	%read{17,166} %write{17,166}
temp	int	$tmp69	%read{17,166} %write{17,166}
temp	int	$tmp70	%read{2147483647,-1} %write{17,166}
temp	int	$tmp71	%read{2147483647,-1} %write{17,166}
temp	int	$tmp72	%read{2147483647,-1} %write{17,166}
const	float	$const19	1.4141999		%read{139,139} %write{2147483647,-1}
temp	float	$tmp73	%read{17,166} %write{17,166}
temp	int	$tmp74	%read{17,166} %write{17,166}
temp	float	$tmp75	%read{17,166} %write{17,166}
temp	int	$tmp76	%read{17,166} %write{17,166}
temp	float	$tmp77	%read{17,166} %write{17,166}
temp	float	$tmp78	%read{17,166} %write{17,166}
temp	int	$tmp79	%read{17,166} %write{17,166}
temp	float	$tmp80	%read{17,166} %write{17,166}
temp	int	$tmp81	%read{17,166} %write{17,166}
temp	int	$tmp82	%read{2147483647,-1} %write{17,166}
temp	float	$tmp83	%read{169,169} %write{168,168}
code UVW
# source/3dsMax-OSL-Shaders/UberNoise.osl:98
# 		[[ string help = "The UVW coordinate to use. When not connected, defaults to Object space" ]],	
	functioncall	$const2 2 	%filename{"source/3dsMax-OSL-Shaders/UberNoise.osl"} %line{98} %argrw{"r"}
# /opt/gaffer-0.58.0.1-linux/shaders/stdosl.h:267
# point  transform (string to, point p)  { return transform("common",to,p); }
	transform	UVW $const3 $const1 P 	%filename{"/opt/gaffer-0.58.0.1-linux/shaders/stdosl.h"} %line{267} %argrw{"wrrr"}
code ___main___
# source/3dsMax-OSL-Shaders/UberNoise.osl:187
# 	
	div		pnt UVW Scale 	%filename{"source/3dsMax-OSL-Shaders/UberNoise.osl"} %line{187} %argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:189
# 	float curFreq  = 1.0;
	assign		sum $const4 	%line{189} %argrw{"wr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:190
# 	float curAmp   = 1.0;
	assign		curFreq $const5 	%line{190} %argrw{"wr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:191
# 	float curPhase = Phase;
	assign		curAmp $const5 	%line{191} %argrw{"wr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:192
# 	
	assign		curPhase Phase 	%line{192} %argrw{"wr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:194
# 	
	assign		curDistFreq LayerDistScale 	%line{194} %argrw{"wr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:196
# 
	assign		result $const6 	%line{196} %argrw{"wr"}
	assign		lastResult $const5 	%argrw{"wr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:198
# 	
	assign		cellpoint $const4 	%line{198} %argrw{"wr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:200
# 	{
	gt		$tmp1 Mode $const4 	%line{200} %argrw{"wrr"}
	if		$tmp1 15 15 	%argrw{"r"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:202
# 		result = 1.0;
	assign		sum $const5 	%line{202} %argrw{"wr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:203
# 	}
	assign		result $const5 	%line{203} %argrw{"wr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:207
# 	{			
	for		$tmp2 17 18 165 167 	%line{207} %argrw{"r"}
	assign		___336_i $const4 	%argrw{"wr"}
	lt		$tmp2 ___336_i Iterations 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:212
# 
	assign		___337_ns $const6 	%line{212} %argrw{"wr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:214
# 
	mul		___337_noisePoint pnt curFreq 	%line{214} %argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:217
# 		{
	if		LayerDistort 26 26 	%line{217} %argrw{"r"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:222
# 			noisePoint += distort * LayerDistAmount;
	mul		$tmp3 pnt curDistFreq 	%line{222} %argrw{"wrr"}
	noise		___338_distort $const7 $tmp3 curPhase 	%argrw{"wrrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:223
# 			curDistFreq *= LayerDistRatio;
	mul		$tmp4 ___338_distort LayerDistAmount 	%line{223} %argrw{"wrr"}
	add		___337_noisePoint ___337_noisePoint $tmp4 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:224
# 		}
	mul		curDistFreq curDistFreq LayerDistRatio 	%line{224} %argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:227
# 			ns = noise("usimplex", noisePoint, curPhase + i);
	eq		$tmp5 Type $const8 	%line{227} %argrw{"wrr"}
	if		$tmp5 31 141 	%argrw{"r"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:228
# 		else if (Type == 0)
	assign		$tmp7 ___336_i 	%line{228} %argrw{"wr"}
	add		$tmp6 curPhase $tmp7 	%argrw{"wrr"}
	noise		___337_ns $const9 ___337_noisePoint $tmp6 	%argrw{"wrrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:229
# 			ns = noise("uperlin", noisePoint, curPhase + i);
	eq		$tmp8 Type $const4 	%line{229} %argrw{"wrr"}
	if		$tmp8 36 141 	%argrw{"r"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:230
# 		else if (Type == 1)
	assign		$tmp10 ___336_i 	%line{230} %argrw{"wr"}
	add		$tmp9 curPhase $tmp10 	%argrw{"wrr"}
	noise		___337_ns $const10 ___337_noisePoint $tmp9 	%argrw{"wrrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:231
# 			ns = fabs(noise("perlin", noisePoint, curPhase + i)); 
	eq		$tmp11 Type $const11 	%line{231} %argrw{"wrr"}
	if		$tmp11 42 141 	%argrw{"r"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:232
# 		else if (Type == 2)
	assign		$tmp14 ___336_i 	%line{232} %argrw{"wr"}
	add		$tmp13 curPhase $tmp14 	%argrw{"wrr"}
	noise		$tmp12 $const7 ___337_noisePoint $tmp13 	%argrw{"wrrr"}
	fabs		___337_ns $tmp12 	%argrw{"wr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:233
# 			ns = noise("cell", noisePoint, curPhase + i);
	eq		$tmp15 Type $const12 	%line{233} %argrw{"wrr"}
	if		$tmp15 47 141 	%argrw{"r"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:234
# 		else 
	assign		$tmp17 ___336_i 	%line{234} %argrw{"wr"}
	add		$tmp16 curPhase $tmp17 	%argrw{"wrr"}
	noise		___337_ns $const13 ___337_noisePoint $tmp16 	%argrw{"wrrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:236
# 		
	assign		$tmp19 ___336_i 	%line{236} %argrw{"wr"}
	add		$tmp18 curPhase $tmp19 	%argrw{"wrr"}
	sub		$tmp20 Type $const14 	%argrw{"wrr"}
	functioncall	$const15 141 	%argrw{"r"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:13
# 	point  cellpnt = floor(pnt+0.5);		
	assign		___322_closestdist $const16 	%line{13} %argrw{"wr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:14
# 	vector offset  = pnt - cellpnt;
	add		$tmp21 ___337_noisePoint $const17 	%line{14} %argrw{"wrr"}
	floor		___322_cellpnt $tmp21 	%argrw{"wr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:15
# 
	sub		___322_offset ___337_noisePoint ___322_cellpnt 	%line{15} %argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:17
# 	{
	for		$tmp22 57 58 137 139 	%line{17} %argrw{"r"}
	assign		___323_x $const8 	%argrw{"wr"}
	le		$tmp22 ___323_x $const11 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:19
# 		{
	for		$tmp23 60 61 135 137 	%line{19} %argrw{"r"}
	assign		___325_y $const8 	%argrw{"wr"}
	le		$tmp23 ___325_y $const11 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:21
# 			{
	for		$tmp24 63 64 133 135 	%line{21} %argrw{"r"}
	assign		___327_z $const8 	%argrw{"wr"}
	le		$tmp24 ___327_z $const11 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:23
# 				float  distort = cellnoise(base, phase) - 0.5;
	assign		$tmp26 ___323_x 	%line{23} %argrw{"wr"}
	assign		$tmp27 ___325_y 	%argrw{"wr"}
	assign		$tmp28 ___327_z 	%argrw{"wr"}
	vector		$tmp25 $tmp26 $tmp27 $tmp28 	%argrw{"wrrr"}
	add		___328_base ___322_cellpnt $tmp25 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:24
# 
	cellnoise	$tmp29 ___328_base $tmp18 	%line{24} %argrw{"wrr"}
	sub		___328_distort $tmp29 $const17 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:29
# 				
	mul		$tmp30 ___328_distort WorleyJitter 	%line{29} %argrw{"wrr"}
	add		$tmp31 ___328_base $tmp30 	%argrw{"wrr"}
	sub		___328_dist ___337_noisePoint $tmp31 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:31
# 				
	assign		___328_d $const6 	%line{31} %argrw{"wr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:38
# 				{
	eq		$tmp32 $tmp20 $const4 	%line{38} %argrw{"wrr"}
	if		$tmp32 78 128 	%argrw{"r"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:41
# 				}
	dot		___328_d ___328_dist ___328_dist 	%line{41} %argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:45
# 				{
	eq		$tmp33 $tmp20 $const11 	%line{45} %argrw{"wrr"}
	if		$tmp33 88 128 	%argrw{"r"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:47
# 				}
	compref		$tmp35 ___328_dist $const4 	%line{47} %argrw{"wrr"}
	abs		$tmp34 $tmp35 	%argrw{"wr"}
	compref		$tmp37 ___328_dist $const11 	%argrw{"wrr"}
	abs		$tmp36 $tmp37 	%argrw{"wr"}
	add		$tmp38 $tmp34 $tmp36 	%argrw{"wrr"}
	compref		$tmp40 ___328_dist $const12 	%argrw{"wrr"}
	abs		$tmp39 $tmp40 	%argrw{"wr"}
	add		___328_d $tmp38 $tmp39 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:49
# 				{
	eq		$tmp41 $tmp20 $const12 	%line{49} %argrw{"wrr"}
	if		$tmp41 98 128 	%argrw{"r"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:51
# 					float y = abs(dist[1]);
	compref		$tmp42 ___328_dist $const4 	%line{51} %argrw{"wrr"}
	abs		___331_x $tmp42 	%argrw{"wr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:52
# 					float z = abs(dist[2]);
	compref		$tmp43 ___328_dist $const11 	%line{52} %argrw{"wrr"}
	abs		___331_y $tmp43 	%argrw{"wr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:53
# 					d = max(z,max(x,y));
	compref		$tmp44 ___328_dist $const12 	%line{53} %argrw{"wrr"}
	abs		___331_z $tmp44 	%argrw{"wr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:54
# 				}
	max		$tmp45 ___331_x ___331_y 	%line{54} %argrw{"wrr"}
	max		___328_d ___331_z $tmp45 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:56
# 				{
	eq		$tmp46 $tmp20 $const14 	%line{56} %argrw{"wrr"}
	if		$tmp46 111 128 	%argrw{"r"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:58
# 				}
	compref		$tmp49 ___328_dist $const4 	%line{58} %argrw{"wrr"}
	abs		$tmp48 $tmp49 	%argrw{"wr"}
	sqrt		$tmp47 $tmp48 	%argrw{"wr"}
	compref		$tmp52 ___328_dist $const11 	%argrw{"wrr"}
	abs		$tmp51 $tmp52 	%argrw{"wr"}
	sqrt		$tmp50 $tmp51 	%argrw{"wr"}
	add		$tmp53 $tmp47 $tmp50 	%argrw{"wrr"}
	compref		$tmp56 ___328_dist $const12 	%argrw{"wrr"}
	abs		$tmp55 $tmp56 	%argrw{"wr"}
	sqrt		$tmp54 $tmp55 	%argrw{"wr"}
	add		___328_d $tmp53 $tmp54 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:60
# 				{
	eq		$tmp57 $tmp20 $const18 	%line{60} %argrw{"wrr"}
	if		$tmp57 128 128 	%argrw{"r"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:62
# 					float y = dist[1]*dist[1];
	compref		$tmp58 ___328_dist $const4 	%line{62} %argrw{"wrr"}
	compref		$tmp59 ___328_dist $const4 	%argrw{"wrr"}
	mul		___333_x $tmp58 $tmp59 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:63
# 					float z = dist[2]*dist[2];				
	compref		$tmp60 ___328_dist $const11 	%line{63} %argrw{"wrr"}
	compref		$tmp61 ___328_dist $const11 	%argrw{"wrr"}
	mul		___333_y $tmp60 $tmp61 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:64
# 					d = sqrt(x*x + y*y + z*z);
	compref		$tmp62 ___328_dist $const12 	%line{64} %argrw{"wrr"}
	compref		$tmp63 ___328_dist $const12 	%argrw{"wrr"}
	mul		___333_z $tmp62 $tmp63 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:65
# 				}
	mul		$tmp64 ___333_x ___333_x 	%line{65} %argrw{"wrr"}
	mul		$tmp65 ___333_y ___333_y 	%argrw{"wrr"}
	add		$tmp66 $tmp64 $tmp65 	%argrw{"wrr"}
	mul		$tmp67 ___333_z ___333_z 	%argrw{"wrr"}
	add		$tmp68 $tmp66 $tmp67 	%argrw{"wrr"}
	sqrt		___328_d $tmp68 	%argrw{"wr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:72
# 				
	pow		___328_d ___328_d WorleyPower 	%line{72} %argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:75
# 				{
	lt		$tmp69 ___328_d ___322_closestdist 	%line{75} %argrw{"wrr"}
	if		$tmp69 133 133 	%argrw{"r"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:77
# 					closestdist  = d;
	assign		cellpoint ___328_base 	%line{77} %argrw{"wr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:78
# 				}
	assign		___322_closestdist ___328_d 	%line{78} %argrw{"wr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:21
# 			{
	assign		$tmp70 ___327_z 	%line{21} %argrw{"wr"}
	add		___327_z ___327_z $const11 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:19
# 		{
	assign		$tmp71 ___325_y 	%line{19} %argrw{"wr"}
	add		___325_y ___325_y $const11 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:17
# 	{
	assign		$tmp72 ___323_x 	%line{17} %argrw{"wr"}
	add		___323_x ___323_x $const11 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:86
# }
	div		$tmp73 ___322_closestdist $const19 	%line{86} %argrw{"wrr"}
	sub		___337_ns $const5 $tmp73 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:238
# 			ns = smoothstep(LayerLowStep, LayerHiStep, ns);
	if		LayerStepFunction 143 143 	%line{238} %argrw{"r"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:239
# 
	smoothstep	___337_ns LayerLowStep LayerHiStep ___337_ns 	%line{239} %argrw{"wrrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:241
# 		{
	eq		$tmp74 Mode $const4 	%line{241} %argrw{"wrr"}
	if		$tmp74 148 159 	%argrw{"r"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:244
# 			// Add the amplitude to the normalizing sum
	mul		$tmp75 ___337_ns curAmp 	%line{244} %argrw{"wrr"}
	add		result result $tmp75 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:246
# 		}
	add		sum sum curAmp 	%line{246} %argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:248
# 		{
	eq		$tmp76 Mode $const11 	%line{248} %argrw{"wrr"}
	if		$tmp76 154 159 	%argrw{"r"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:251
# 			// Add the amplitude to the normalizing sum
	mul		$tmp77 ___337_ns curAmp 	%line{251} %argrw{"wrr"}
	mul		$tmp78 $tmp77 lastResult 	%argrw{"wrr"}
	add		result result $tmp78 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:253
# 		}
	add		sum sum curAmp 	%line{253} %argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:255
# 		{
	eq		$tmp79 Mode $const12 	%line{255} %argrw{"wrr"}
	if		$tmp79 159 159 	%argrw{"r"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:258
# 			// Make the sum the product instead
	mul		$tmp80 ___337_ns curAmp 	%line{258} %argrw{"wrr"}
	mul		result result $tmp80 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:260
# 		}
	mul		sum sum curAmp 	%line{260} %argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:264
# 
	assign		lastResult ___337_ns 	%line{264} %argrw{"wr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:267
# 		curAmp  *= Gain;		
	mul		curFreq curFreq Lacunarity 	%line{267} %argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:268
# 		
	mul		curAmp curAmp Gain 	%line{268} %argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:270
# 		{
	eq		$tmp81 ___336_i $const4 	%line{270} %argrw{"wrr"}
	if		$tmp81 165 165 	%argrw{"r"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:272
# 		}
	assign		CellCenter cellpoint 	%line{272} %argrw{"wr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:207
# 	{			
	assign		$tmp82 ___336_i 	%line{207} %argrw{"wr"}
	add		___336_i ___336_i $const11 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:276
# 		result /= sum / Amplitude;
	if		Normalize 170 171 	%line{276} %argrw{"r"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:277
# 	else
	div		$tmp83 sum Amplitude 	%line{277} %argrw{"wrr"}
	div		result result $tmp83 	%argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:279
# 
	mul		result result Amplitude 	%line{279} %argrw{"wrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:281
# 		result = smoothstep(OutputLowStep, OutputHiStep, result);
	if		OutputStepFunction 173 173 	%line{281} %argrw{"r"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:282
# 
	smoothstep	result OutputLowStep OutputHiStep result 	%line{282} %argrw{"wrrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:285
# 	Color = mix(A, B, result);
	assign		Float result 	%line{285} %argrw{"wr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:286
# 	CellRandomness = noise(CellCenter);
	mix		Color A B result 	%line{286} %argrw{"wrrr"}
# source/3dsMax-OSL-Shaders/UberNoise.osl:287
# }
	noise		CellRandomness CellCenter 	%line{287} %argrw{"wr"}
	end
