import Gaffer
import GafferOSL
import GafferScene
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 0, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 58, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 0, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 1, persistent=False )

__children = {}

__children["OSLObject"] = GafferOSL.OSLObject( "OSLObject" )
parent.addChild( __children["OSLObject"] )
__children["OSLObject"]["primitiveVariables"].addChild( Gaffer.NameValuePlug( "customUV", Gaffer.V3fPlug( "value", defaultValue = imath.V3f( 0, 0, 0 ), interpretation = IECore.GeometricData.Interpretation.UV ), True, "primitiveVariable", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["OSLObject"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["out"] = GafferScene.ScenePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["out"] )
__children["in"] = GafferScene.ScenePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["in"] )
__children["MultiplyColor"] = GafferOSL.OSLShader( "MultiplyColor" )
parent.addChild( __children["MultiplyColor"] )
__children["MultiplyColor"].loadShader( "Maths/MultiplyColor" )
__children["MultiplyColor"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["InUV"] = GafferOSL.OSLShader( "InUV" )
parent.addChild( __children["InUV"] )
__children["InUV"].loadShader( "ObjectProcessing/InUV" )
__children["InUV"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["PathFilter"] = GafferScene.PathFilter( "PathFilter" )
parent.addChild( __children["PathFilter"] )
__children["PathFilter"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOut"] = Gaffer.BoxOut( "BoxOut" )
parent.addChild( __children["BoxOut"] )
__children["BoxOut"].setup( GafferScene.ScenePlug( "in", ) )
__children["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxIn"] = Gaffer.BoxIn( "BoxIn" )
parent.addChild( __children["BoxIn"] )
__children["BoxIn"].setup( GafferScene.ScenePlug( "out", ) )
__children["BoxIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["uvSizeMultiplier"] = Gaffer.FloatPlug( "uvSizeMultiplier", defaultValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["uvSizeMultiplier"] )
__children["paths"] = Gaffer.StringVectorDataPlug( "paths", defaultValue = IECore.StringVectorData( [  ] ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["paths"] )
__children["OSLObject"]["in"].setInput( __children["BoxIn"]["out"] )
__children["OSLObject"]["filter"].setInput( __children["PathFilter"]["out"] )
__children["OSLObject"]["interpolation"].setValue( 5 )
__children["OSLObject"]["primitiveVariables"]["primitiveVariable"]["name"].setValue( 'uv' )
__children["OSLObject"]["primitiveVariables"]["primitiveVariable"]["value"].setInput( __children["MultiplyColor"]["out"]["out"] )
__children["OSLObject"]["__uiPosition"].setValue( imath.V2f( 3.75171089, -17.5000076 ) )
__children["out"].setInput( __children["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["out"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["in"], 'description', 'The input scene' )
Gaffer.Metadata.registerValue( __children["in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["in"], 'noduleLayout:spacing', 2.0 )
__children["MultiplyColor"]["parameters"]["a"].setInput( __children["InUV"]["out"]["value"] )
__children["MultiplyColor"]["parameters"]["b"]["r"].setInput( __children["uvSizeMultiplier"] )
__children["MultiplyColor"]["parameters"]["b"]["g"].setInput( __children["MultiplyColor"]["parameters"]["b"]["r"] )
__children["MultiplyColor"]["parameters"]["b"]["b"].setInput( __children["MultiplyColor"]["parameters"]["b"]["r"] )
__children["MultiplyColor"]["__uiPosition"].setValue( imath.V2f( -10.963377, -16.9000015 ) )
__children["InUV"]["__uiPosition"].setValue( imath.V2f( -20.465086, -16.2999954 ) )
__children["PathFilter"]["paths"].setInput( __children["paths"] )
__children["PathFilter"]["__uiPosition"].setValue( imath.V2f( 16.8000031, -12.2000017 ) )
__children["BoxOut"]["in"].setInput( __children["OSLObject"]["out"] )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'description', 'The processed output scene.' )
__children["BoxOut"]["__uiPosition"].setValue( imath.V2f( 5.25091457, -25.8320389 ) )
__children["BoxIn"]["__in"].setInput( __children["in"] )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'description', 'The input scene' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'noduleLayout:spacing', 2.0 )
__children["BoxIn"]["__uiPosition"].setValue( imath.V2f( 3.75250602, -9.16797638 ) )
Gaffer.Metadata.registerValue( __children["uvSizeMultiplier"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["uvSizeMultiplier"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["uvSizeMultiplier"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["uvSizeMultiplier"], 'noduleLayout:label', 'b.r' )
Gaffer.Metadata.registerValue( __children["uvSizeMultiplier"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["paths"], 'description', 'The list of paths to the locations to be matched by the filter.\nA path is formed by a sequence of names separated by \'/\', and\nspecifies the hierarchical position of a location within the scene.\nPaths may use Gaffer\'s standard wildcard characters to match\nmultiple locations.\n\nThe \'*\' wildcard matches any sequence of characters within\nan individual name, but never matches across names separated\nby a \'/\'.\n\n - /robot/*Arm matches /robot/leftArm, /robot/rightArm and\n   /robot/Arm. But does not match /robot/limbs/leftArm or\n   /robot/arm.\n\nThe "..." wildcard matches any sequence of names, and can be\nused to match locations no matter where they are parented in\nthe hierarchy.\n\n - /.../house matches /house, /street/house and /city/street/house.' )
Gaffer.Metadata.registerValue( __children["paths"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["paths"], 'ui:scene:acceptsPaths', True )
Gaffer.Metadata.registerValue( __children["paths"], 'vectorDataPlugValueWidget:dragPointer', 'objects' )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonTop:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonBottom:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonLeft:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonRight:visible', False )


del __children

