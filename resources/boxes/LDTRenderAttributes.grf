import Gaffer
import GafferArnold
import GafferScene
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 0, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 58, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 0, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 1, persistent=False )

__children = {}

__children["in"] = GafferScene.ScenePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["in"] )
__children["Filter"] = GafferScene.PathFilter( "Filter" )
parent.addChild( __children["Filter"] )
__children["Filter"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ArnoldAttributes"] = GafferArnold.ArnoldAttributes( "ArnoldAttributes" )
parent.addChild( __children["ArnoldAttributes"] )
__children["ArnoldAttributes"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["out"] = GafferScene.ScenePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["out"] )
__children["BoxIn"] = Gaffer.BoxIn( "BoxIn" )
parent.addChild( __children["BoxIn"] )
__children["BoxIn"].setup( GafferScene.ScenePlug( "out", ) )
__children["BoxIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOut"] = Gaffer.BoxOut( "BoxOut" )
parent.addChild( __children["BoxOut"] )
__children["BoxOut"].setup( GafferScene.ScenePlug( "in", ) )
__children["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Spreadsheet"] = Gaffer.Spreadsheet( "Spreadsheet" )
parent.addChild( __children["Spreadsheet"] )
__children["Spreadsheet"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:visibility:camera", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "cameraVisibility", Gaffer.Plug.Flags.Default ) )
__children["Spreadsheet"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:visibility:shadow", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "shadowVisibility", Gaffer.Plug.Flags.Default ) )
__children["Spreadsheet"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:visibility:diffuse_reflect", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "diffuseReflectionVisibility", Gaffer.Plug.Flags.Default ) )
__children["Spreadsheet"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:visibility:specular_reflect", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "specularReflectionVisibility", Gaffer.Plug.Flags.Default ) )
__children["Spreadsheet"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:visibility:diffuse_transmit", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "diffuseTransmissionVisibility", Gaffer.Plug.Flags.Default ) )
__children["Spreadsheet"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:visibility:specular_transmit", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "specularTransmissionVisibility", Gaffer.Plug.Flags.Default ) )
__children["Spreadsheet"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:visibility:volume", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "volumeVisibility", Gaffer.Plug.Flags.Default ) )
__children["Spreadsheet"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:visibility:subsurface", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "subsurfaceVisibility", Gaffer.Plug.Flags.Default ) )
__children["Spreadsheet"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:matte", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "matte", Gaffer.Plug.Flags.Default ) )
__children["Spreadsheet"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:receive_shadows", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "receiveShadows", Gaffer.Plug.Flags.Default ) )
__children["Spreadsheet"]["rows"].addColumn( Gaffer.Color3fPlug( "facingColorValue", defaultValue = imath.Color3f( 1, 0, 0 ), ) )
__children["Spreadsheet"]["rows"].addColumn( Gaffer.Color3fPlug( "grazingColorValue", defaultValue = imath.Color3f( 0, 0, 0 ), ) )
__children["Spreadsheet"]["rows"].addRows( 1 )
__children["Spreadsheet"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OpenGLAttributes"] = GafferScene.OpenGLAttributes( "OpenGLAttributes" )
parent.addChild( __children["OpenGLAttributes"] )
__children["OpenGLAttributes"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FacingRatio"] = GafferScene.OpenGLShader( "FacingRatio" )
parent.addChild( __children["FacingRatio"] )
__children["FacingRatio"].loadShader( "FacingRatio" )
__children["FacingRatio"]["parameters"].addChild( Gaffer.Color3fPlug( "facingColor", defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FacingRatio"]["parameters"].addChild( Gaffer.Color3fPlug( "grazingColor", defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["FacingRatio"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ShaderAssignment1"] = GafferScene.ShaderAssignment( "ShaderAssignment1" )
parent.addChild( __children["ShaderAssignment1"] )
__children["ShaderAssignment1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["activeRowNames"] = Gaffer.StringVectorDataPlug( "activeRowNames", direction = Gaffer.Plug.Direction.Out, defaultValue = IECore.StringVectorData( [  ] ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["activeRowNames"] )
__children["rows"] = Gaffer.Spreadsheet.RowsPlug( "rows", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["rows"] )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:visibility:camera", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "cameraVisibility", Gaffer.Plug.Flags.Default ) )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:visibility:shadow", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "shadowVisibility", Gaffer.Plug.Flags.Default ) )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:visibility:diffuse_reflect", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "diffuseReflectionVisibility", Gaffer.Plug.Flags.Default ) )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:visibility:specular_reflect", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "specularReflectionVisibility", Gaffer.Plug.Flags.Default ) )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:visibility:diffuse_transmit", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "diffuseTransmissionVisibility", Gaffer.Plug.Flags.Default ) )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:visibility:specular_transmit", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "specularTransmissionVisibility", Gaffer.Plug.Flags.Default ) )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:visibility:volume", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "volumeVisibility", Gaffer.Plug.Flags.Default ) )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:visibility:subsurface", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "subsurfaceVisibility", Gaffer.Plug.Flags.Default ) )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:matte", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "matte", Gaffer.Plug.Flags.Default ) )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:receive_shadows", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "receiveShadows", Gaffer.Plug.Flags.Default ) )
__children["rows"].addColumn( Gaffer.Color3fPlug( "facingColorValue", defaultValue = imath.Color3f( 1, 0, 0 ), ) )
__children["rows"].addColumn( Gaffer.Color3fPlug( "grazingColorValue", defaultValue = imath.Color3f( 0, 0, 0 ), ) )
__children["rows"].addRows( 1 )
__children["ShaderTweaks10"] = GafferScene.ShaderTweaks( "ShaderTweaks10" )
parent.addChild( __children["ShaderTweaks10"] )
__children["ShaderTweaks10"]["tweaks"].addChild( GafferScene.TweakPlug( Gaffer.Color3fPlug( "value", defaultValue = imath.Color3f( 1, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "facingColor", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ShaderTweaks10"]["tweaks"].addChild( GafferScene.TweakPlug( Gaffer.Color3fPlug( "value", defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), "grazingColor", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ShaderTweaks10"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["enabled"] = Gaffer.BoolPlug( "enabled", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["enabled"] )
__children["viewportDebug"] = Gaffer.BoolPlug( "viewportDebug", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["viewportDebug"] )
__children["Dot"] = Gaffer.Dot( "Dot" )
parent.addChild( __children["Dot"] )
__children["Dot"].setup( GafferScene.ScenePlug( "in", ) )
__children["Dot"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Dot1"] = Gaffer.Dot( "Dot1" )
parent.addChild( __children["Dot1"] )
__children["Dot1"].setup( GafferScene.ScenePlug( "in", ) )
__children["Dot1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
Gaffer.Metadata.registerValue( __children["in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["in"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["in"], 'labelPlugValueWidget:renameable', True )
Gaffer.Metadata.registerValue( __children["in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["in"], 'description', 'The input scene' )
Gaffer.Metadata.registerValue( __children["in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["in"], 'noduleLayout:spacing', 2.0 )
Gaffer.Metadata.registerValue( __children["in"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["in"], 'layout:index', 0 )
__children["Filter"]["paths"].setInput( __children["Spreadsheet"]["activeRowNames"] )
__children["Filter"]["__uiPosition"].setValue( imath.V2f( 510.302307, -44.0766869 ) )
__children["ArnoldAttributes"]["in"].setInput( __children["ShaderTweaks10"]["out"] )
__children["ArnoldAttributes"]["filter"].setInput( __children["Filter"]["out"] )
__children["ArnoldAttributes"]["attributes"]["cameraVisibility"].setInput( __children["Spreadsheet"]["out"]["cameraVisibility"] )
__children["ArnoldAttributes"]["attributes"]["shadowVisibility"].setInput( __children["Spreadsheet"]["out"]["shadowVisibility"] )
__children["ArnoldAttributes"]["attributes"]["diffuseReflectionVisibility"].setInput( __children["Spreadsheet"]["out"]["diffuseReflectionVisibility"] )
__children["ArnoldAttributes"]["attributes"]["specularReflectionVisibility"].setInput( __children["Spreadsheet"]["out"]["specularReflectionVisibility"] )
__children["ArnoldAttributes"]["attributes"]["diffuseTransmissionVisibility"].setInput( __children["Spreadsheet"]["out"]["diffuseTransmissionVisibility"] )
__children["ArnoldAttributes"]["attributes"]["specularTransmissionVisibility"].setInput( __children["Spreadsheet"]["out"]["specularTransmissionVisibility"] )
__children["ArnoldAttributes"]["attributes"]["volumeVisibility"].setInput( __children["Spreadsheet"]["out"]["volumeVisibility"] )
__children["ArnoldAttributes"]["attributes"]["subsurfaceVisibility"].setInput( __children["Spreadsheet"]["out"]["subsurfaceVisibility"] )
__children["ArnoldAttributes"]["attributes"]["matte"].setInput( __children["Spreadsheet"]["out"]["matte"] )
__children["ArnoldAttributes"]["attributes"]["receiveShadows"].setInput( __children["Spreadsheet"]["out"]["receiveShadows"] )
__children["ArnoldAttributes"]["__uiPosition"].setValue( imath.V2f( 501.191895, -67.3526688 ) )
__children["out"].setInput( __children["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["out"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:index', 1 )
__children["BoxIn"]["__in"].setInput( __children["in"] )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'labelPlugValueWidget:renameable', True )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'description', 'The input scene' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'noduleLayout:spacing', 2.0 )
__children["BoxIn"]["__uiPosition"].setValue( imath.V2f( 501.191895, -35.4487724 ) )
__children["BoxOut"]["in"].setInput( __children["ArnoldAttributes"]["out"] )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'labelPlugValueWidget:renameable', True )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'description', 'The processed output scene.' )
__children["BoxOut"]["passThrough"].setInput( __children["Dot1"]["out"] )
__children["BoxOut"]["enabled"].setInput( __children["enabled"] )
__children["BoxOut"]["__uiPosition"].setValue( imath.V2f( 502.691895, -75.6847 ) )
Gaffer.Metadata.registerValue( __children["Spreadsheet"], 'nodeGadget:type', 'GafferUI::StandardNodeGadget' )
__children["Spreadsheet"]["selector"].setValue( '${scene:path}' )
__children["Spreadsheet"]["rows"].setInput( __children["rows"] )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"], 'spreadsheet:section:viewport:index', 2 )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"], 'spreadsheet:section:visibility:index', 0 )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"], 'spreadsheet:section:viewportShader:index', 3 )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"], 'spreadsheet:section:render:index', 1 )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["cameraVisibility"], 'spreadsheet:columnWidth', 50 )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["cameraVisibility"], 'spreadsheet:section', 'visibility' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["cameraVisibility"], 'spreadsheet:columnLabel', 'camera' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["cameraVisibility"]["value"], 'description', 'Whether or not the object is visible to camera\nrays. To hide an object completely, use the\nvisibility settings on the StandardAttributes\nnode instead.' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["cameraVisibility"]["value"], 'label', 'Camera' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["shadowVisibility"], 'spreadsheet:section', 'visibility' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["shadowVisibility"], 'spreadsheet:columnLabel', 'shadow' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["shadowVisibility"], 'spreadsheet:columnWidth', 52 )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["shadowVisibility"]["value"], 'description', 'Whether or not the object is visible to shadow\nrays (whether or not it casts shadows).' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["shadowVisibility"]["value"], 'label', 'Shadow' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["diffuseReflectionVisibility"], 'spreadsheet:section', 'visibility' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["diffuseReflectionVisibility"], 'spreadsheet:columnLabel', 'diffReflection' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["diffuseReflectionVisibility"], 'spreadsheet:columnWidth', 85 )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["diffuseReflectionVisibility"]["value"], 'description', 'Whether or not the object is visible in\nreflected diffuse ( ie. if it casts bounce light )' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["diffuseReflectionVisibility"]["value"], 'label', 'Diffuse Reflection' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["specularReflectionVisibility"], 'spreadsheet:section', 'visibility' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["specularReflectionVisibility"], 'spreadsheet:columnLabel', 'specReflection' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["specularReflectionVisibility"], 'spreadsheet:columnWidth', 91 )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["specularReflectionVisibility"]["value"], 'description', 'Whether or not the object is visible in\nreflected specular ( ie. if it is visible in mirrors ).' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["specularReflectionVisibility"]["value"], 'label', 'Specular Reflection' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["diffuseTransmissionVisibility"], 'spreadsheet:section', 'visibility' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["diffuseTransmissionVisibility"], 'spreadsheet:columnLabel', 'diffTransmission' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["diffuseTransmissionVisibility"], 'spreadsheet:columnWidth', 102 )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["diffuseTransmissionVisibility"]["value"], 'description', 'Whether or not the object is visible in\ntransmitted diffuse ( ie. if it casts light through leaves ).' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["diffuseTransmissionVisibility"]["value"], 'label', 'Diffuse Transmission' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["specularTransmissionVisibility"], 'spreadsheet:section', 'visibility' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["specularTransmissionVisibility"], 'spreadsheet:columnLabel', 'specTransmission' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["specularTransmissionVisibility"], 'spreadsheet:columnWidth', 109 )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["specularTransmissionVisibility"]["value"], 'description', 'Whether or not the object is visible in\nrefracted specular ( ie. if it can be seen through glass ).' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["specularTransmissionVisibility"]["value"], 'label', 'Specular Transmission' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["volumeVisibility"], 'spreadsheet:section', 'visibility' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["volumeVisibility"], 'spreadsheet:columnLabel', 'volume' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["volumeVisibility"], 'spreadsheet:columnWidth', 50 )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["volumeVisibility"]["value"], 'description', 'Whether or not the object is visible in\nvolume scattering.' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["volumeVisibility"]["value"], 'label', 'Volume' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["subsurfaceVisibility"], 'spreadsheet:section', 'visibility' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["subsurfaceVisibility"], 'spreadsheet:columnLabel', 'subsurfVisibility' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["subsurfaceVisibility"]["value"], 'description', 'Whether or not the object is visible to subsurface\nrays.' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["subsurfaceVisibility"]["value"], 'label', 'Subsurface' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["matte"], 'spreadsheet:section', 'render' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["matte"]["value"], 'description', 'Turns the object into a holdout matte.\nThis only affects primary (camera) rays.' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["receiveShadows"], 'spreadsheet:section', 'render' )
Gaffer.Metadata.registerValue( __children["Spreadsheet"]["rows"][0]["cells"]["receiveShadows"]["value"], 'description', 'Whether or not the object receives shadows.' )
__children["Spreadsheet"]["__uiPosition"].setValue( imath.V2f( 493.484619, -44.01651 ) )
__children["OpenGLAttributes"]["enabled"].setInput( __children["viewportDebug"] )
__children["OpenGLAttributes"]["in"].setInput( __children["BoxIn"]["out"] )
__children["OpenGLAttributes"]["filter"].setInput( __children["Filter"]["out"] )
__children["OpenGLAttributes"]["attributes"]["primitiveWireframeColor"]["enabled"].setInput( __children["OpenGLAttributes"]["attributes"]["primitiveWireframe"]["enabled"] )
__children["OpenGLAttributes"]["attributes"]["primitiveOutlineColor"]["enabled"].setInput( __children["OpenGLAttributes"]["attributes"]["primitiveOutline"]["enabled"] )
__children["OpenGLAttributes"]["__uiPosition"].setValue( imath.V2f( 501.191895, -50.3604813 ) )
__children["FacingRatio"]["parameters"]["facingColor"].setValue( imath.Color3f( 1, 1, 1 ) )
__children["FacingRatio"]["__uiPosition"].setValue( imath.V2f( 487.854492, -56.0245438 ) )
__children["ShaderAssignment1"]["enabled"].setInput( __children["viewportDebug"] )
__children["ShaderAssignment1"]["in"].setInput( __children["OpenGLAttributes"]["out"] )
__children["ShaderAssignment1"]["filter"].setInput( __children["Filter"]["out"] )
__children["ShaderAssignment1"]["shader"].setInput( __children["FacingRatio"]["out"] )
__children["ShaderAssignment1"]["__uiPosition"].setValue( imath.V2f( 501.191895, -56.0245438 ) )
__children["activeRowNames"].setInput( __children["Spreadsheet"]["activeRowNames"] )
Gaffer.Metadata.registerValue( __children["activeRowNames"], 'description', 'An output plug containing the names of all currently active rows.' )
Gaffer.Metadata.registerValue( __children["activeRowNames"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["activeRowNames"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["activeRowNames"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["activeRowNames"], 'layout:index', 3 )
__children["rows"][0]["cells"]["facingColorValue"]["value"].setValue( imath.Color3f( 0, 0, 0 ) )
__children["rows"][1]["name"].setValue( '/geo/armchair_geo/...' )
__children["rows"][1]["cells"]["facingColorValue"]["value"].setValue( imath.Color3f( 1, 0, 1 ) )
Gaffer.Metadata.registerValue( __children["rows"], 'description', 'Holds a child RowPlug for each row in the spreadsheet.' )
Gaffer.Metadata.registerValue( __children["rows"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["rows"], 'spreadsheet:section:visibility:index', 0 )
Gaffer.Metadata.registerValue( __children["rows"], 'spreadsheet:section:render:index', 1 )
Gaffer.Metadata.registerValue( __children["rows"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["rows"], 'layout:index', 4 )
Gaffer.Metadata.registerValue( __children["rows"], 'spreadsheet:section:viewportDebug:index', 2 )
__children["rows"].resetDefault()
Gaffer.Metadata.registerValue( __children["rows"][0], 'description', 'The default row. This provides output values when no other\nrow matches the `selector`.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["name"], 'description', "The name of the row. This is matched against the `selector`\nto determine which row is chosen to be passed to the output.\nMay contain multiple space separated names and any of Gaffer's\nstandard wildcards." )
Gaffer.Metadata.registerValue( __children["rows"][0]["enabled"], 'description', 'Enables or disables this row. Disabled rows are ignored.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"], 'description', 'Contains a child CellPlug for each column in the spreadsheet.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["cameraVisibility"], 'spreadsheet:columnWidth', 50 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["cameraVisibility"], 'spreadsheet:section', 'visibility' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["cameraVisibility"], 'spreadsheet:columnLabel', 'camera' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["cameraVisibility"]["value"], 'description', 'Whether or not the object is visible to camera\nrays. To hide an object completely, use the\nvisibility settings on the StandardAttributes\nnode instead.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["cameraVisibility"]["value"], 'label', 'Camera' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["cameraVisibility"]["value"]["name"], 'spreadsheet:columnName', 'name' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["cameraVisibility"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["cameraVisibility"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["shadowVisibility"], 'spreadsheet:section', 'visibility' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["shadowVisibility"], 'spreadsheet:columnLabel', 'shadow' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["shadowVisibility"], 'spreadsheet:columnWidth', 52 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["shadowVisibility"]["value"], 'description', 'Whether or not the object is visible to shadow\nrays (whether or not it casts shadows).' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["shadowVisibility"]["value"], 'label', 'Shadow' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["shadowVisibility"]["value"]["name"], 'spreadsheet:columnName', 'name' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["shadowVisibility"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["shadowVisibility"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["diffuseReflectionVisibility"], 'spreadsheet:section', 'visibility' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["diffuseReflectionVisibility"], 'spreadsheet:columnLabel', 'diffReflection' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["diffuseReflectionVisibility"], 'spreadsheet:columnWidth', 85 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["diffuseReflectionVisibility"]["value"], 'description', 'Whether or not the object is visible in\nreflected diffuse ( ie. if it casts bounce light )' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["diffuseReflectionVisibility"]["value"], 'label', 'Diffuse Reflection' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["diffuseReflectionVisibility"]["value"]["name"], 'spreadsheet:columnName', 'name' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["diffuseReflectionVisibility"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["diffuseReflectionVisibility"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["specularReflectionVisibility"], 'spreadsheet:section', 'visibility' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["specularReflectionVisibility"], 'spreadsheet:columnLabel', 'specReflection' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["specularReflectionVisibility"], 'spreadsheet:columnWidth', 91 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["specularReflectionVisibility"]["value"], 'description', 'Whether or not the object is visible in\nreflected specular ( ie. if it is visible in mirrors ).' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["specularReflectionVisibility"]["value"], 'label', 'Specular Reflection' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["specularReflectionVisibility"]["value"]["name"], 'spreadsheet:columnName', 'name' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["specularReflectionVisibility"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["specularReflectionVisibility"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["diffuseTransmissionVisibility"], 'spreadsheet:section', 'visibility' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["diffuseTransmissionVisibility"], 'spreadsheet:columnLabel', 'diffTransmission' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["diffuseTransmissionVisibility"], 'spreadsheet:columnWidth', 102 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["diffuseTransmissionVisibility"]["value"], 'description', 'Whether or not the object is visible in\ntransmitted diffuse ( ie. if it casts light through leaves ).' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["diffuseTransmissionVisibility"]["value"], 'label', 'Diffuse Transmission' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["diffuseTransmissionVisibility"]["value"]["name"], 'spreadsheet:columnName', 'name' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["diffuseTransmissionVisibility"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["diffuseTransmissionVisibility"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["specularTransmissionVisibility"], 'spreadsheet:section', 'visibility' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["specularTransmissionVisibility"], 'spreadsheet:columnLabel', 'specTransmission' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["specularTransmissionVisibility"], 'spreadsheet:columnWidth', 109 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["specularTransmissionVisibility"]["value"], 'description', 'Whether or not the object is visible in\nrefracted specular ( ie. if it can be seen through glass ).' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["specularTransmissionVisibility"]["value"], 'label', 'Specular Transmission' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["specularTransmissionVisibility"]["value"]["name"], 'spreadsheet:columnName', 'name' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["specularTransmissionVisibility"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["specularTransmissionVisibility"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["volumeVisibility"], 'spreadsheet:section', 'visibility' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["volumeVisibility"], 'spreadsheet:columnLabel', 'volume' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["volumeVisibility"], 'spreadsheet:columnWidth', 50 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["volumeVisibility"]["value"], 'description', 'Whether or not the object is visible in\nvolume scattering.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["volumeVisibility"]["value"], 'label', 'Volume' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["volumeVisibility"]["value"]["name"], 'spreadsheet:columnName', 'name' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["volumeVisibility"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["volumeVisibility"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subsurfaceVisibility"], 'spreadsheet:section', 'visibility' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subsurfaceVisibility"], 'spreadsheet:columnLabel', 'subsurfVisibility' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subsurfaceVisibility"]["value"], 'description', 'Whether or not the object is visible to subsurface\nrays.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subsurfaceVisibility"]["value"], 'label', 'Subsurface' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subsurfaceVisibility"]["value"]["name"], 'spreadsheet:columnName', 'name' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subsurfaceVisibility"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subsurfaceVisibility"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["matte"], 'spreadsheet:section', 'render' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["matte"]["value"], 'description', 'Turns the object into a holdout matte.\nThis only affects primary (camera) rays.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["matte"]["value"]["name"], 'spreadsheet:columnName', 'name' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["matte"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["matte"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["receiveShadows"], 'spreadsheet:section', 'render' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["receiveShadows"]["value"], 'description', 'Whether or not the object receives shadows.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["receiveShadows"]["value"]["name"], 'spreadsheet:columnName', 'name' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["receiveShadows"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["receiveShadows"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["facingColorValue"], 'spreadsheet:section', 'viewportDebug' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["facingColorValue"]["value"], 'nodule:color', imath.Color3f( 0.689999998, 0.537800014, 0.228300005 ) )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["facingColorValue"]["value"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["facingColorValue"]["value"], 'noduleLayout:label', 'facingColor' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["facingColorValue"]["value"]["r"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["facingColorValue"]["value"]["g"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["facingColorValue"]["value"]["b"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["grazingColorValue"], 'spreadsheet:section', 'viewportDebug' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["grazingColorValue"]["value"], 'nodule:color', imath.Color3f( 0.689999998, 0.537800014, 0.228300005 ) )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["grazingColorValue"]["value"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["grazingColorValue"]["value"], 'noduleLayout:label', 'grazingColor' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["grazingColorValue"]["value"]["r"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["grazingColorValue"]["value"]["g"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["grazingColorValue"]["value"]["b"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
__children["ShaderTweaks10"]["enabled"].setInput( __children["viewportDebug"] )
__children["ShaderTweaks10"]["in"].setInput( __children["ShaderAssignment1"]["out"] )
__children["ShaderTweaks10"]["filter"].setInput( __children["Filter"]["out"] )
__children["ShaderTweaks10"]["shader"].setValue( 'gl:surface' )
Gaffer.Metadata.registerValue( __children["ShaderTweaks10"]["shader"], 'presetsPlugValueWidget:isCustom', True )
__children["ShaderTweaks10"]["ignoreMissing"].setValue( True )
__children["ShaderTweaks10"]["tweaks"]["facingColor"]["name"].setValue( 'facingColor' )
__children["ShaderTweaks10"]["tweaks"]["grazingColor"]["name"].setValue( 'grazingColor' )
__children["ShaderTweaks10"]["tweaks"]["facingColor"]["value"].setInput( __children["Spreadsheet"]["out"]["facingColorValue"] )
__children["ShaderTweaks10"]["tweaks"]["grazingColor"]["value"].setInput( __children["Spreadsheet"]["out"]["grazingColorValue"] )
__children["ShaderTweaks10"]["__uiPosition"].setValue( imath.V2f( 501.191895, -61.6886063 ) )
Gaffer.Metadata.registerValue( __children["enabled"], 'layout:section', 'Node' )
Gaffer.Metadata.registerValue( __children["enabled"], 'layout:index', 5 )
Gaffer.Metadata.registerValue( __children["viewportDebug"], 'description', 'The on/off state of the node. When it is off, the node outputs the input scene unchanged.' )
Gaffer.Metadata.registerValue( __children["viewportDebug"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["viewportDebug"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["viewportDebug"], 'layout:index', 2 )
__children["Dot"]["in"].setInput( __children["BoxIn"]["out"] )
__children["Dot"]["__uiPosition"].setValue( imath.V2f( 518.922729, -42.9487724 ) )
__children["Dot1"]["in"].setInput( __children["Dot"]["out"] )
__children["Dot1"]["__uiPosition"].setValue( imath.V2f( 518.922729, -68.1847 ) )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonTop:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonBottom:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonLeft:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonRight:visible', False )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySections', IECore.StringVectorData( [  ] ) )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySectionIndices', IECore.IntVectorData( [  ] ) )
Gaffer.Metadata.registerValue( parent, 'icon', 'classVectorParameterHandle.png' )


del __children

