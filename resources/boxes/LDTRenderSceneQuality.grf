import Gaffer
import GafferArnold
import GafferScene
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 0, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 58, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 0, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 1, persistent=False )

__children = {}

__children["ArnoldOptions"] = GafferArnold.ArnoldOptions( "ArnoldOptions" )
parent.addChild( __children["ArnoldOptions"] )
__children["ArnoldOptions"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["out"] = GafferScene.ScenePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["out"] )
__children["in"] = GafferScene.ScenePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["in"] )
__children["SpreadsheetOptions"] = Gaffer.Spreadsheet( "SpreadsheetOptions" )
parent.addChild( __children["SpreadsheetOptions"] )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:ignore_textures", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "ignoreTextures", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:ignore_shaders", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "ignoreShaders", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:ignore_atmosphere", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "ignoreAtmosphere", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:ignore_lights", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "ignoreLights", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:ignore_shadows", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "ignoreShadows", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:ignore_subdivision", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "ignoreSubdivision", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:ignore_displacement", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "ignoreDisplacement", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:ignore_bump", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "ignoreBump", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:ignore_motion_blur", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "ignoreMotionBlur", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:ignore_sss", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "ignoreSSS", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:max_subdivisions", Gaffer.IntPlug( "value", defaultValue = 999, ), False, "maxSubdivisions", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:subdiv_dicing_camera", Gaffer.StringPlug( "value", defaultValue = '', ), False, "subdivDicingCamera", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:subdiv_frustum_culling", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "subdivFrustumCulling", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:subdiv_frustum_padding", Gaffer.FloatPlug( "value", defaultValue = 0.0, ), False, "subdivFrustumPadding", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:enable_adaptive_sampling", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "enableAdaptiveSampling", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:AA_samples_max", Gaffer.IntPlug( "value", defaultValue = 0, ), False, "aaSamplesMax", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:AA_adaptive_threshold", Gaffer.FloatPlug( "value", defaultValue = 0.05000000074505806, ), False, "aaAdaptiveThreshold", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:bucket_size", Gaffer.IntPlug( "value", defaultValue = 64, ), False, "bucketSize", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:bucket_scanning", Gaffer.StringPlug( "value", defaultValue = 'spiral', ), False, "bucketScanning", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:parallel_node_init", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "parallelNodeInit", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:threads", Gaffer.IntPlug( "value", defaultValue = 0, ), False, "threads", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:progressive_min_AA_samples", Gaffer.IntPlug( "value", defaultValue = -4, ), False, "progressiveMinAASamples", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:render_device", Gaffer.StringPlug( "value", defaultValue = 'CPU', ), False, "renderDevice", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:gpu_max_texture_resolution", Gaffer.IntPlug( "value", defaultValue = 0, ), False, "gpuMaxTextureResolution", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "render:resolution", Gaffer.V2iPlug( "value", defaultValue = imath.V2i( 1024, 778 ), ), False, "renderResolution", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "render:resolutionMultiplier", Gaffer.FloatPlug( "value", defaultValue = 1.0, ), False, "resolutionMultiplier", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "render:cameraBlur", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "cameraBlur", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "render:transformBlur", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "transformBlur", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "render:deformationBlur", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "deformationBlur", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "render:shutter", Gaffer.V2fPlug( "value", defaultValue = imath.V2f( -0.25, 0.25 ), ), False, "shutter", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "sampleMotion", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "sampleMotion", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:AA_samples", Gaffer.IntPlug( "value", defaultValue = 3, ), False, "aaSamples", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:GI_diffuse_samples", Gaffer.IntPlug( "value", defaultValue = 2, ), False, "giDiffuseSamples", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:GI_specular_samples", Gaffer.IntPlug( "value", defaultValue = 2, ), False, "giSpecularSamples", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:GI_transmission_samples", Gaffer.IntPlug( "value", defaultValue = 2, ), False, "giTransmissionSamples", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:GI_sss_samples", Gaffer.IntPlug( "value", defaultValue = 2, ), False, "giSSSSamples", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:GI_volume_samples", Gaffer.IntPlug( "value", defaultValue = 2, ), False, "giVolumeSamples", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:low_light_threshold", Gaffer.FloatPlug( "value", defaultValue = 0.0010000000474974513, ), False, "lowLightThreshold", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:GI_total_depth", Gaffer.IntPlug( "value", defaultValue = 10, ), False, "giTotalDepth", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:GI_diffuse_depth", Gaffer.IntPlug( "value", defaultValue = 2, ), False, "giDiffuseDepth", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:GI_specular_depth", Gaffer.IntPlug( "value", defaultValue = 2, ), False, "giSpecularDepth", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:GI_transmission_depth", Gaffer.IntPlug( "value", defaultValue = 2, ), False, "giTransmissionDepth", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:GI_volume_depth", Gaffer.IntPlug( "value", defaultValue = 0, ), False, "giVolumeDepth", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addColumn( Gaffer.NameValuePlug( "ai:auto_transparency_depth", Gaffer.IntPlug( "value", defaultValue = 10, ), False, "autoTransparencyDepth", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["SpreadsheetOptions"]["rows"].addRows( 4 )
__children["SpreadsheetOptions"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOut"] = Gaffer.BoxOut( "BoxOut" )
parent.addChild( __children["BoxOut"] )
__children["BoxOut"].setup( GafferScene.ScenePlug( "in", ) )
__children["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxIn"] = Gaffer.BoxIn( "BoxIn" )
parent.addChild( __children["BoxIn"] )
__children["BoxIn"].setup( GafferScene.ScenePlug( "out", ) )
__children["BoxIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["StandardOptions"] = GafferScene.StandardOptions( "StandardOptions" )
parent.addChild( __children["StandardOptions"] )
__children["StandardOptions"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["selector"] = Gaffer.StringPlug( "selector", defaultValue = '${scene:quality}', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, substitutions = IECore.StringAlgo.Substitutions.NoSubstitutions )
parent.addChild( __children["selector"] )
__children["rows"] = Gaffer.Spreadsheet.RowsPlug( "rows", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["rows"] )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:ignore_textures", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "ignoreTextures", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:ignore_shaders", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "ignoreShaders", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:ignore_atmosphere", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "ignoreAtmosphere", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:ignore_lights", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "ignoreLights", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:ignore_shadows", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "ignoreShadows", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:ignore_subdivision", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "ignoreSubdivision", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:ignore_displacement", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "ignoreDisplacement", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:ignore_bump", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "ignoreBump", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:ignore_motion_blur", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "ignoreMotionBlur", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:ignore_sss", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "ignoreSSS", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:max_subdivisions", Gaffer.IntPlug( "value", defaultValue = 999, ), False, "maxSubdivisions", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:subdiv_dicing_camera", Gaffer.StringPlug( "value", defaultValue = '', ), False, "subdivDicingCamera", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:subdiv_frustum_culling", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "subdivFrustumCulling", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:subdiv_frustum_padding", Gaffer.FloatPlug( "value", defaultValue = 0.0, ), False, "subdivFrustumPadding", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:enable_adaptive_sampling", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "enableAdaptiveSampling", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:AA_samples_max", Gaffer.IntPlug( "value", defaultValue = 0, ), False, "aaSamplesMax", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:AA_adaptive_threshold", Gaffer.FloatPlug( "value", defaultValue = 0.05000000074505806, ), False, "aaAdaptiveThreshold", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:bucket_size", Gaffer.IntPlug( "value", defaultValue = 64, ), False, "bucketSize", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:bucket_scanning", Gaffer.StringPlug( "value", defaultValue = 'spiral', ), False, "bucketScanning", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:parallel_node_init", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "parallelNodeInit", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:threads", Gaffer.IntPlug( "value", defaultValue = 0, ), False, "threads", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:progressive_min_AA_samples", Gaffer.IntPlug( "value", defaultValue = -4, ), False, "progressiveMinAASamples", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:render_device", Gaffer.StringPlug( "value", defaultValue = 'CPU', ), False, "renderDevice", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:gpu_max_texture_resolution", Gaffer.IntPlug( "value", defaultValue = 0, ), False, "gpuMaxTextureResolution", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "render:resolution", Gaffer.V2iPlug( "value", defaultValue = imath.V2i( 1024, 778 ), ), False, "renderResolution", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "render:resolutionMultiplier", Gaffer.FloatPlug( "value", defaultValue = 1.0, ), False, "resolutionMultiplier", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "render:cameraBlur", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "cameraBlur", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "render:transformBlur", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "transformBlur", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "render:deformationBlur", Gaffer.BoolPlug( "value", defaultValue = False, ), False, "deformationBlur", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "render:shutter", Gaffer.V2fPlug( "value", defaultValue = imath.V2f( -0.25, 0.25 ), ), False, "shutter", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "sampleMotion", Gaffer.BoolPlug( "value", defaultValue = True, ), False, "sampleMotion", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:AA_samples", Gaffer.IntPlug( "value", defaultValue = 3, ), False, "aaSamples", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:GI_diffuse_samples", Gaffer.IntPlug( "value", defaultValue = 2, ), False, "giDiffuseSamples", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:GI_specular_samples", Gaffer.IntPlug( "value", defaultValue = 2, ), False, "giSpecularSamples", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:GI_transmission_samples", Gaffer.IntPlug( "value", defaultValue = 2, ), False, "giTransmissionSamples", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:GI_sss_samples", Gaffer.IntPlug( "value", defaultValue = 2, ), False, "giSSSSamples", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:GI_volume_samples", Gaffer.IntPlug( "value", defaultValue = 2, ), False, "giVolumeSamples", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:low_light_threshold", Gaffer.FloatPlug( "value", defaultValue = 0.0010000000474974513, ), False, "lowLightThreshold", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:GI_total_depth", Gaffer.IntPlug( "value", defaultValue = 10, ), False, "giTotalDepth", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:GI_diffuse_depth", Gaffer.IntPlug( "value", defaultValue = 2, ), False, "giDiffuseDepth", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:GI_specular_depth", Gaffer.IntPlug( "value", defaultValue = 2, ), False, "giSpecularDepth", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:GI_transmission_depth", Gaffer.IntPlug( "value", defaultValue = 2, ), False, "giTransmissionDepth", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:GI_volume_depth", Gaffer.IntPlug( "value", defaultValue = 0, ), False, "giVolumeDepth", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addColumn( Gaffer.NameValuePlug( "ai:auto_transparency_depth", Gaffer.IntPlug( "value", defaultValue = 10, ), False, "autoTransparencyDepth", Gaffer.Plug.Flags.Default ), adoptEnabledPlug = True )
__children["rows"].addRows( 4 )
__children["enabled"] = Gaffer.BoolPlug( "enabled", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["enabled"] )
__children["Dot"] = Gaffer.Dot( "Dot" )
parent.addChild( __children["Dot"] )
__children["Dot"].setup( GafferScene.ScenePlug( "in", ) )
__children["Dot"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Dot"].addChild( Gaffer.BoolPlug( "__uiInputConnectionsMinimised", defaultValue = False, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ArnoldOptions"]["in"].setInput( __children["BoxIn"]["out"] )
__children["ArnoldOptions"]["options"]["bucketSize"].setInput( __children["SpreadsheetOptions"]["out"]["bucketSize"] )
__children["ArnoldOptions"]["options"]["bucketScanning"].setInput( __children["SpreadsheetOptions"]["out"]["bucketScanning"] )
__children["ArnoldOptions"]["options"]["parallelNodeInit"].setInput( __children["SpreadsheetOptions"]["out"]["parallelNodeInit"] )
__children["ArnoldOptions"]["options"]["threads"].setInput( __children["SpreadsheetOptions"]["out"]["threads"] )
__children["ArnoldOptions"]["options"]["aaSamples"].setInput( __children["SpreadsheetOptions"]["out"]["aaSamples"] )
__children["ArnoldOptions"]["options"]["progressiveMinAASamples"].setInput( __children["SpreadsheetOptions"]["out"]["progressiveMinAASamples"] )
__children["ArnoldOptions"]["options"]["giDiffuseSamples"].setInput( __children["SpreadsheetOptions"]["out"]["giDiffuseSamples"] )
__children["ArnoldOptions"]["options"]["giSpecularSamples"].setInput( __children["SpreadsheetOptions"]["out"]["giSpecularSamples"] )
__children["ArnoldOptions"]["options"]["giTransmissionSamples"].setInput( __children["SpreadsheetOptions"]["out"]["giTransmissionSamples"] )
__children["ArnoldOptions"]["options"]["giSSSSamples"].setInput( __children["SpreadsheetOptions"]["out"]["giSSSSamples"] )
__children["ArnoldOptions"]["options"]["giVolumeSamples"].setInput( __children["SpreadsheetOptions"]["out"]["giVolumeSamples"] )
__children["ArnoldOptions"]["options"]["lowLightThreshold"].setInput( __children["SpreadsheetOptions"]["out"]["lowLightThreshold"] )
__children["ArnoldOptions"]["options"]["enableAdaptiveSampling"].setInput( __children["SpreadsheetOptions"]["out"]["enableAdaptiveSampling"] )
__children["ArnoldOptions"]["options"]["aaSamplesMax"].setInput( __children["SpreadsheetOptions"]["out"]["aaSamplesMax"] )
__children["ArnoldOptions"]["options"]["aaAdaptiveThreshold"].setInput( __children["SpreadsheetOptions"]["out"]["aaAdaptiveThreshold"] )
__children["ArnoldOptions"]["options"]["giTotalDepth"].setInput( __children["SpreadsheetOptions"]["out"]["giTotalDepth"] )
__children["ArnoldOptions"]["options"]["giDiffuseDepth"].setInput( __children["SpreadsheetOptions"]["out"]["giDiffuseDepth"] )
__children["ArnoldOptions"]["options"]["giSpecularDepth"].setInput( __children["SpreadsheetOptions"]["out"]["giSpecularDepth"] )
__children["ArnoldOptions"]["options"]["giTransmissionDepth"].setInput( __children["SpreadsheetOptions"]["out"]["giTransmissionDepth"] )
__children["ArnoldOptions"]["options"]["giVolumeDepth"].setInput( __children["SpreadsheetOptions"]["out"]["giVolumeDepth"] )
__children["ArnoldOptions"]["options"]["autoTransparencyDepth"].setInput( __children["SpreadsheetOptions"]["out"]["autoTransparencyDepth"] )
__children["ArnoldOptions"]["options"]["maxSubdivisions"].setInput( __children["SpreadsheetOptions"]["out"]["maxSubdivisions"] )
__children["ArnoldOptions"]["options"]["subdivDicingCamera"].setInput( __children["SpreadsheetOptions"]["out"]["subdivDicingCamera"] )
__children["ArnoldOptions"]["options"]["subdivFrustumCulling"].setInput( __children["SpreadsheetOptions"]["out"]["subdivFrustumCulling"] )
__children["ArnoldOptions"]["options"]["subdivFrustumPadding"].setInput( __children["SpreadsheetOptions"]["out"]["subdivFrustumPadding"] )
__children["ArnoldOptions"]["options"]["ignoreTextures"].setInput( __children["SpreadsheetOptions"]["out"]["ignoreTextures"] )
__children["ArnoldOptions"]["options"]["ignoreShaders"].setInput( __children["SpreadsheetOptions"]["out"]["ignoreShaders"] )
__children["ArnoldOptions"]["options"]["ignoreAtmosphere"].setInput( __children["SpreadsheetOptions"]["out"]["ignoreAtmosphere"] )
__children["ArnoldOptions"]["options"]["ignoreLights"].setInput( __children["SpreadsheetOptions"]["out"]["ignoreLights"] )
__children["ArnoldOptions"]["options"]["ignoreShadows"].setInput( __children["SpreadsheetOptions"]["out"]["ignoreShadows"] )
__children["ArnoldOptions"]["options"]["ignoreSubdivision"].setInput( __children["SpreadsheetOptions"]["out"]["ignoreSubdivision"] )
__children["ArnoldOptions"]["options"]["ignoreDisplacement"].setInput( __children["SpreadsheetOptions"]["out"]["ignoreDisplacement"] )
__children["ArnoldOptions"]["options"]["ignoreBump"].setInput( __children["SpreadsheetOptions"]["out"]["ignoreBump"] )
__children["ArnoldOptions"]["options"]["ignoreMotionBlur"].setInput( __children["SpreadsheetOptions"]["out"]["ignoreMotionBlur"] )
__children["ArnoldOptions"]["options"]["ignoreSSS"].setInput( __children["SpreadsheetOptions"]["out"]["ignoreSSS"] )
__children["ArnoldOptions"]["options"]["renderDevice"].setInput( __children["SpreadsheetOptions"]["out"]["renderDevice"] )
__children["ArnoldOptions"]["options"]["gpuMaxTextureResolution"].setInput( __children["SpreadsheetOptions"]["out"]["gpuMaxTextureResolution"] )
__children["ArnoldOptions"]["__uiPosition"].setValue( imath.V2f( 134.525497, 132.926208 ) )
__children["out"].setInput( __children["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["out"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:index', 0 )
Gaffer.Metadata.registerValue( __children["in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["in"], 'description', 'The input scene' )
Gaffer.Metadata.registerValue( __children["in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["in"], 'noduleLayout:spacing', 2.0 )
Gaffer.Metadata.registerValue( __children["in"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["in"], 'layout:index', 1 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"], 'nodeGadget:type', 'GafferUI::StandardNodeGadget' )
__children["SpreadsheetOptions"]["selector"].setInput( __children["selector"] )
__children["SpreadsheetOptions"]["rows"].setInput( __children["rows"] )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"], 'spreadsheet:section:AdaptativeSampling:index', 2 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"], 'spreadsheet:section:Features:index', 3 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"], 'spreadsheet:section:Subdivision:index', 4 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"], 'spreadsheet:section:Rendering:index', 5 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"], 'spreadsheet:section:Gpu:index', 6 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"], 'spreadsheet:section:standardOptions:index', 7 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"], 'spreadsheet:section:Sampling:index', 0 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"], 'spreadsheet:section:Ray Depth:index', 1 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreTextures"], 'spreadsheet:section', 'Features' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreTextures"], 'spreadsheet:columnIndex', 13 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreTextures"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreTextures"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreTextures"]["value"], 'description', 'Ignores all file textures, rendering as\nif they were all white.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreShaders"], 'spreadsheet:section', 'Features' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreShaders"], 'spreadsheet:columnIndex', 14 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreShaders"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreShaders"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreShaders"]["value"], 'description', 'Ignores all shaders, rendering as a\nsimple facing ratio shader instead.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreAtmosphere"], 'spreadsheet:section', 'Features' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreAtmosphere"], 'spreadsheet:columnIndex', 15 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreAtmosphere"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreAtmosphere"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreAtmosphere"]["value"], 'description', 'Ignores all atmosphere shaders.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreLights"], 'spreadsheet:section', 'Features' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreLights"], 'spreadsheet:columnIndex', 16 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreLights"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreLights"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreLights"]["value"], 'description', 'Ignores all lights.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreShadows"], 'spreadsheet:section', 'Features' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreShadows"], 'spreadsheet:columnIndex', 17 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreShadows"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreShadows"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreShadows"]["value"], 'description', 'Skips all shadow calculations.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreSubdivision"], 'spreadsheet:section', 'Features' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreSubdivision"], 'spreadsheet:columnIndex', 18 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreSubdivision"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreSubdivision"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreSubdivision"]["value"], 'description', 'Treats all subdivision surfaces\nas simple polygon meshes instead.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreDisplacement"], 'spreadsheet:section', 'Features' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreDisplacement"], 'spreadsheet:columnIndex', 19 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreDisplacement"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreDisplacement"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreDisplacement"]["value"], 'description', 'Ignores all displacement shaders.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreBump"], 'spreadsheet:section', 'Features' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreBump"], 'spreadsheet:columnIndex', 20 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreBump"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreBump"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreBump"]["value"], 'description', 'Ignores all bump mapping.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreMotionBlur"], 'spreadsheet:section', 'Features' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreMotionBlur"], 'spreadsheet:columnIndex', 21 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreMotionBlur"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreMotionBlur"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreMotionBlur"]["value"], 'description', 'Ignores motion blur. Note that the turn\noff motion blur completely, it is more\nefficient to use the motion blur controls\nin the StandardOptions node.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreSSS"], 'spreadsheet:section', 'Features' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreSSS"], 'spreadsheet:columnIndex', 22 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreSSS"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreSSS"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["ignoreSSS"]["value"], 'description', 'Disables all subsurface scattering.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["maxSubdivisions"], 'spreadsheet:section', 'Subdivision' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["maxSubdivisions"], 'spreadsheet:columnIndex', 23 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["maxSubdivisions"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["maxSubdivisions"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["maxSubdivisions"]["value"], 'description', 'A global override for the maximum polymesh.subdiv_iterations.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["maxSubdivisions"]["value"], 'label', 'Max Subdivisions' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["subdivDicingCamera"], 'spreadsheet:section', 'Subdivision' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["subdivDicingCamera"], 'spreadsheet:columnIndex', 24 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["subdivDicingCamera"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["subdivDicingCamera"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["subdivDicingCamera"]["value"], 'description', 'If specified, adaptive subdivision will be performed\nrelative to this camera, instead of the render camera.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["subdivDicingCamera"]["value"], 'label', 'Subdiv Dicing Camera' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["subdivDicingCamera"]["value"]["value"], 'plugValueWidget:type', 'GafferSceneUI.ScenePathPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["subdivDicingCamera"]["value"]["value"], 'path:valid', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["subdivDicingCamera"]["value"]["value"], 'scenePathPlugValueWidget:setNames', IECore.StringVectorData( [ '__cameras' ] ) )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["subdivDicingCamera"]["value"]["value"], 'scenePathPlugValueWidget:setsLabel', 'Show only cameras' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["subdivFrustumCulling"], 'spreadsheet:section', 'Subdivision' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["subdivFrustumCulling"], 'spreadsheet:columnIndex', 25 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["subdivFrustumCulling"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["subdivFrustumCulling"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["subdivFrustumCulling"]["value"], 'description', 'Disable subdivision of polygons outside the camera frustum.\n( Uses dicing camera if one has been set ).\nSaves performance, at the cost of inaccurate reflections\nand shadows.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["subdivFrustumCulling"]["value"], 'label', 'Subdiv Frustum Culling' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["subdivFrustumPadding"], 'spreadsheet:section', 'Subdivision' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["subdivFrustumPadding"], 'spreadsheet:columnIndex', 26 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["subdivFrustumPadding"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["subdivFrustumPadding"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["subdivFrustumPadding"]["value"], 'description', 'When using subdivFrustumCulling, adds a world space bound\naround the frustum where subdivision still occurs.  Can be\nused to improve shadows, reflections, and objects the motion\nblur into frame.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["subdivFrustumPadding"]["value"], 'label', 'Subdiv Frustum Padding' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["subdivFrustumPadding"]["value"]["value"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["enableAdaptiveSampling"], 'spreadsheet:section', 'AdaptativeSampling' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["enableAdaptiveSampling"], 'spreadsheet:columnIndex', 27 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["enableAdaptiveSampling"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["enableAdaptiveSampling"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["enableAdaptiveSampling"]["value"], 'description', "If adaptive sampling is enabled, Arnold will take a minimum\nof ( aaSamples * aaSamples ) samples per pixel, and will then\ntake up to ( aaSamplesMax * aaSamplesMax ) samples per pixel,\nor until the remaining estimated noise gets lower than\naaAdaptiveThreshold.\n\n> Note : Arnold's adaptive sampling won't do anything if aaSamples == 1 : you need to set aaSamples to at least 2." )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["enableAdaptiveSampling"]["value"], 'label', 'Enable Adaptive Sampling' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["aaSamplesMax"], 'spreadsheet:section', 'AdaptativeSampling' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["aaSamplesMax"], 'spreadsheet:columnIndex', 28 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["aaSamplesMax"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["aaSamplesMax"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["aaSamplesMax"]["value"], 'description', 'The maximum sampling rate during adaptive sampling.  Like\naaSamples, this value is squared.  So aaSamplesMax == 6 means up to 36 samples per pixel.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["aaSamplesMax"]["value"], 'label', 'AA Samples Max' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["aaAdaptiveThreshold"], 'spreadsheet:section', 'AdaptativeSampling' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["aaAdaptiveThreshold"], 'spreadsheet:columnIndex', 29 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["aaAdaptiveThreshold"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["aaAdaptiveThreshold"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["aaAdaptiveThreshold"]["value"], 'description', 'How much leftover noise is acceptable when terminating adaptive sampling.  Higher values\naccept more noise, lower values keep rendering longer to achieve smaller amounts of\nnoise.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["aaAdaptiveThreshold"]["value"], 'label', 'AA Adaptive Threshold' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["aaAdaptiveThreshold"]["value"]["value"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["bucketSize"], 'spreadsheet:section', 'Rendering' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["bucketSize"], 'spreadsheet:columnIndex', 30 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["bucketSize"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["bucketSize"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["bucketSize"]["value"], 'description', 'Controls the size of the image buckets.\nThe default size is 64x64 pixels.\nBigger buckets will increase memory usage\nwhile smaller buckets may render slower as\nthey need to perform redundant computations\nand filtering.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["bucketSize"]["value"], 'label', 'Bucket Size' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["bucketScanning"], 'spreadsheet:section', 'Rendering' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["bucketScanning"], 'spreadsheet:columnIndex', 31 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["bucketScanning"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["bucketScanning"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["bucketScanning"]["value"], 'description', 'Controls the order in which buckets are\nprocessed. A spiral pattern is the default.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["bucketScanning"]["value"], 'label', 'Bucket Scanning' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["bucketScanning"]["value"]["value"], 'plugValueWidget:type', 'GafferUI.PresetsPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["bucketScanning"]["value"]["value"], 'presetNames', IECore.StringVectorData( [ 'Top', 'Left', 'Random', 'Spiral', 'Hilbert' ] ) )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["bucketScanning"]["value"]["value"], 'presetValues', IECore.StringVectorData( [ 'top', 'left', 'random', 'spiral', 'hilbert' ] ) )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["parallelNodeInit"], 'spreadsheet:section', 'Rendering' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["parallelNodeInit"], 'spreadsheet:columnIndex', 32 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["parallelNodeInit"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["parallelNodeInit"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["parallelNodeInit"]["value"], 'description', "Enables Arnold's parallel node initialization.\nNote that some Arnold features may not be\nthread-safe, in which case enabling this option\ncan cause crashes. One such example is Cryptomatte\nand its use in the AlSurface shader." )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["threads"], 'spreadsheet:section', 'Rendering' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["threads"], 'spreadsheet:columnIndex', 33 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["threads"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["threads"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["threads"]["value"], 'description', 'Specifies the number of threads Arnold\nis allowed to use. A value of 0 gives\nArnold access to all available threads.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["progressiveMinAASamples"], 'spreadsheet:section', 'Rendering' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["progressiveMinAASamples"], 'spreadsheet:columnIndex', 4 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["progressiveMinAASamples"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["progressiveMinAASamples"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["progressiveMinAASamples"]["value"], 'description', 'Controls the number of rays per pixel\nfor the first low quality pass of\nprogressive rendering.  -4 will start\nwith large squares, 1 will start one\nsample for every pixel.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["progressiveMinAASamples"]["value"], 'label', 'Progressive Min AA Samples' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["renderDevice"], 'spreadsheet:section', 'Gpu' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["renderDevice"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["renderDevice"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["renderDevice"]["value"], 'description', 'Can be used to put Arnold in GPU rendering mode, using your graphics card instead of CPU.  This is currently a beta with limited stability, and missing support for OSL and volumes.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["renderDevice"]["value"]["value"], 'plugValueWidget:type', 'GafferUI.PresetsPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["renderDevice"]["value"]["value"], 'presetNames', IECore.StringVectorData( [ 'CPU', 'GPU' ] ) )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["renderDevice"]["value"]["value"], 'presetValues', IECore.StringVectorData( [ 'CPU', 'GPU' ] ) )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["gpuMaxTextureResolution"], 'spreadsheet:section', 'Gpu' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["gpuMaxTextureResolution"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["gpuMaxTextureResolution"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["gpuMaxTextureResolution"]["value"], 'description', 'If non-zero, this will omit the high resolution mipmaps when in GPU mode, to avoid running out of GPU memory.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["gpuMaxTextureResolution"]["value"], 'label', 'Max Texture Resolution' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["renderResolution"], 'spreadsheet:section', 'standardOptions' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["renderResolution"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["renderResolution"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["renderResolution"]["value"], 'description', 'The resolution of the image to be rendered.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["renderResolution"]["value"], 'label', 'Resolution' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["resolutionMultiplier"], 'spreadsheet:section', 'standardOptions' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["resolutionMultiplier"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["resolutionMultiplier"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["resolutionMultiplier"]["value"], 'description', 'Multiplies the resolution of the render by this amount.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["resolutionMultiplier"]["value"]["value"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["cameraBlur"], 'spreadsheet:section', 'standardOptions' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["cameraBlur"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["cameraBlur"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["cameraBlur"]["value"], 'description', 'Whether or not camera motion is taken into\naccount in the renderered image. To specify the\nnumber of segments to use for camera motion, use\na StandardAttributes node filtered for the camera.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["cameraBlur"]["value"], 'label', 'Camera' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["transformBlur"], 'spreadsheet:section', 'standardOptions' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["transformBlur"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["transformBlur"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["transformBlur"]["value"], 'description', 'Whether or not transform motion is taken into\naccount in the renderered image. To specify the\nnumber of transform segments to use for each\nobject in the scene, use a StandardAttributes node\nwith appropriate filters.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["transformBlur"]["value"], 'label', 'Transform' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["deformationBlur"], 'spreadsheet:section', 'standardOptions' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["deformationBlur"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["deformationBlur"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["deformationBlur"]["value"], 'description', 'Whether or not deformation motion is taken into\naccount in the renderered image. To specify the\nnumber of deformation segments to use for each\nobject in the scene, use a StandardAttributes node\nwith appropriate filters.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["deformationBlur"]["value"], 'label', 'Deformation' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["shutter"], 'spreadsheet:section', 'standardOptions' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["shutter"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["shutter"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["shutter"]["value"], 'description', 'The interval over which the camera shutter is open. Measured\nin frames, and specified relative to the frame being rendered.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["shutter"]["value"]["value"]["x"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["shutter"]["value"]["value"]["y"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["sampleMotion"], 'spreadsheet:section', 'standardOptions' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["sampleMotion"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["sampleMotion"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["sampleMotion"]["value"], 'description', 'Whether to actually render motion blur.  Disabling this\nsetting while motion blur is set up produces a render where\nthere is no blur, but there is accurate motion information.\nUseful for rendering motion vector passes.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["aaSamples"], 'spreadsheet:section', 'Sampling' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["aaSamples"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["aaSamples"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["aaSamples"]["value"], 'description', 'Controls the number of rays per pixel\ntraced from the camera. The more samples,\nthe better the quality of antialiasing,\nmotion blur and depth of field. The actual\nnumber of rays per pixel is the square of\nthe AA samples value - so a value of 3\nmeans 9 rays are traced, 4 means 16 rays are\ntraced and so on.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["aaSamples"]["value"], 'label', 'AA Samples' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giDiffuseSamples"], 'spreadsheet:section', 'Sampling' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giDiffuseSamples"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giDiffuseSamples"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giDiffuseSamples"]["value"], 'description', 'Controls the number of rays traced when\ncomputing indirect illumination ("bounce light").\nThe number of actual diffuse rays traced is the\nsquare of this number.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giDiffuseSamples"]["value"], 'label', 'Diffuse Samples' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giSpecularSamples"], 'spreadsheet:section', 'Sampling' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giSpecularSamples"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giSpecularSamples"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giSpecularSamples"]["value"], 'description', 'Controls the number of rays traced when\ncomputing specular reflections.\nThe number of actual specular rays traced\nis the square of this number.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giSpecularSamples"]["value"], 'label', 'Specular Samples' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giTransmissionSamples"], 'spreadsheet:section', 'Sampling' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giTransmissionSamples"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giTransmissionSamples"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giTransmissionSamples"]["value"], 'description', 'Controls the number of rays traced when\ncomputing specular refractions. The number of actual\ntransmitted specular rays traced is the square of this number.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giTransmissionSamples"]["value"], 'label', 'Transmission Samples' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giSSSSamples"], 'spreadsheet:section', 'Sampling' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giSSSSamples"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giSSSSamples"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giSSSSamples"]["value"], 'description', 'Controls the number of rays traced when\ncomputing subsurface scattering. The number of actual\nsubsurface rays traced is the square of this number.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giSSSSamples"]["value"], 'label', 'SSS Samples' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giVolumeSamples"], 'spreadsheet:section', 'Sampling' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giVolumeSamples"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giVolumeSamples"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giVolumeSamples"]["value"], 'description', 'Controls the number of rays traced when\ncomputing indirect lighting for volumes.\nThe number of actual rays traced\nis the square of this number. The volume\nray depth must be increased from the default\nvalue of 0 before this setting is of use.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giVolumeSamples"]["value"], 'label', 'Volume Samples' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["lowLightThreshold"], 'spreadsheet:section', 'Rendering' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["lowLightThreshold"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["lowLightThreshold"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["lowLightThreshold"]["value"], 'description', 'Light paths with less energy than this will be discarded.  This\nsaves tracing shadow rays, but cuts off the light when it gets dim.\nRaising this improves performance, but makes the image potentially\ndarker in some areas.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["lowLightThreshold"]["value"], 'label', 'Low Light Threshold' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["lowLightThreshold"]["value"]["value"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giTotalDepth"], 'spreadsheet:section', 'Ray Depth' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giTotalDepth"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giTotalDepth"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giTotalDepth"]["value"], 'description', 'The maximum depth of any ray (Diffuse + Specular +\nTransmission + Volume).' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giTotalDepth"]["value"], 'label', 'Total Depth' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giDiffuseDepth"], 'spreadsheet:section', 'Ray Depth' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giDiffuseDepth"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giDiffuseDepth"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giDiffuseDepth"]["value"], 'description', 'Controls the number of ray bounces when\ncomputing indirect illumination ("bounce light").' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giDiffuseDepth"]["value"], 'label', 'Diffuse Depth' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giSpecularDepth"], 'spreadsheet:section', 'Ray Depth' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giSpecularDepth"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giSpecularDepth"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giSpecularDepth"]["value"], 'description', 'Controls the number of ray bounces when\ncomputing specular reflections.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giSpecularDepth"]["value"], 'label', 'Specular Depth' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giTransmissionDepth"], 'spreadsheet:section', 'Ray Depth' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giTransmissionDepth"], 'spreadsheet:columnWidth', 137 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giTransmissionDepth"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giTransmissionDepth"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giTransmissionDepth"]["value"], 'description', 'Controls the number of ray bounces when\ncomputing specular refractions.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giTransmissionDepth"]["value"], 'label', 'Transmission Depth' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giVolumeDepth"], 'spreadsheet:section', 'Ray Depth' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giVolumeDepth"], 'spreadsheet:columnWidth', 103 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giVolumeDepth"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giVolumeDepth"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giVolumeDepth"]["value"], 'description', 'Controls the number of ray bounces when\ncomputing indirect lighting on volumes.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["giVolumeDepth"]["value"], 'label', 'Volume Depth' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["autoTransparencyDepth"], 'spreadsheet:section', 'Ray Depth' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["autoTransparencyDepth"], 'spreadsheet:columnWidth', 153 )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["autoTransparencyDepth"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["autoTransparencyDepth"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["autoTransparencyDepth"]["value"], 'description', 'The number of allowable transparent layers - after\nthis the last object will be treated as opaque.' )
Gaffer.Metadata.registerValue( __children["SpreadsheetOptions"]["rows"][0]["cells"]["autoTransparencyDepth"]["value"], 'label', 'Transparency Depth' )
__children["SpreadsheetOptions"]["__uiPosition"].setValue( imath.V2f( 116.983162, 133.519363 ) )
__children["BoxOut"]["in"].setInput( __children["StandardOptions"]["out"] )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'description', 'The processed output scene.' )
__children["BoxOut"]["passThrough"].setInput( __children["Dot"]["out"] )
__children["BoxOut"]["enabled"].setInput( __children["enabled"] )
__children["BoxOut"]["__uiPosition"].setValue( imath.V2f( 136.025497, 111.141304 ) )
__children["BoxIn"]["__in"].setInput( __children["in"] )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'description', 'The input scene' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'noduleLayout:spacing', 2.0 )
__children["BoxIn"]["__uiPosition"].setValue( imath.V2f( 134.526291, 141.25824 ) )
__children["StandardOptions"]["in"].setInput( __children["ArnoldOptions"]["out"] )
__children["StandardOptions"]["options"]["renderCropWindow"]["value"].setValue( imath.Box2f( imath.V2f( 0, 0 ), imath.V2f( 0.996559083, 1 ) ) )
__children["StandardOptions"]["options"]["renderCropWindow"]["enabled"].setValue( True )
__children["StandardOptions"]["options"]["renderResolution"].setInput( __children["SpreadsheetOptions"]["out"]["renderResolution"] )
__children["StandardOptions"]["options"]["resolutionMultiplier"].setInput( __children["SpreadsheetOptions"]["out"]["resolutionMultiplier"] )
__children["StandardOptions"]["options"]["cameraBlur"].setInput( __children["SpreadsheetOptions"]["out"]["cameraBlur"] )
__children["StandardOptions"]["options"]["transformBlur"].setInput( __children["SpreadsheetOptions"]["out"]["transformBlur"] )
__children["StandardOptions"]["options"]["deformationBlur"].setInput( __children["SpreadsheetOptions"]["out"]["deformationBlur"] )
__children["StandardOptions"]["options"]["shutter"].setInput( __children["SpreadsheetOptions"]["out"]["shutter"] )
__children["StandardOptions"]["options"]["sampleMotion"].setInput( __children["SpreadsheetOptions"]["out"]["sampleMotion"] )
__children["StandardOptions"]["__uiPosition"].setValue( imath.V2f( 134.525497, 127.262146 ) )
Gaffer.Metadata.registerValue( __children["selector"], 'description', 'The value that the row names will be matched against.\nTypically this will refer to a Context Variable using\nthe `${variableName}` syntax.' )
Gaffer.Metadata.registerValue( __children["selector"], 'divider', True )
Gaffer.Metadata.registerValue( __children["selector"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["selector"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["selector"], 'layout:index', 2 )
__children["rows"][0]["cells"]["threads"]["value"]["value"].setValue( -1 )
__children["rows"][0]["cells"]["threads"]["value"]["enabled"].setValue( True )
__children["rows"][1]["name"].setValue( 'preview' )
__children["rows"][1]["cells"]["threads"]["value"]["value"].setValue( -1 )
__children["rows"][1]["cells"]["threads"]["value"]["enabled"].setValue( True )
__children["rows"][1]["cells"]["resolutionMultiplier"]["value"]["value"].setValue( 0.20000000298023224 )
__children["rows"][1]["cells"]["resolutionMultiplier"]["value"]["enabled"].setValue( True )
__children["rows"][1]["cells"]["aaSamples"]["value"]["value"].setValue( 2 )
__children["rows"][1]["cells"]["aaSamples"]["value"]["enabled"].setValue( True )
__children["rows"][1]["cells"]["giDiffuseSamples"]["value"]["value"].setValue( 1 )
__children["rows"][1]["cells"]["giDiffuseSamples"]["value"]["enabled"].setValue( True )
__children["rows"][1]["cells"]["giSpecularSamples"]["value"]["value"].setValue( 1 )
__children["rows"][1]["cells"]["giSpecularSamples"]["value"]["enabled"].setValue( True )
__children["rows"][1]["cells"]["giTransmissionSamples"]["value"]["value"].setValue( 1 )
__children["rows"][1]["cells"]["giTransmissionSamples"]["value"]["enabled"].setValue( True )
__children["rows"][1]["cells"]["giSSSSamples"]["value"]["value"].setValue( 1 )
__children["rows"][1]["cells"]["giSSSSamples"]["value"]["enabled"].setValue( True )
__children["rows"][1]["cells"]["giVolumeSamples"]["value"]["value"].setValue( 0 )
__children["rows"][1]["cells"]["giVolumeSamples"]["value"]["enabled"].setValue( True )
__children["rows"][1]["cells"]["giDiffuseDepth"]["value"]["value"].setValue( 0 )
__children["rows"][1]["cells"]["giDiffuseDepth"]["value"]["enabled"].setValue( True )
__children["rows"][1]["cells"]["giSpecularDepth"]["value"]["value"].setValue( 1 )
__children["rows"][1]["cells"]["giSpecularDepth"]["value"]["enabled"].setValue( True )
__children["rows"][1]["cells"]["giTransmissionDepth"]["value"]["value"].setValue( 5 )
__children["rows"][1]["cells"]["giTransmissionDepth"]["value"]["enabled"].setValue( True )
__children["rows"][2]["name"].setValue( 'low' )
__children["rows"][2]["cells"]["threads"]["value"]["value"].setValue( -1 )
__children["rows"][2]["cells"]["threads"]["value"]["enabled"].setValue( True )
__children["rows"][2]["cells"]["resolutionMultiplier"]["value"]["value"].setValue( 0.5 )
__children["rows"][2]["cells"]["resolutionMultiplier"]["value"]["enabled"].setValue( True )
__children["rows"][2]["cells"]["aaSamples"]["value"]["value"].setValue( 4 )
__children["rows"][2]["cells"]["aaSamples"]["value"]["enabled"].setValue( True )
__children["rows"][2]["cells"]["giDiffuseSamples"]["value"]["value"].setValue( 1 )
__children["rows"][2]["cells"]["giDiffuseSamples"]["value"]["enabled"].setValue( True )
__children["rows"][2]["cells"]["giSpecularSamples"]["value"]["value"].setValue( 1 )
__children["rows"][2]["cells"]["giSpecularSamples"]["value"]["enabled"].setValue( True )
__children["rows"][2]["cells"]["giTransmissionSamples"]["value"]["value"].setValue( 1 )
__children["rows"][2]["cells"]["giTransmissionSamples"]["value"]["enabled"].setValue( True )
__children["rows"][2]["cells"]["giSSSSamples"]["value"]["value"].setValue( 1 )
__children["rows"][2]["cells"]["giSSSSamples"]["value"]["enabled"].setValue( True )
__children["rows"][2]["cells"]["giVolumeSamples"]["value"]["value"].setValue( 1 )
__children["rows"][2]["cells"]["giVolumeSamples"]["value"]["enabled"].setValue( True )
__children["rows"][2]["cells"]["giDiffuseDepth"]["value"]["value"].setValue( 1 )
__children["rows"][2]["cells"]["giDiffuseDepth"]["value"]["enabled"].setValue( True )
__children["rows"][2]["cells"]["giSpecularDepth"]["value"]["value"].setValue( 1 )
__children["rows"][2]["cells"]["giSpecularDepth"]["value"]["enabled"].setValue( True )
__children["rows"][2]["cells"]["giTransmissionDepth"]["value"]["value"].setValue( 5 )
__children["rows"][2]["cells"]["giTransmissionDepth"]["value"]["enabled"].setValue( True )
__children["rows"][3]["name"].setValue( 'mid' )
__children["rows"][3]["cells"]["threads"]["value"]["value"].setValue( -1 )
__children["rows"][3]["cells"]["threads"]["value"]["enabled"].setValue( True )
__children["rows"][3]["cells"]["resolutionMultiplier"]["value"]["value"].setValue( 0.75 )
__children["rows"][3]["cells"]["resolutionMultiplier"]["value"]["enabled"].setValue( True )
__children["rows"][3]["cells"]["aaSamples"]["value"]["value"].setValue( 6 )
__children["rows"][3]["cells"]["aaSamples"]["value"]["enabled"].setValue( True )
__children["rows"][3]["cells"]["giDiffuseSamples"]["value"]["value"].setValue( 1 )
__children["rows"][3]["cells"]["giDiffuseSamples"]["value"]["enabled"].setValue( True )
__children["rows"][3]["cells"]["giSpecularSamples"]["value"]["value"].setValue( 1 )
__children["rows"][3]["cells"]["giSpecularSamples"]["value"]["enabled"].setValue( True )
__children["rows"][3]["cells"]["giTransmissionSamples"]["value"]["value"].setValue( 1 )
__children["rows"][3]["cells"]["giTransmissionSamples"]["value"]["enabled"].setValue( True )
__children["rows"][3]["cells"]["giSSSSamples"]["value"]["value"].setValue( 1 )
__children["rows"][3]["cells"]["giSSSSamples"]["value"]["enabled"].setValue( True )
__children["rows"][3]["cells"]["giVolumeSamples"]["value"]["value"].setValue( 1 )
__children["rows"][3]["cells"]["giVolumeSamples"]["value"]["enabled"].setValue( True )
__children["rows"][3]["cells"]["giDiffuseDepth"]["value"]["value"].setValue( 1 )
__children["rows"][3]["cells"]["giDiffuseDepth"]["value"]["enabled"].setValue( True )
__children["rows"][3]["cells"]["giSpecularDepth"]["value"]["enabled"].setValue( True )
__children["rows"][3]["cells"]["giTransmissionDepth"]["value"]["value"].setValue( 5 )
__children["rows"][3]["cells"]["giTransmissionDepth"]["value"]["enabled"].setValue( True )
__children["rows"][4]["name"].setValue( 'high' )
__children["rows"][4]["cells"]["threads"]["value"]["value"].setValue( -1 )
__children["rows"][4]["cells"]["threads"]["value"]["enabled"].setValue( True )
__children["rows"][4]["cells"]["aaSamples"]["value"]["value"].setValue( 9 )
__children["rows"][4]["cells"]["aaSamples"]["value"]["enabled"].setValue( True )
__children["rows"][4]["cells"]["giDiffuseSamples"]["value"]["enabled"].setValue( True )
__children["rows"][4]["cells"]["giSpecularSamples"]["value"]["enabled"].setValue( True )
__children["rows"][4]["cells"]["giTransmissionSamples"]["value"]["value"].setValue( 1 )
__children["rows"][4]["cells"]["giTransmissionSamples"]["value"]["enabled"].setValue( True )
__children["rows"][4]["cells"]["giSSSSamples"]["value"]["value"].setValue( 1 )
__children["rows"][4]["cells"]["giSSSSamples"]["value"]["enabled"].setValue( True )
__children["rows"][4]["cells"]["giVolumeSamples"]["value"]["value"].setValue( 1 )
__children["rows"][4]["cells"]["giVolumeSamples"]["value"]["enabled"].setValue( True )
__children["rows"][4]["cells"]["giDiffuseDepth"]["value"]["value"].setValue( 1 )
__children["rows"][4]["cells"]["giDiffuseDepth"]["value"]["enabled"].setValue( True )
__children["rows"][4]["cells"]["giSpecularDepth"]["value"]["enabled"].setValue( True )
__children["rows"][4]["cells"]["giTransmissionDepth"]["value"]["value"].setValue( 5 )
__children["rows"][4]["cells"]["giTransmissionDepth"]["value"]["enabled"].setValue( True )
Gaffer.Metadata.registerValue( __children["rows"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["rows"], 'description', 'Holds a child RowPlug for each row in the spreadsheet.' )
Gaffer.Metadata.registerValue( __children["rows"], 'spreadsheet:section:AdaptativeSampling:index', 2 )
Gaffer.Metadata.registerValue( __children["rows"], 'spreadsheet:section:Features:index', 3 )
Gaffer.Metadata.registerValue( __children["rows"], 'spreadsheet:section:Subdivision:index', 4 )
Gaffer.Metadata.registerValue( __children["rows"], 'spreadsheet:section:Rendering:index', 5 )
Gaffer.Metadata.registerValue( __children["rows"], 'spreadsheet:section:Gpu:index', 6 )
Gaffer.Metadata.registerValue( __children["rows"], 'spreadsheet:section:standardOptions:index', 7 )
Gaffer.Metadata.registerValue( __children["rows"], 'spreadsheet:section:Sampling:index', 0 )
Gaffer.Metadata.registerValue( __children["rows"], 'spreadsheet:section:Ray Depth:index', 1 )
__children["rows"].resetDefault()
Gaffer.Metadata.registerValue( __children["rows"][0], 'description', 'The default row. This provides output values when no other\nrow matches the `selector`.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["name"], 'description', "The name of the row. This is matched against the `selector`\nto determine which row is chosen to be passed to the output.\nMay contain multiple space separated names and any of Gaffer's\nstandard wildcards." )
Gaffer.Metadata.registerValue( __children["rows"][0]["enabled"], 'description', 'Enables or disables this row. Disabled rows are ignored.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"], 'description', 'Contains a child CellPlug for each column in the spreadsheet.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreTextures"], 'spreadsheet:section', 'Features' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreTextures"], 'spreadsheet:columnIndex', 13 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreTextures"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreTextures"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreTextures"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreTextures"]["value"], 'description', 'Ignores all file textures, rendering as\nif they were all white.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreTextures"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreTextures"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreShaders"], 'spreadsheet:section', 'Features' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreShaders"], 'spreadsheet:columnIndex', 14 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreShaders"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreShaders"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreShaders"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreShaders"]["value"], 'description', 'Ignores all shaders, rendering as a\nsimple facing ratio shader instead.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreShaders"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreShaders"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreAtmosphere"], 'spreadsheet:section', 'Features' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreAtmosphere"], 'spreadsheet:columnIndex', 15 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreAtmosphere"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreAtmosphere"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreAtmosphere"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreAtmosphere"]["value"], 'description', 'Ignores all atmosphere shaders.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreAtmosphere"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreAtmosphere"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreLights"], 'spreadsheet:section', 'Features' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreLights"], 'spreadsheet:columnIndex', 16 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreLights"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreLights"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreLights"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreLights"]["value"], 'description', 'Ignores all lights.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreLights"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreLights"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreShadows"], 'spreadsheet:section', 'Features' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreShadows"], 'spreadsheet:columnIndex', 17 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreShadows"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreShadows"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreShadows"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreShadows"]["value"], 'description', 'Skips all shadow calculations.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreShadows"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreShadows"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreSubdivision"], 'spreadsheet:section', 'Features' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreSubdivision"], 'spreadsheet:columnIndex', 18 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreSubdivision"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreSubdivision"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreSubdivision"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreSubdivision"]["value"], 'description', 'Treats all subdivision surfaces\nas simple polygon meshes instead.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreSubdivision"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreSubdivision"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreDisplacement"], 'spreadsheet:section', 'Features' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreDisplacement"], 'spreadsheet:columnIndex', 19 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreDisplacement"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreDisplacement"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreDisplacement"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreDisplacement"]["value"], 'description', 'Ignores all displacement shaders.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreDisplacement"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreDisplacement"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreBump"], 'spreadsheet:section', 'Features' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreBump"], 'spreadsheet:columnIndex', 20 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreBump"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreBump"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreBump"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreBump"]["value"], 'description', 'Ignores all bump mapping.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreBump"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreBump"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreMotionBlur"], 'spreadsheet:section', 'Features' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreMotionBlur"], 'spreadsheet:columnIndex', 21 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreMotionBlur"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreMotionBlur"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreMotionBlur"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreMotionBlur"]["value"], 'description', 'Ignores motion blur. Note that the turn\noff motion blur completely, it is more\nefficient to use the motion blur controls\nin the StandardOptions node.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreMotionBlur"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreMotionBlur"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreSSS"], 'spreadsheet:section', 'Features' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreSSS"], 'spreadsheet:columnIndex', 22 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreSSS"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreSSS"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreSSS"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreSSS"]["value"], 'description', 'Disables all subsurface scattering.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreSSS"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["ignoreSSS"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["maxSubdivisions"], 'spreadsheet:section', 'Subdivision' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["maxSubdivisions"], 'spreadsheet:columnIndex', 23 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["maxSubdivisions"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["maxSubdivisions"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["maxSubdivisions"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["maxSubdivisions"]["value"], 'description', 'A global override for the maximum polymesh.subdiv_iterations.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["maxSubdivisions"]["value"], 'label', 'Max Subdivisions' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["maxSubdivisions"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["maxSubdivisions"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivDicingCamera"], 'spreadsheet:section', 'Subdivision' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivDicingCamera"], 'spreadsheet:columnIndex', 24 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivDicingCamera"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivDicingCamera"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivDicingCamera"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivDicingCamera"]["value"], 'description', 'If specified, adaptive subdivision will be performed\nrelative to this camera, instead of the render camera.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivDicingCamera"]["value"], 'label', 'Subdiv Dicing Camera' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivDicingCamera"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivDicingCamera"]["value"]["value"], 'plugValueWidget:type', 'GafferSceneUI.ScenePathPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivDicingCamera"]["value"]["value"], 'path:valid', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivDicingCamera"]["value"]["value"], 'scenePathPlugValueWidget:setNames', IECore.StringVectorData( [ '__cameras' ] ) )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivDicingCamera"]["value"]["value"], 'scenePathPlugValueWidget:setsLabel', 'Show only cameras' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivDicingCamera"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivFrustumCulling"], 'spreadsheet:section', 'Subdivision' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivFrustumCulling"], 'spreadsheet:columnIndex', 25 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivFrustumCulling"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivFrustumCulling"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivFrustumCulling"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivFrustumCulling"]["value"], 'description', 'Disable subdivision of polygons outside the camera frustum.\n( Uses dicing camera if one has been set ).\nSaves performance, at the cost of inaccurate reflections\nand shadows.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivFrustumCulling"]["value"], 'label', 'Subdiv Frustum Culling' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivFrustumCulling"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivFrustumCulling"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivFrustumPadding"], 'spreadsheet:section', 'Subdivision' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivFrustumPadding"], 'spreadsheet:columnIndex', 26 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivFrustumPadding"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivFrustumPadding"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivFrustumPadding"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivFrustumPadding"]["value"], 'description', 'When using subdivFrustumCulling, adds a world space bound\naround the frustum where subdivision still occurs.  Can be\nused to improve shadows, reflections, and objects the motion\nblur into frame.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivFrustumPadding"]["value"], 'label', 'Subdiv Frustum Padding' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivFrustumPadding"]["value"]["value"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivFrustumPadding"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["subdivFrustumPadding"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["enableAdaptiveSampling"], 'spreadsheet:section', 'AdaptativeSampling' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["enableAdaptiveSampling"], 'spreadsheet:columnIndex', 27 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["enableAdaptiveSampling"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["enableAdaptiveSampling"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["enableAdaptiveSampling"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["enableAdaptiveSampling"]["value"], 'description', "If adaptive sampling is enabled, Arnold will take a minimum\nof ( aaSamples * aaSamples ) samples per pixel, and will then\ntake up to ( aaSamplesMax * aaSamplesMax ) samples per pixel,\nor until the remaining estimated noise gets lower than\naaAdaptiveThreshold.\n\n> Note : Arnold's adaptive sampling won't do anything if aaSamples == 1 : you need to set aaSamples to at least 2." )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["enableAdaptiveSampling"]["value"], 'label', 'Enable Adaptive Sampling' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["enableAdaptiveSampling"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["enableAdaptiveSampling"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["aaSamplesMax"], 'spreadsheet:section', 'AdaptativeSampling' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["aaSamplesMax"], 'spreadsheet:columnIndex', 28 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["aaSamplesMax"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["aaSamplesMax"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["aaSamplesMax"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["aaSamplesMax"]["value"], 'description', 'The maximum sampling rate during adaptive sampling.  Like\naaSamples, this value is squared.  So aaSamplesMax == 6 means up to 36 samples per pixel.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["aaSamplesMax"]["value"], 'label', 'AA Samples Max' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["aaSamplesMax"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["aaSamplesMax"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["aaAdaptiveThreshold"], 'spreadsheet:section', 'AdaptativeSampling' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["aaAdaptiveThreshold"], 'spreadsheet:columnIndex', 29 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["aaAdaptiveThreshold"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["aaAdaptiveThreshold"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["aaAdaptiveThreshold"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["aaAdaptiveThreshold"]["value"], 'description', 'How much leftover noise is acceptable when terminating adaptive sampling.  Higher values\naccept more noise, lower values keep rendering longer to achieve smaller amounts of\nnoise.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["aaAdaptiveThreshold"]["value"], 'label', 'AA Adaptive Threshold' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["aaAdaptiveThreshold"]["value"]["value"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["aaAdaptiveThreshold"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["aaAdaptiveThreshold"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["bucketSize"], 'spreadsheet:section', 'Rendering' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["bucketSize"], 'spreadsheet:columnIndex', 30 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["bucketSize"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["bucketSize"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["bucketSize"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["bucketSize"]["value"], 'description', 'Controls the size of the image buckets.\nThe default size is 64x64 pixels.\nBigger buckets will increase memory usage\nwhile smaller buckets may render slower as\nthey need to perform redundant computations\nand filtering.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["bucketSize"]["value"], 'label', 'Bucket Size' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["bucketSize"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["bucketSize"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["bucketScanning"], 'spreadsheet:section', 'Rendering' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["bucketScanning"], 'spreadsheet:columnIndex', 31 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["bucketScanning"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["bucketScanning"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["bucketScanning"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["bucketScanning"]["value"], 'description', 'Controls the order in which buckets are\nprocessed. A spiral pattern is the default.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["bucketScanning"]["value"], 'label', 'Bucket Scanning' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["bucketScanning"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["bucketScanning"]["value"]["value"], 'plugValueWidget:type', 'GafferUI.PresetsPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["bucketScanning"]["value"]["value"], 'presetNames', IECore.StringVectorData( [ 'Top', 'Left', 'Random', 'Spiral', 'Hilbert' ] ) )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["bucketScanning"]["value"]["value"], 'presetValues', IECore.StringVectorData( [ 'top', 'left', 'random', 'spiral', 'hilbert' ] ) )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["bucketScanning"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["parallelNodeInit"], 'spreadsheet:section', 'Rendering' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["parallelNodeInit"], 'spreadsheet:columnIndex', 32 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["parallelNodeInit"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["parallelNodeInit"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["parallelNodeInit"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["parallelNodeInit"]["value"], 'description', "Enables Arnold's parallel node initialization.\nNote that some Arnold features may not be\nthread-safe, in which case enabling this option\ncan cause crashes. One such example is Cryptomatte\nand its use in the AlSurface shader." )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["parallelNodeInit"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["parallelNodeInit"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["threads"], 'spreadsheet:section', 'Rendering' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["threads"], 'spreadsheet:columnIndex', 33 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["threads"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["threads"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["threads"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["threads"]["value"], 'description', 'Specifies the number of threads Arnold\nis allowed to use. A value of 0 gives\nArnold access to all available threads.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["threads"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["threads"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["progressiveMinAASamples"], 'spreadsheet:section', 'Rendering' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["progressiveMinAASamples"], 'spreadsheet:columnIndex', 4 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["progressiveMinAASamples"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["progressiveMinAASamples"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["progressiveMinAASamples"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["progressiveMinAASamples"]["value"], 'description', 'Controls the number of rays per pixel\nfor the first low quality pass of\nprogressive rendering.  -4 will start\nwith large squares, 1 will start one\nsample for every pixel.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["progressiveMinAASamples"]["value"], 'label', 'Progressive Min AA Samples' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["progressiveMinAASamples"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["progressiveMinAASamples"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["renderDevice"], 'spreadsheet:section', 'Gpu' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["renderDevice"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["renderDevice"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["renderDevice"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["renderDevice"]["value"], 'description', 'Can be used to put Arnold in GPU rendering mode, using your graphics card instead of CPU.  This is currently a beta with limited stability, and missing support for OSL and volumes.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["renderDevice"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["renderDevice"]["value"]["value"], 'plugValueWidget:type', 'GafferUI.PresetsPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["renderDevice"]["value"]["value"], 'presetNames', IECore.StringVectorData( [ 'CPU', 'GPU' ] ) )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["renderDevice"]["value"]["value"], 'presetValues', IECore.StringVectorData( [ 'CPU', 'GPU' ] ) )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["renderDevice"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["gpuMaxTextureResolution"], 'spreadsheet:section', 'Gpu' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["gpuMaxTextureResolution"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["gpuMaxTextureResolution"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["gpuMaxTextureResolution"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["gpuMaxTextureResolution"]["value"], 'description', 'If non-zero, this will omit the high resolution mipmaps when in GPU mode, to avoid running out of GPU memory.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["gpuMaxTextureResolution"]["value"], 'label', 'Max Texture Resolution' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["gpuMaxTextureResolution"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["gpuMaxTextureResolution"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["renderResolution"], 'spreadsheet:section', 'standardOptions' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["renderResolution"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["renderResolution"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["renderResolution"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["renderResolution"]["value"], 'description', 'The resolution of the image to be rendered.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["renderResolution"]["value"], 'label', 'Resolution' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["renderResolution"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["renderResolution"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["resolutionMultiplier"], 'spreadsheet:section', 'standardOptions' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["resolutionMultiplier"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["resolutionMultiplier"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["resolutionMultiplier"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["resolutionMultiplier"]["value"], 'description', 'Multiplies the resolution of the render by this amount.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["resolutionMultiplier"]["value"]["value"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["resolutionMultiplier"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["resolutionMultiplier"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["cameraBlur"], 'spreadsheet:section', 'standardOptions' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["cameraBlur"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["cameraBlur"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["cameraBlur"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["cameraBlur"]["value"], 'description', 'Whether or not camera motion is taken into\naccount in the renderered image. To specify the\nnumber of segments to use for camera motion, use\na StandardAttributes node filtered for the camera.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["cameraBlur"]["value"], 'label', 'Camera' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["cameraBlur"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["cameraBlur"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["transformBlur"], 'spreadsheet:section', 'standardOptions' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["transformBlur"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["transformBlur"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["transformBlur"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["transformBlur"]["value"], 'description', 'Whether or not transform motion is taken into\naccount in the renderered image. To specify the\nnumber of transform segments to use for each\nobject in the scene, use a StandardAttributes node\nwith appropriate filters.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["transformBlur"]["value"], 'label', 'Transform' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["transformBlur"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["transformBlur"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["deformationBlur"], 'spreadsheet:section', 'standardOptions' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["deformationBlur"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["deformationBlur"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["deformationBlur"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["deformationBlur"]["value"], 'description', 'Whether or not deformation motion is taken into\naccount in the renderered image. To specify the\nnumber of deformation segments to use for each\nobject in the scene, use a StandardAttributes node\nwith appropriate filters.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["deformationBlur"]["value"], 'label', 'Deformation' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["deformationBlur"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["deformationBlur"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["shutter"], 'spreadsheet:section', 'standardOptions' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["shutter"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["shutter"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["shutter"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["shutter"]["value"], 'description', 'The interval over which the camera shutter is open. Measured\nin frames, and specified relative to the frame being rendered.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["shutter"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["shutter"]["value"]["value"]["x"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["shutter"]["value"]["value"]["y"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["shutter"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["sampleMotion"], 'spreadsheet:section', 'standardOptions' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["sampleMotion"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["sampleMotion"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["sampleMotion"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["sampleMotion"]["value"], 'description', 'Whether to actually render motion blur.  Disabling this\nsetting while motion blur is set up produces a render where\nthere is no blur, but there is accurate motion information.\nUseful for rendering motion vector passes.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["sampleMotion"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["sampleMotion"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["aaSamples"], 'spreadsheet:section', 'Sampling' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["aaSamples"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["aaSamples"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["aaSamples"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["aaSamples"]["value"], 'description', 'Controls the number of rays per pixel\ntraced from the camera. The more samples,\nthe better the quality of antialiasing,\nmotion blur and depth of field. The actual\nnumber of rays per pixel is the square of\nthe AA samples value - so a value of 3\nmeans 9 rays are traced, 4 means 16 rays are\ntraced and so on.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["aaSamples"]["value"], 'label', 'AA Samples' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["aaSamples"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["aaSamples"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giDiffuseSamples"], 'spreadsheet:section', 'Sampling' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giDiffuseSamples"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giDiffuseSamples"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giDiffuseSamples"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giDiffuseSamples"]["value"], 'description', 'Controls the number of rays traced when\ncomputing indirect illumination ("bounce light").\nThe number of actual diffuse rays traced is the\nsquare of this number.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giDiffuseSamples"]["value"], 'label', 'Diffuse Samples' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giDiffuseSamples"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giDiffuseSamples"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giSpecularSamples"], 'spreadsheet:section', 'Sampling' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giSpecularSamples"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giSpecularSamples"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giSpecularSamples"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giSpecularSamples"]["value"], 'description', 'Controls the number of rays traced when\ncomputing specular reflections.\nThe number of actual specular rays traced\nis the square of this number.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giSpecularSamples"]["value"], 'label', 'Specular Samples' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giSpecularSamples"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giSpecularSamples"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giTransmissionSamples"], 'spreadsheet:section', 'Sampling' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giTransmissionSamples"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giTransmissionSamples"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giTransmissionSamples"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giTransmissionSamples"]["value"], 'description', 'Controls the number of rays traced when\ncomputing specular refractions. The number of actual\ntransmitted specular rays traced is the square of this number.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giTransmissionSamples"]["value"], 'label', 'Transmission Samples' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giTransmissionSamples"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giTransmissionSamples"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giSSSSamples"], 'spreadsheet:section', 'Sampling' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giSSSSamples"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giSSSSamples"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giSSSSamples"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giSSSSamples"]["value"], 'description', 'Controls the number of rays traced when\ncomputing subsurface scattering. The number of actual\nsubsurface rays traced is the square of this number.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giSSSSamples"]["value"], 'label', 'SSS Samples' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giSSSSamples"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giSSSSamples"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giVolumeSamples"], 'spreadsheet:section', 'Sampling' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giVolumeSamples"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giVolumeSamples"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giVolumeSamples"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giVolumeSamples"]["value"], 'description', 'Controls the number of rays traced when\ncomputing indirect lighting for volumes.\nThe number of actual rays traced\nis the square of this number. The volume\nray depth must be increased from the default\nvalue of 0 before this setting is of use.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giVolumeSamples"]["value"], 'label', 'Volume Samples' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giVolumeSamples"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giVolumeSamples"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["lowLightThreshold"], 'spreadsheet:section', 'Rendering' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["lowLightThreshold"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["lowLightThreshold"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["lowLightThreshold"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["lowLightThreshold"]["value"], 'description', 'Light paths with less energy than this will be discarded.  This\nsaves tracing shadow rays, but cuts off the light when it gets dim.\nRaising this improves performance, but makes the image potentially\ndarker in some areas.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["lowLightThreshold"]["value"], 'label', 'Low Light Threshold' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["lowLightThreshold"]["value"]["value"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["lowLightThreshold"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["lowLightThreshold"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giTotalDepth"], 'spreadsheet:section', 'Ray Depth' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giTotalDepth"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giTotalDepth"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giTotalDepth"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giTotalDepth"]["value"], 'description', 'The maximum depth of any ray (Diffuse + Specular +\nTransmission + Volume).' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giTotalDepth"]["value"], 'label', 'Total Depth' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giTotalDepth"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giTotalDepth"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giDiffuseDepth"], 'spreadsheet:section', 'Ray Depth' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giDiffuseDepth"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giDiffuseDepth"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giDiffuseDepth"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giDiffuseDepth"]["value"], 'description', 'Controls the number of ray bounces when\ncomputing indirect illumination ("bounce light").' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giDiffuseDepth"]["value"], 'label', 'Diffuse Depth' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giDiffuseDepth"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giDiffuseDepth"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giSpecularDepth"], 'spreadsheet:section', 'Ray Depth' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giSpecularDepth"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giSpecularDepth"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giSpecularDepth"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giSpecularDepth"]["value"], 'description', 'Controls the number of ray bounces when\ncomputing specular reflections.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giSpecularDepth"]["value"], 'label', 'Specular Depth' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giSpecularDepth"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giSpecularDepth"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giTransmissionDepth"], 'spreadsheet:section', 'Ray Depth' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giTransmissionDepth"], 'spreadsheet:columnWidth', 137 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giTransmissionDepth"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giTransmissionDepth"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giTransmissionDepth"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giTransmissionDepth"]["value"], 'description', 'Controls the number of ray bounces when\ncomputing specular refractions.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giTransmissionDepth"]["value"], 'label', 'Transmission Depth' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giTransmissionDepth"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giTransmissionDepth"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giVolumeDepth"], 'spreadsheet:section', 'Ray Depth' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giVolumeDepth"], 'spreadsheet:columnWidth', 103 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giVolumeDepth"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giVolumeDepth"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giVolumeDepth"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giVolumeDepth"]["value"], 'description', 'Controls the number of ray bounces when\ncomputing indirect lighting on volumes.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giVolumeDepth"]["value"], 'label', 'Volume Depth' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giVolumeDepth"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["giVolumeDepth"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["autoTransparencyDepth"], 'spreadsheet:section', 'Ray Depth' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["autoTransparencyDepth"], 'spreadsheet:columnWidth', 153 )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["autoTransparencyDepth"]["value"], 'spreadsheet:plugMenu:includeAsAncestor', True )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["autoTransparencyDepth"]["value"], 'spreadsheet:plugMenu:ancestorLabel', 'Value and Switch' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["autoTransparencyDepth"]["value"], 'spreadsheet:columnName', 'value' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["autoTransparencyDepth"]["value"], 'description', 'The number of allowable transparent layers - after\nthis the last object will be treated as opaque.' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["autoTransparencyDepth"]["value"], 'label', 'Transparency Depth' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["autoTransparencyDepth"]["value"]["value"], 'spreadsheet:columnName', 'valueValue' )
Gaffer.Metadata.registerValue( __children["rows"][0]["cells"]["autoTransparencyDepth"]["value"]["enabled"], 'spreadsheet:columnName', 'valueEnabled' )
__children["Dot"]["in"].setInput( __children["BoxIn"]["out"] )
__children["Dot"]["__uiPosition"].setValue( imath.V2f( 137.525497, 116.141304 ) )
__children["Dot"]["__uiInputConnectionsMinimised"].setValue( True )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonTop:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonBottom:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonLeft:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonRight:visible', False )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySections', IECore.StringVectorData( [  ] ) )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySectionIndices', IECore.IntVectorData( [  ] ) )
Gaffer.Metadata.registerValue( parent, 'icon', 'noun_Settings_white_3206489.png' )
Gaffer.Metadata.registerValue( parent, 'editScope:processorType', 'LDTquality' )


del __children

